{# Convert a UNIX timestamp into a friendly duration, for example:
   
   "2 weeks, 4 days and 42 minutes"
   
   Note that all parts of the string (weeks, days, hours, minutes) are only displayed if not zero.
   
   A single UNIX timestamp is input, this is subtracted from the current time to obtain a delta.
#}

{% macro format_duration(time) %}

	{% set delta_seconds = as_timestamp(now()) - time %}

	{% set minutes = (delta_seconds // 60) | int(0) %}
	{% set hours = (minutes // 60) %}
	{% set days = (hours // 24) %}
	{% set weeks = (days // 7) %}

	{% set minutes = (minutes % 60) %}
	{% set hours =  (hours % 24) %}
	{% set days = (days % 7) %}
	
	{% set seconds = (delta_seconds - (weeks * 604800) - (days * 86400) - (hours * 3600) - (minutes * 60)) | int(0) %}

	{% macro phrase(value, name) %}
		{%- set value = value %}
		{%- set end = 's' if value > 1 else '' %}
		{{- '{} {}{}'.format(value, name, end) if value | int(0) > 0 else '' }}
	{%- endmacro %}
				
	{% set text = [ phrase(weeks, 'week'), phrase(days, 'day'), phrase(hours, 'hr'), phrase(minutes, 'min'), phrase(seconds, 'sec') ] | select('!=','') | list | join(', ') %}
	{% set last_comma = text.rfind(',') %}
	{% if last_comma != -1 %}
	  {% set text = text[:last_comma] + ' and' + text[last_comma + 1:] %}
	{% endif %}
	  
	{{ text }}

{% endmacro %}

{# Convert a timestamp into a friendly string, for example:
   
   "12:32 on Thu 27th Apr 2023"
#}

{% macro format_time(time) %}
        
	{% set timestamp = as_timestamp(states(time), now()) %}
	{% set date = timestamp | timestamp_custom('%d') %}
    {% set date = '{:01}'.format(date | int(0)) %}
    {% if date in ('1', '21', '31') %}
      {% set date = date ~ 'st' %}
    {% elif date in ('2', '22') %}
      {% set date = date ~ 'nd' %}
    {% elif date in ('3', '23') %}
      {% set date = date ~ 'rd' %}
    {% else %}
      {% set date = date ~ 'th' %}
    {% endif %}

    {{ timestamp | timestamp_custom('%H:%M on %a') }} {{ date }} {{ timestamp | timestamp_custom('%b %Y') }}

{% endmacro %}

{# Create a friendly opposition hockey team name, for example "Red Wings". The city/region name is not included. #}

{% macro format_hockey_opposition_team(status_entity, next_game_entity) %}

    {% if states(next_game_entity) is defined and state_attr(next_game_entity, 'teams') != None %}
		{% if states(status_entity) == 'Home' %}
		  {% set opp_team_list = (state_attr(next_game_entity, 'teams')['away']['team']['name']).split() %}
		{% elif states(status_entity) == 'Away' %}
		  {% set opp_team_list = (state_attr(next_game_entity, 'teams')['home']['team']['name']).split() %}
		{% else %}
		  {% set opp_team_list = ['None'] %}
		{% endif %}
		
		{% if opp_team_list | wordcount > 2 %}
		  {% set two_word_suffixes = ['Leafs', 'Wings', 'Jackets', 'Knights'] %}
		  {% if opp_team_list[-1] in two_word_suffixes %}
			{% set opp_team = opp_team_list[-2] ~ ' ' ~ opp_team_list[-1] %}
		  {% else %}
			{% set opp_team = opp_team_list[-1] %}
		  {% endif %}
		{% else %}
		  {% set opp_team = opp_team_list[-1] %}
		{% endif %}
	{% else %}
		{% set opp_team = 'Unknown' %}
	{% endif %}
	
	{{ opp_team }}

{% endmacro %}
