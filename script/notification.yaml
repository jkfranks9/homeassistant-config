#=======================#
#     Notifications     #
#=======================#

# Mobile worker script... this is called by the Send Notification script for both the throttled and non-throttled cases.
mobile_notification_worker:
  alias: Mobile Notification Worker
  
  fields:
    message:
      description: 'The message to be issued.'
    
    title:
      description: 'The title of the message.'
    
    channel:
      description: 'The channel to which the notification is issued.'
      selector:
        select:
          options:
            - standard
            - temporary
            - persistent
            - critical
    
    timeout:
      description: 'The timeout for channel "temporary".'
    
    tag:
      description: 'The tag for channels "persistent" and "critical".'
  
  sequence:
    
    # Handle the different channels.
    - choose:
                
      # Standard channel; use all defaults.
      - conditions: "{{ channel == 'standard' }}"
        
        sequence:
          - service: notify.mobile_app_jon_galaxy
            data:
              title: "{{ title }}"
              message: "{{ message }}"
              data:
                channel: "{{ channel }}"
                tag: "{{ tag }}"
        
      # Temporary channel; specify a timeout in seconds.
      - conditions: "{{ channel == 'temporary' }}"
          
        sequence:
          - service: notify.mobile_app_jon_galaxy
            data:
              title: "{{ title }}"
              message: "{{ message }}"
              data:
                channel: "{{ channel }}"
                timeout: "{{ timeout }}"
                tag: "{{ tag }}"
        
      # Persistent channel; specify both sticky (notification not dismissed when tapped) and persistent (can't be swiped away).
      # The notification must be cleared by an automation/script when it makes sense.
      - conditions: "{{ channel == 'persistent' }}"
        
        sequence:
          - service: notify.mobile_app_jon_galaxy
            data:
              title: "{{ title }}"
              message: "{{ message }}"
              data:
                channel: "{{ channel }}"
                sticky: true
                persistent: true
                tag: "{{ tag }}"
        
      # Critical channel; used for high priority notifications.
      - conditions: "{{ channel == 'critical' }}"
        
        sequence:
          - service: notify.mobile_app_jon_galaxy
            data:
              title: "{{ title }}"
              message: "{{ message }}"
              data:
                channel: "{{ channel }}"
                persistent: true
                importance: high
                tag: "{{ tag }}"
          
      # Invalid channel, log it.
      default:
        - service: system_log.write
          data:
            message: "Invalid channel '{{ channel }}' specified"
            level: error

# Send a notification to one or more destinations.
send_notification:
  alias: Send Notification
  mode: queued
  max: 10
  
  fields:
    destination:
      description: 'Where to send the notification.'
      selector:
        select:
          options:
            - mobile
            - echo
            - persistent
    
    message:
      description: 'The message to be issued.'
    
    title:
      description: 'The title of the message (not used for echo).'
    
    channel:
      description: 'The channel to which a mobile notification is issued.'
      selector:
        select:
          options:
            - standard
            - temporary
            - persistent
            - critical
    
    throttled:
      description: 'If true, throttle mobile notifications so that only one per day is issued.'
      selector:
        boolean:
    
    timer_entity:
      description: 'The controlling timer entity used for throttled mobile notifications.'
      selector:
        entity:
          domain: timer
    
    timeout:
      description: 'The timeout for mobile destination channel "temporary".'
    
    tag:
      description: 'The tag to use for replacing a notification.'
    
    media_player_entity:
      description: 'The target entity used for echo destinations.'
      selector:
        entity:
          domain: media_player
    
    notification_id:
      description: 'The ID used for persistent notification destinations.'
  
  sequence:
    
    # Loop through all specified destinations.
    - repeat:
        for_each: "{{ destination }}"
      
        sequence:
          - choose:
          
            # Handle the mobile destination.
            - conditions: "{{ repeat.item == 'mobile' }}"
            
              sequence:
              
                # Handle throttled notifications, which means only send one notification per day. This is accomplished by 
                # using a timer associated with the particular notification. We only proceed if the timer is idle. Then
                # we start the timer with a duration that ends at 7 AM the next day.
                - if:
                    - "{{ throttled }}"
                  
                  then:
              
                    # Wait a few seconds just to be sure timers have been restored.
                    - delay: '00:00:03'
    
                    # Only continue if the input timer is idle.
                    - condition: "{{ is_state(timer_entity, 'idle') }}"
                    
                    - service: script.mobile_notification_worker
                      data:
                        title: "{{ title }}"
                        message: "{{ message }}"
                        channel: "{{ channel }}"
                        timeout: "{{ timeout }}"
                        tag: "{{ tag }}"
    
                    # Start the timer, using a duration that ends tomorrow at 7 AM.
                    - service: timer.start
                      data:
                        entity_id: "{{ timer_entity }}"
                        duration: >
                          {% set next = now().today().replace(hour=7, minute=0, second=0, microsecond=0) + timedelta(days = 1) %}
                          {{ (next - now().today().replace(microsecond=0)).seconds }}
                
                  # Handle non-throttled notifications.
                  else:
                    - service: script.mobile_notification_worker
                      data:
                        title: "{{ title }}"
                        message: "{{ message }}"
                        channel: "{{ channel }}"
                        timeout: "{{ timeout }}"
                        tag: "{{ tag }}"
          
            # Handle the echo destination.
            - conditions: "{{ repeat.item == 'echo' }}"
            
              sequence:
                - service: notify.alexa_media
                  data:
                    target: "{{ media_player_entity }}"
                    data:
                      type: announce
                    message: "{{ message }}"
          
            # Handle the persistent destination.
            - conditions: "{{ repeat.item == 'persistent' }}"
            
              sequence:
                - service: persistent_notification.create
                  data_template:
                    title: "{{ title }}"
                    notification_id: "{{ notification_id }}"
                    message: "{{ message }}"
          
            # Invalid destination, log it.
            default:
              - service: system_log.write
                data:
                  message: "Invalid destination '{{ destination }}' specified"
                  level: error

#===================================#
#     Notification Tag Registry     #
#===================================#

# We keep a registry of mobile notifications, with the tag as the key and the notification parameters as the data.
# This allows us to restore notifications on the mobile device if it's rebooted, or if the companion app is updated
# (not sure if this is required). 

# A tag is registered when the notification is issued.
register_mobile_notification:
  alias: Register Mobile Notification
  
  fields:
    tag:
      description: The tag value.
    
    title:
      description: The title of the message.
    
    message:
      description: The message to be issued.
    
    channel:
      description: The channel to which the notification is issued.
      selector:
        select:
          options:
            - standard
            - temporary
            - persistent
            - critical
    
    timeout:
      description: '(Optional) The timeout for channel "temporary".'
    
    timer_entity:
      description: (Optional) The controlling timer entity used for throttled notifications.
      selector:
        entity:
          domain: timer
  
  sequence:
    
    # Create the value from the specified inputs.
    - variables:
        value: >
          {% set ns = namespace(value = [title, message, channel, timeout]) %}
          {% if timer_entity is defined %}
            {% set ns.value = ns.value + [timer_entity] %}
          {% endif %}
          
          {{ ns.value }}
    
    # Add the tag to the registry.
    - event: register_mobile_tag
      event_data:
        key: "{{ tag }}"
        value: "{{ value }}"
    
    # We also keep an input select with all the tags. This is for the UI, so we can manually remove a tag if we're
    # unable to do so automatically, or if the notification is manually removed on my phone. Add the tag to this as well.
    - variables:
        tag_list: >
          {% set ns = namespace(opts = []) %}
          {% for opt in state_attr('input_select.mobile_tags', 'options') %}
            {% if opt != 'dummy' and opt != tag %}
              {% set ns.opts = ns.opts + [opt] %}
            {% endif %}
            {% if loop.last %}
              {% set ns.opts = ns.opts + [tag] %}
            {% endif %}
          {% endfor %}
          
          {{ ns.opts | sort }}
    
    - service: pyscript.save_input_select_options
      data:
        entity: input_select.mobile_tags
        list: "{{ tag_list }}"
        file: '/config/mobile_tags_backup'
    
    ####################### Special cases to automatically unregister notifications #######################
    
    # For a temporary channel notification, we know when the notification will be automatically removed from the device.
    # So set a timer to also unregister the tag, handled by the Unregister Calendar Tag automation.
    # Note to self: the name of the timer must match the tag in order for this to work.
    - if:
        - "{{ channel == 'temporary' }}"
      
      then:
        - service: timer.start
          data:
            entity_id: "{{ 'timer.' ~ tag }}"
            duration: "{{ timeout }}"
    
    # If the vacuum gets stuck or encounters an error, it cannot go home to recharge. So when the vacuum is back on
    # the recharging station it means I fixed it and placed it there. As a result, we can then automatically unregister 
    # the tag(s). Note that we could have both problems occur: some error detected during the night, and a low battery 
    # in the morning, which we interpret as being stuck. So what we do here is accumulate one or both problems in an
    # input number for the Unregister Vacuum Problem Notifications automation to use to know which tag(s) to unregister. 
    # Note that we treat the number as a bitmask: the lowest order bit for stuck and the next lowest for error.
    - variables:
        problem: "{{ iif(tag == 'vacuum_stuck', 1, iif(tag == 'vacuum_maintenance', 2, 0)) }}"
    
    - if:
        - "{{ problem > 0 }}"
      
      then:
        - service: input_number.set_value
          target:
            entity_id: input_number.vacuum_problems
          data:
            value: "{{ states('input_number.vacuum_problems') | int(0) + problem }}"

# A tag is unregistered when the notification is cleared by an automation, or if it's cleared manually on the device
# (we automate on the notification cleared sensor, which returns us the tag value).
unregister_mobile_notification:
  alias: Unregister Mobile Notification
  
  fields:
    tag:
      description: The tag value.
  
  sequence:
    
    # Remove the tag from the registry.
    - event: unregister_mobile_tag
      event_data:
        key: "{{ tag }}"
    
    # Remove the tag from the input select.
    - variables:
        tag_list: >
          {% set ns = namespace(opts = []) %}
          {% for opt in state_attr('input_select.mobile_tags', 'options') %}
            {% if opt != tag %}
              {% set ns.opts = ns.opts + [opt] %}
            {% endif %}
          {% endfor %}
          {% if ns.opts | length == 0 %}
            {% set ns.opts = ns.opts + ['dummy'] %}
          {% endif %}
          
          {{ ns.opts | sort }}
    
    - service: pyscript.save_input_select_options
      data:
        entity: input_select.mobile_tags
        list: "{{ tag_list }}"
        file: '/config/mobile_tags_backup'

# The UI allows us to unregister a tag that can't be removed automatically, by picking the tag from the input select
# that contains all the tags. The picked tag becomes the state of the input select. So the UI calls this script to
# do the unregister.
unregister_mobile_notification_from_select:
  alias: Unregister Mobile Notification From Select
  
  sequence:
    - service: script.unregister_mobile_notification
      data:
        tag: "{{ states('input_select.mobile_tags') }}"
