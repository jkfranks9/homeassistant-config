#=======================#
#     Notifications     #
#=======================#

# Mobile worker script... this is called by the Send Notification script for both the throttled and non-throttled cases.
mobile_notification_worker:
  alias: Mobile Notification Worker
  
  fields:
    message:
      description: 'The message to be issued.'
    
    title:
      description: 'The title of the message.'
    
    channel:
      description: 'The channel to which the notification is issued.'
      selector:
        select:
          options:
            - standard
            - temporary
            - critical
    
    timeout:
      description: 'The timeout for channel "temporary".'
    
    tag:
      description: 'The tag for the notification.'
  
  sequence:
    
    # Handle the different channels. Note that we specify both sticky (notification not dismissed when tapped) and persistent 
    # (can't be swiped away) for all channels. Every notification must be cleared by an automation/script when it makes sense.
    # Some are cleared automatically, while others use the Remove Manual Mobile Notification script via voice control.
    - choose:
                
      # Standard channel; used for most notifications.
      - conditions: "{{ channel == 'standard' }}"
        
        sequence:
          - service: notify.mobile_app_jon_galaxy
            data:
              title: "{{ title }}"
              message: "{{ message }}"
              data:
                channel: "{{ channel }}"
                sticky: true
                persistent: true
                tag: "{{ tag }}"
        
      # Temporary channel; specify a timeout in seconds.
      - conditions: "{{ channel == 'temporary' }}"
          
        sequence:
          - service: notify.mobile_app_jon_galaxy
            data:
              title: "{{ title }}"
              message: "{{ message }}"
              data:
                channel: "{{ channel }}"
                sticky: true
                persistent: true
                timeout: "{{ timeout }}"
                tag: "{{ tag }}"
        
      # Critical channel; used for high priority notifications.
      - conditions: "{{ channel == 'critical' }}"
        
        sequence:
          - service: notify.mobile_app_jon_galaxy
            data:
              title: "{{ title }}"
              message: "{{ message }}"
              data:
                channel: "{{ channel }}"
                sticky: true
                persistent: true
                importance: high
                tag: "{{ tag }}"
          
      # Invalid channel, log it.
      default:
        - service: system_log.write
          data:
            message: "Invalid channel '{{ channel }}' specified"
            level: error

# Send a notification to one or more destinations.
send_notification:
  alias: Send Notification
  mode: queued
  max: 10
  
  fields:
    destination:
      description: 'Where to send the notification.'
      selector:
        select:
          options:
            - mobile
            - echo
            - persistent
    
    message:
      description: 'The message to be issued.'
    
    title:
      description: 'The title of the message (not used for echo).'
    
    channel:
      description: 'The channel to which a mobile notification is issued.'
      selector:
        select:
          options:
            - standard
            - temporary
            - critical
    
    throttled:
      description: 'If true, throttle mobile notifications so that only one per day is issued.'
      selector:
        boolean:
    
    timer_entity:
      description: 'The controlling timer entity used for throttled mobile notifications.'
      selector:
        entity:
          domain: timer
    
    timeout:
      description: 'The timeout for mobile destination channel "temporary".'
    
    tag:
      description: 'The tag to use for replacing a notification.'
    
    media_player_entity:
      description: 'The target entity used for echo destinations.'
      selector:
        entity:
          domain: media_player
    
    notification_id:
      description: 'The ID used for persistent notification destinations.'
  
  sequence:
    
    # Loop through all specified destinations.
    - repeat:
        for_each: "{{ destination }}"
      
        sequence:
          - choose:
          
            # Handle the mobile destination.
            - conditions: "{{ repeat.item == 'mobile' }}"
            
              sequence:
              
                # Handle throttled notifications, which means only send one notification per day. This is accomplished by 
                # using a timer associated with the particular notification. We only proceed if the timer is idle. Then
                # we start the timer with a duration that ends at 7 AM the next day.
                - if:
                    - "{{ throttled }}"
                  
                  then:
              
                    # Wait a few seconds just to be sure timers have been restored.
                    - delay: '00:00:03'
    
                    # Only continue if the input timer is idle.
                    - condition: "{{ is_state(timer_entity, 'idle') }}"
                    
                    - service: script.mobile_notification_worker
                      data:
                        title: "{{ title }}"
                        message: "{{ message }}"
                        channel: "{{ channel }}"
                        timeout: "{{ timeout }}"
                        tag: "{{ tag }}"
    
                    # Start the timer, using a duration that ends tomorrow at 7 AM.
                    - service: timer.start
                      data:
                        entity_id: "{{ timer_entity }}"
                        duration: >
                          {% set next = now().today().replace(hour=7, minute=0, second=0, microsecond=0) + timedelta(days = 1) %}
                          {{ (next - now().today().replace(microsecond=0)).seconds }}
                
                  # Handle non-throttled notifications.
                  else:
                    - service: script.mobile_notification_worker
                      data:
                        title: "{{ title }}"
                        message: "{{ message }}"
                        channel: "{{ channel }}"
                        timeout: "{{ timeout }}"
                        tag: "{{ tag }}"
          
            # Handle the echo destination.
            - conditions: "{{ repeat.item == 'echo' }}"
            
              sequence:
                - service: notify.alexa_media
                  data:
                    target: "{{ media_player_entity }}"
                    data:
                      type: announce
                    message: "{{ message }}"
          
            # Handle the persistent destination.
            - conditions: "{{ repeat.item == 'persistent' }}"
            
              sequence:
                - service: persistent_notification.create
                  data_template:
                    title: "{{ title }}"
                    notification_id: "{{ notification_id }}"
                    message: "{{ message }}"
          
            # Invalid destination, log it.
            default:
              - service: system_log.write
                data:
                  message: "Invalid destination '{{ destination }}' specified"
                  level: error

# Remove a notification from a mobile device.
remove_mobile_notification:
  alias: Remove Mobile Notification
  mode: queued
  max: 10
  
  fields:
    tag:
      description: The tag value.
  
  sequence:
      
    # Clear the notification. In some cases it may have been cleared by the user, but it doesn't hurt to try again.
    - service: notify.mobile_app_jon_galaxy
      data:
        message: 'clear_notification'
        data:
          tag: "{{ tag }}"
    
    # Unregister the tag.
    - service: script.unregister_mobile_notification
      data:
        tag: "{{ tag }}"

#===================================#
#     Notification Tag Registry     #
#===================================#

# We keep a registry of mobile notifications, with the tag as the key and the notification parameters as the data.
# This allows us to restore notifications on the mobile device if it's rebooted, or if the companion app is updated
# (not sure if this is required). 

# A tag is registered when the notification is issued.
register_mobile_notification:
  alias: Register Mobile Notification
  
  fields:
    tag:
      description: The tag value.
    
    clear_type:
      description: How the tag can be cleared.
      selector:
        select:
          options:
            - auto
            - assisted
            - manual
    
    title:
      description: The title of the message.
    
    message:
      description: The message to be issued.
    
    channel:
      description: The channel to which the notification is issued.
      selector:
        select:
          options:
            - standard
            - temporary
            - critical
    
    timeout:
      description: '(Optional) The timeout for channel "temporary".'
    
    timer_entity:
      description: (Optional) The controlling timer entity used for throttled notifications.
      selector:
        entity:
          domain: timer
  
  sequence:
    
    # Create the value from the specified inputs.
    - variables:
        value: >
          {% set val = namespace(value = [clear_type, title, message, channel, timeout]) %}
          {% if timer_entity is defined %}
            {% set val.value = val.value + [timer_entity] %}
          {% endif %}
          
          {{ val.value }}
    
    # Add the tag to the registry.
    - event: register_mobile_tag
      event_data:
        key: "{{ tag }}"
        value: "{{ value }}"
    
    ####################### Special cases to automatically unregister notifications #######################
    
    # For a temporary channel notification, we know when the notification will be automatically removed from the device.
    # So set a timer to also unregister the tag, handled by the Unregister Calendar Tag automation.
    # Note to self: the name of the timer must match the tag in order for this to work.
    - if:
        - "{{ channel == 'temporary' }}"
      
      then:
        - service: timer.start
          data:
            entity_id: "{{ 'timer.' ~ tag }}"
            duration: "{{ timeout }}"
    
    # If the vacuum gets stuck or encounters an error, it cannot go home to recharge. So when the vacuum is back on
    # the recharging station it means I fixed it and placed it there. As a result, we can then automatically unregister 
    # the tag(s). Note that we could have both problems occur: some error detected during the night, and a low battery 
    # in the morning, which we interpret as being stuck. So what we do here is accumulate one or both problems in an
    # input number for the Unregister Vacuum Problem Notifications automation to use to know which tag(s) to unregister. 
    # Note that we treat the number as a bitmask: the lowest order bit for stuck and the next lowest for error.
    - variables:
        problem: "{{ iif(tag == 'vacuum_stuck', 1, iif(tag == 'vacuum_maintenance', 2, 0)) }}"
    
    - if:
        - "{{ problem > 0 }}"
      
      then:
        - service: input_number.set_value
          target:
            entity_id: input_number.vacuum_problems
          data:
            value: "{{ states('input_number.vacuum_problems') | int(0) + problem }}"

# A tag is unregistered when the notification is cleared by an automation.
unregister_mobile_notification:
  alias: Unregister Mobile Notification
  
  fields:
    tag:
      description: The tag value.
  
  sequence:
    
    # Remove the tag from the registry.
    - event: unregister_mobile_tag
      event_data:
        key: "{{ tag }}"

# Remove one or more mobile notifications that can only be cleared manually. This is intended to be called by an Alexa routine.
remove_manual_mobile_notification:
  alias: Remove Manual Mobile Notification
  
  sequence:
    
    # Get the room containing the echo device that was used.
    - service: script.get_echo_room
      response_variable: result
    
    - variables:
        
        # Extract the room from the response variable.
        room: "{{ result.room }}"
        
        echo_device: "{{ 'media_player.' ~ room ~ '_echo' }}"
        num_manual: "{{ states('sensor.mobile_tag_registry_manual_clear') }}"
    
    - choose:
      
      # There are currently no manual clear notifications.
      - conditions: "{{ num_manual == 0 }}"
      
        sequence:
          - service: script.send_notification
            data:
              destination:
                - echo
              message: "There are no notifications that need to be manually removed."
              media_player_entity: "{{ echo_device }}"
      
      # There is only one manual clear notification, so remove it and inform the user.
      - conditions: "{{ num_manual == 1 }}"
      
        sequence:
          - variables:
              tag: "{{ state_attr('sensor.mobile_tag_registry_manual_clear', 'tags')[0] }}"
          
          - service: script.remove_mobile_notification
            data:
              tag: "{{ tag }}"
          
          - service: script.send_notification
            data:
              destination:
                - echo
              message: "{{ 'I unregistered tag ' ~ tag | replace('_', ' ') }}"
              media_player_entity: "{{ echo_device }}"
      
      # There are multiple manual clear notifications.
      default:
          
        # Inform the user.
        - service: script.send_notification
          data:
            destination:
              - echo
            message: "{{ 'There are ' ~ num_manual ~ ' manual notifications. Check your phone for additional instructions.' }}"
            media_player_entity: "{{ echo_device }}"
        
        # Handle all notifications.
        - repeat:
            for_each: "{{ state_attr('sensor.mobile_tag_registry_manual_clear', 'tags') }}"
        
            sequence:
              - variables:
                  tag: "{{ repeat.item }}"
                  action_yes: "{{ 'Yes_' ~ tag }}"
                  action_yes_quit: "{{ 'Yes_Quit' ~ tag }}"
                  action_no: "{{ 'No_' ~ tag }}"
    
              # Send a notification with response buttons for this tag.
              - service: notify.mobile_app_jon_galaxy
                data:
                  message: "{{ 'Remove notification ' ~ tag ~ '?' }}"
                  data:
                    actions:
                      - action: "{{ action_yes }}"
                        title: "Yes"
                      - action: "{{ action_yes_quit }}"
                        title: "Yes & Quit"
                      - action: "{{ action_no }}"
                        title: "No"
            
              # Wait for the user to press a button.
              - wait_for_trigger:
                  - platform: event
                    event_type: mobile_app_notification_action
                    event_data:
                      action: "{{ action_yes }}"
                  - platform: event
                    event_type: mobile_app_notification_action
                    event_data:
                      action: "{{ action_yes_quit }}"
                  - platform: event
                    event_type: mobile_app_notification_action
                    event_data:
                      action: "{{ action_no }}"
                
                timeout: "00:01:00"
            
              # If the user responded in the affirmative, remove this notification.
              - if:
                  - "{{ wait.trigger.event.data.action in [action_yes, action_yes_quit] }}"
              
                then:          
                  - service: script.remove_mobile_notification
                    data:
                      tag: "{{ tag }}"
              
              # If the user responded to also quit, we're done.
              - if:
                  - "{{ wait.trigger.event.data.action == action_yes_quit }}"
                
                then:
                  - stop: "User asked to stop."
