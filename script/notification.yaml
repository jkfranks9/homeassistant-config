#=======================#
#     Notifications     #
#=======================#

# Mobile worker script... this is called by the Send Notification script.
mobile_notification_worker:
  alias: Mobile Notification Worker
  
  fields:
    message:
      description: 'The message to be issued.'
    
    title:
      description: 'The title of the message.'
    
    channel:
      description: 'The channel to which the notification is issued.'
      selector:
        select:
          options:
            - standard
            - temporary
            - critical
    
    timeout:
      description: 'The timeout for channel "temporary".'
    
    tag:
      description: 'The tag for the notification.'
  
  sequence:
    - variables:
    
        # Build data for the different channels. Note that we specify both sticky (notification not dismissed when tapped) and persistent 
        # (can't be swiped away) for all channels. Every notification must be cleared by an automation/script when it makes sense.
        # Some are cleared automatically, while others use the Remove Manual Mobile Notification script via voice control.
        notification_data: >
          {% set vars = {'channel': channel, 'sticky': true, 'persistent': true} %}
          {% if channel == 'temporary' %}
            {% set additional = {'timeout': timeout, 'tag': tag} %}
          {% elif channel == 'critical' %}
            {% set additional = {'importance': 'high', 'tag': tag} %}
          {% else %}
            {% set additional = {'tag': tag} %}
          {% endif %}
            
          {{ dict(vars, **additional) }}
    
    # Send notification to Jon.
    - action: notify.mobile_app_jon_galaxy
      data:
        title: "{{ title }}"
        message: "{{ message }}"
        data: "{{ notification_data }}"
    
    # For some tags, we also notify Sarah.
    - if:
        - "{{ tag in state_attr('sensor.variables', 'variables').sarah_notification_tags }}"
      
      then:
        - action: notify.mobile_app_sarah_pixel
          data:
            title: "{{ title }}"
            message: "{{ message }}"
            data: "{{ notification_data }}"

# Send a notification to one or more destinations.
send_notification:
  alias: Send Notification
  mode: queued
  max: 10
  
  fields:
    destination:
      description: Where to send the notification.
      selector:
        select:
          options:
            - mobile
            - voice_assistant
            - persistent
    
    message:
      description: The message to be issued.
    
    title:
      description: The title of the message (not used for voice assistants).
    
    channel:
      description: The channel to which a mobile notification is issued.
      selector:
        select:
          options:
            - standard
            - temporary
            - critical
    
    timeout:
      description: The timeout for the temporary mobile destination channel.
    
    tag:
      description: The tag to use for replacing a notification.
    
    room:
      description: For the voice assistant destination, a list of one or more rooms containing voice devices, or 'everywhere'.
    
    speak:
      description: (Optional) How to speak the message, for example using an emotion.
      selector:
        select:
          options:
            - normal
            - excited
    
    voice_type:
      description: The type of voice assistant device output.
      selector:
        select:
          options:
            - tts
            - announce
    
    notification_id:
      description: The ID to use for persistent notification destinations.
  
  sequence:
    - variables:
        
        # Use the default speak option if it isn't defined.
        speak_option: "{{ iif(speak is defined, speak, 'normal') }}"
    
    # Loop through all specified destinations.
    - repeat:
        for_each: "{{ destination }}"
      
        sequence:
          - choose:
          
            # Handle the mobile destination.
            - conditions: "{{ repeat.item == 'mobile' }}"
            
              sequence:
                - action: script.mobile_notification_worker
                  data:
                    title: "{{ title }}"
                    message: "{{ message }}"
                    channel: "{{ channel }}"
                    timeout: "{{ timeout }}"
                    tag: "{{ tag }}"
          
            # Handle the voice assistant destination.
            - conditions: "{{ repeat.item == 'voice_assistant' }}"
            
              sequence:
                - action: script.send_message_to_room_voice_device
                  data:
                    message: "{{ message }}"
                    speak: "{{ speak_option }}"
                    room: "{{ room }}"
                    voice_type: "{{ voice_type }}"
          
            # Handle the persistent destination.
            - conditions: "{{ repeat.item == 'persistent' }}"
            
              sequence:
                - action: persistent_notification.create
                  data_template:
                    title: "{{ title }}"
                    notification_id: "{{ notification_id }}"
                    message: "{{ message }}"
          
            # Invalid destination, log it.
            default:
              - action: system_log.write
                data:
                  message: "Invalid destination '{{ destination }}' specified"
                  level: error

# Remove a notification from a mobile device.
remove_mobile_notification:
  alias: Remove Mobile Notification
  mode: queued
  max: 10
  
  fields:
    tag:
      description: The tag value.
  
  sequence:
      
    # Clear the notification.
    - action: notify.mobile_app_jon_galaxy
      data:
        message: 'clear_notification'
        data:
          tag: "{{ tag }}"
    
    # For some tags, we also notify Sarah.
    - if:
        - "{{ tag in state_attr('sensor.variables', 'variables').sarah_notification_tags }}"
      
      then:
        - action: notify.mobile_app_sarah_pixel
          data:
            message: 'clear_notification'
            data:
              tag: "{{ tag }}"
    
    # Unregister the tag.
    - action: script.unregister_mobile_notification
      data:
        tag: "{{ tag }}"

#===================================#
#     Notification Tag Registry     #
#===================================#

# We keep a registry of mobile notifications, with the tag as the key and the notification parameters as the data.
# This allows us to restore notifications on the mobile device if it's rebooted, or if the companion app is updated
# (not sure if this is required). 

# A tag is registered when the notification is issued.
register_mobile_notification:
  alias: Register Mobile Notification
  
  fields:
    tag:
      description: The tag value.
    
    clear_type:
      description: How the tag can be cleared.
      selector:
        select:
          options:
            - auto
            - assisted
            - manual
    
    title:
      description: The title of the message.
    
    message:
      description: The message to be issued.
    
    channel:
      description: The channel to which the notification is issued.
      selector:
        select:
          options:
            - standard
            - temporary
            - critical
    
    timeout:
      description: '(Optional) The timeout for channel "temporary".'
  
  sequence:
    
    # Create the value from the specified inputs.
    - variables:
        value: >
          {% set val = namespace(value = [clear_type, title, message, channel, timeout]) %}          
          {{ val.value }}
    
    # Add the tag to the registry.
    - event: register_mobile_tag
      event_data:
        key: "{{ tag }}"
        value: "{{ value }}"
    
    ####################### Special cases to automatically unregister notifications #######################
    
    # For a temporary channel notification, we know when the notification will be automatically removed from the device.
    # So set a timer to also unregister the tag, handled by the Unregister Calendar Tag automation.
    # Note to self: the name of the timer must match the tag in order for this to work.
    - if:
        - "{{ channel == 'temporary' }}"
      
      then:
        - service: timer.start
          data:
            entity_id: "{{ 'timer.' ~ tag }}"
            duration: "{{ timeout }}"
    
    # If the vacuum gets stuck or encounters an error, it cannot go home to recharge. So when the vacuum is back on
    # the recharging station it means I fixed it and placed it there. As a result, we can then automatically unregister 
    # the tag(s). Note that we could have both problems occur: some error detected during the night, and a low battery 
    # in the morning, which we interpret as being stuck. So what we do here is accumulate one or both problems in an
    # input number for the Unregister Vacuum Problem Notifications automation to use to know which tag(s) to unregister. 
    # Note that we treat the number as a bitmask: the lowest order bit for stuck and the next lowest for error.
    # Also note that a low battery in the morning might be OK, since we check at 7:01 AM and perhaps the vacuum is
    # already docked and charging but hasn't reached 90% yet. We cover that by also including a trigger on the
    # Unregister Vacuum Problem Notifications automation for the battery rising above 90%.
    - variables:
        problem: "{{ iif(tag == 'vacuum_stuck', 1, iif(tag == 'vacuum_maintenance', 2, 0)) }}"
    
    - if:
        - "{{ problem > 0 }}"
      
      then:
        - service: input_number.set_value
          target:
            entity_id: input_number.vacuum_problems
          data:
            value: "{{ states('input_number.vacuum_problems') | int(0) + problem }}"

# A tag is unregistered when the notification is cleared by an automation.
unregister_mobile_notification:
  alias: Unregister Mobile Notification
  
  fields:
    tag:
      description: The tag value.
  
  sequence:
    
    # Remove the tag from the registry.
    - event: unregister_mobile_tag
      event_data:
        key: "{{ tag }}"

# Remove one or more mobile notifications that can only be cleared manually. This is intended to be called using a voice assistant.
remove_manual_mobile_notification:
  alias: Remove Manual Mobile Notification
  
  fields:
    voice_device:
      description: The voice device most recently spoken to.
      selector:
        entity:
  
  sequence:
    
    - variables:
        num_manual: "{{ states('sensor.mobile_tag_registry_manual_clear') }}"
        device_domain: "{{ voice_device.split('.')[0] }}"
        device_name: "{{ voice_device.split('.')[1] }}"
        room: >
          {% if device_domain == 'media_player' %}
            {{ [device_name.replace('_echo', '')] }}
          {% else %}
            {{ [device_name.replace('_nabu_assist_satellite', '')] }}
          {% endif %}
    
    - choose:
      
      # There are currently no manual clear notifications.
      - conditions: "{{ num_manual == 0 }}"
      
        sequence:
          - action: script.send_notification
            data:
              destination:
                - voice_assistant
              message: "There are no notifications that need to be manually removed."
              room: "{{ room }}"
              voice_type: tts
      
      # There is only one manual clear notification, so remove it and inform the user.
      - conditions: "{{ num_manual == 1 }}"
      
        sequence:
          - variables:
              tag: "{{ state_attr('sensor.mobile_tag_registry_manual_clear', 'tags')[0] }}"
          
          - action: script.remove_mobile_notification
            data:
              tag: "{{ tag }}"
          
          - action: script.send_notification
            data:
              destination:
                - voice_assistant
              message: "{{ 'I unregistered tag ' ~ tag | replace('_', ' ') }}"
              room: "{{ room }}"
              voice_type: tts
      
      # There are multiple manual clear notifications.
      default:
          
        # Inform the user.
        - action: script.send_notification
          data:
            destination:
              - voice_assistant
            message: "{{ 'There are ' ~ num_manual ~ ' manual notifications. Check your phone for additional instructions.' }}"
            room: "{{ room }}"
            voice_type: tts
        
        # Handle all notifications.
        - repeat:
            for_each: "{{ state_attr('sensor.mobile_tag_registry_manual_clear', 'tags') }}"
        
            sequence:
              - variables:
                  tag: "{{ repeat.item }}"
                  action_yes: "{{ 'Yes_' ~ tag }}"
                  action_yes_quit: "{{ 'Yes_Quit' ~ tag }}"
                  action_no: "{{ 'No_' ~ tag }}"
    
              # Send a notification with response buttons for this tag.
              - action: notify.mobile_app_jon_galaxy
                data:
                  message: "{{ 'Remove notification ' ~ tag ~ '?' }}"
                  data:
                    actions:
                      - action: "{{ action_yes }}"
                        title: "Yes"
                      - action: "{{ action_yes_quit }}"
                        title: "Yes & Quit"
                      - action: "{{ action_no }}"
                        title: "No"
            
              # Wait for the user to press a button.
              - wait_for_trigger:
                  - platform: event
                    event_type: mobile_app_notification_action
                    event_data:
                      action: "{{ action_yes }}"
                  - platform: event
                    event_type: mobile_app_notification_action
                    event_data:
                      action: "{{ action_yes_quit }}"
                  - platform: event
                    event_type: mobile_app_notification_action
                    event_data:
                      action: "{{ action_no }}"
                
                timeout: "00:01:00"
            
              # If the user responded in the affirmative, remove this notification.
              - if:
                  - "{{ wait.trigger.event.data.action in [action_yes, action_yes_quit] }}"
              
                then:          
                  - action: script.remove_mobile_notification
                    data:
                      tag: "{{ tag }}"
              
              # If the user responded to also quit, we're done.
              - if:
                  - "{{ wait.trigger.event.data.action == action_yes_quit }}"
                
                then:
                  - stop: "User asked to stop."

#===================#
#     Utilities     #
#===================#

# Some notifications use a list of entities on which to trigger. Therefore, we can't determine the unique notification tag until run time.
# To avoid placing such unique logic into the notification blueprint, a blueprint input is used that results in this script being called
# to extract the required tag.
extract_notification_tag_from_entity:
  alias: Extract Notification Tag From Entity
  
  fields:
    entity:
      description: The triggered entity from which to extract the tag.
    
    type:
      description: The type of the input entity. This determines the unique processing required to extract the tag.
      selector:
        select:
          options:
            - delivery
            - sonoff_power
            - tplink_power
  
  sequence:
    - variables:
        tag: >
          {% if type == 'delivery' %}
            {{ state_attr(entity, 'friendly_name') | replace('Mail ', '') | replace(' Packages', '') | replace(' Delivered', '') | replace('USPS', 'US_PS') | lower ~ '_package_delivered' }}
          {% elif type in ['sonoff_power', 'tplink_power'] %}
            {{ entity.split('.')[1] }}
          {% else %}
            unknown
          {% endif %}
    
        return_tag: "{{ {'tag': tag} }}"
    
    - stop: "Returning tag"
      response_variable: return_tag

# Send a notification message destined for a voice assistant device to the correct device, for the given room(s).
# NOTE: The Voice {Nabu | Echo} Rooms sensors contain a list of rooms that contain each type of device.
send_message_to_room_voice_device:
  alias: Send Message To Room Voice Device
  
  fields:
    message:
      description: The message to be sent.
    
    speak:
      description: How to speak the message, for example using an emotion.
      selector:
        select:
          options:
            - normal
            - excited
  
    room:
      description: A list of one or more rooms containing voice devices, or 'everywhere'.
    
    voice_type:
      description: The type of voice assistant device output.
      selector:
        select:
          options:
            - tts
            - announce
  
  sequence:
    - variables:
        
        # For the special case of the 'everywhere' room, we combine all rooms with an echo or nabu device.
        room_list: >
          {% set var = namespace(list = []) %}
          {% if room[0] == 'everywhere' %}
            {% set var.list = union(state_attr('sensor.voice_echo_rooms', 'rooms'), state_attr('sensor.voice_nabu_rooms', 'rooms')) | sort %}
          {% else %}
            {% set var.list = room %}
          {% endif %}
          
          {{ var.list }}
    
    # Loop through all specified rooms.
    - repeat:
        for_each: "{{ room_list }}"
      
        sequence:
          - variables:
              dnd_entity: "{{ 'switch.' ~ repeat.item ~ '_echo_do_not_disturb_switch' }}"
          
          # Bypass any rooms with the do not disturb (DND) switch on. These are automatically set for all occupied bedrooms during the
          # nighttime window, but can also be set manually for any device.
          - if:
              - "{{ states(dnd_entity) == 'off' }}"
            
            then:
          
              # Pick the right type of device.
              - choose:
                
                # First priority is an HA Assist (Nabu) device.
                - conditions: "{{ repeat.item in state_attr('sensor.voice_nabu_rooms', 'rooms') }}"
                
                  sequence:
                    - variables:
                        voice_entity: "{{ 'assist_satellite.' ~ repeat.item ~ '_nabu_assist_satellite' }}"
                    
                    - action: script.turn_on
                      target:
                        entity_id: script.send_voice_message
                      data:
                        variables:
                          message: "{{ message }}"
                          voice_entity: "{{ voice_entity }}"
                          voice_type: "{{ voice_type }}"
                          family: nabu
                
                # Second priority is an Amazon Echo device.
                - conditions: "{{ repeat.item in state_attr('sensor.voice_echo_rooms', 'rooms') }}"
                
                  sequence:
                    - variables:
                        voice_entity: "{{ 'media_player.' ~ repeat.item ~ '_echo' }}"
                        speak_message: >
                          {% if speak == 'excited' %}
                          <speak>
                            <amazon:emotion name="excited" intensity="medium">
                              {{ message }}
                            </amazon:emotion>
                          </speak>
                          {% else %}
                            {{ message }}
                          {% endif %}
                    
                    - action: script.turn_on
                      target:
                        entity_id: script.send_voice_message
                      data:
                        variables:
                          message: "{{ speak_message }}"
                          voice_entity: "{{ voice_entity }}"
                          voice_type: "{{ voice_type }}"
                          family: echo
                  
                # We should never get here.
                default:
                  - action: system_log.write
                    data:
                      message: "Did not find any voice assistant device for: {{ repeat.item }} ."
                      level: warning

# I've had problems sending multiple messages to multiple devices. So here we queue all messages.
# I'm taking a wild quess at the maximum that can be queued, but erring on the side of not missing any.
send_voice_message:
  alias: Send Voice Message
  
  mode: queued
  max: 25
  
  fields:
    message:
      description: The message to be sent.
    
    voice_entity:
      description: The voice device entity.
    
    voice_type:
      description: The type of voice assistant device output.
      selector:
        select:
          options:
            - tts
            - announce
    
    family:
      description: The voice device family.
      selector:
        select:
          options:
            - nabu
            - echo
  
  sequence:
    - choose:
      - conditions: "{{ family == 'nabu' }}"
      
        sequence:
          - action: assist_satellite.announce
            target:
              entity_id: "{{ voice_entity }}"
            data:
              message: "{{ message }}"
      
      - conditions: "{{ family == 'echo' }}"
      
        sequence:
          - action: notify.alexa_media
            data:
              target: "{{ voice_entity }}"
              data:
                type: "{{ voice_type }}"
              message: "{{ message }}"
