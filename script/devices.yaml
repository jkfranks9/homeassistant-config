#===============#
#     House     #
#===============#

# Turn off extended away mode if Jon returns home early.
turn_off_extended_away_mode:
  alias: Turn Off Extended Away Mode  
  sequence:

    # Continue only if extended away mode is currently on.  
    - condition: state
      entity_id: input_boolean.extended_away_mode
      state: 'on'
    
    # Set the extended away end 2 minutes from now (the extra time is just to make sure the timing satifies my paranoia).
    # This in turn will trigger the Disable Extended Away Mode automation.
    - service: input_datetime.set_datetime
      target:
        entity_id: input_datetime.extended_away_end
      data:
        datetime: "{{ (now() + timedelta(minutes = 2)).strftime('%Y-%m-%d %H:%M:%S') }}"

# This is a failsafe to make sure the Jon Away flag gets reset when I return home. This should happen
# when the Open Garage Door runs, but you never know.
reset_jon_away:
  alias: Reset Jon Away
  
  sequence:
    - delay: "00:10:00"
    
    - service: input_boolean.turn_off
      entity_id: input_boolean.jon_away

# Restore the penthouse bedroom to normal. This can happen when all family members leave, or when just parents
# leave, but a child remains.
restore_normal_penthouse_bedroom:
  alias: Restore Normal Penthouse Bedroom
  
  sequence:
    
    # Remove upstairs thermostat hold.
    - action: script.remove_thermostat_hold
      data:
        thermostat_entity: climate.upstairs
        extended: false
            
    # Turn on the vacuum automation.
    - action: script.toggle_vacuum_automation
      data:
        operation: 'on'

#==========================#
#     Computer Control     #
#==========================#

# Lock the PC.
lock_pc:
  alias: Lock PC
  
  sequence:
    - service: button.press
      target:
        entity_id: button.legion_t530_lock
    
    - service: button.press
      target:
        entity_id: button.legion_t530_monitorsleep

# Turn off the PC.
turn_off_pc:
  alias: Turn Off PC
  
  sequence:
    - service: button.press
      target:
        entity_id: button.legion_t530_shutdown

#=======================#
#     Fire TV Stick     #
#=======================#

# Restart Fire TV stick.
restart_fire_tv:
  alias: Restart Fire TV
  sequence:
    
    - service: switch.turn_off
      entity_id: switch.fire_tv_plug
    
    - delay: '00:00:05'
    
    - service: switch.turn_on
      entity_id: switch.fire_tv_plug

#===================#
#     Shield TV     #
#===================#

# Restart Shield TV.
restart_shield_tv:
  alias: Restart Shield TV
  sequence:
    
    - service: switch.turn_off
      entity_id: switch.shield_tv_plug
    
    - delay: '00:00:05'
    
    - service: switch.turn_on
      entity_id: switch.shield_tv_plug

#========================#
#     Family Room AV     #
#========================#

# Turn on family room AV.
enable_family_room_av:
  alias: Enable Family Room AV
  sequence:
    
    - service: switch.turn_on
      entity_id: switch.fire_tv_plug
    
    - service: switch.turn_on
      entity_id: switch.family_room_av

# Turn off family room AV.
disable_family_room_av:
  alias: Disable Family Room AV
  sequence:
    
    - service: switch.turn_off
      entity_id: switch.fire_tv_plug
    
    - service: switch.turn_off
      entity_id: switch.family_room_av

#================#
#     Vacuum     #
#================#

# Toggle the vacuum automation; sometimes we need it to be off, like when family are sleeping upstairs.
toggle_vacuum_automation:
  alias: Toggle Vacuum Automation
  
  fields:
    operation:
      description: Whether to turn the automation on or off.
      selector:
        select:
          options:
            - 'on'
            - 'off'
  
  sequence:
    - variables:
        automation_state: "{{ states('automation.start_vacuum') }}"
    
    # Don't do anything if the automation is already in the desired state.
    - if:
        - "{{ operation != automation_state }}"
      
      then:
        
        - if:
            - "{{ operation == 'on' }}"
          
          then:
            - action: automation.turn_on
              entity_id: automation.start_vacuum
          
          else:
            - action: automation.turn_off
              entity_id: automation.start_vacuum

#=========================#
#     Laundry History     #
#=========================#

# Update the washer/dryer start/stop time history entities. This is called by the appropriate automations when the washer or dryer are stopped.
update_laundry_history_time_ranges:
  alias: Update Laundry History Time Ranges
  
  fields:
    is_washer:
      description: True for washer, false for dryer.
      selector:
        boolean:
    
    start_time:
      description: Start time of the laundry cycle, as a timestamp.
      selector:
        number:
          min: 0
          max: 4294967295
    
    stop_time:
      description: Stop time of the laundry cycle, as a timestamp.
      selector:
        number:
          min: 0
          max: 4294967295
  
  sequence:
    - variables:
        start_entity_prefix: "{{ iif(is_washer, 'input_datetime.history_washer_start_', 'input_datetime.history_dryer_start_') }}"
        stop_entity_prefix: "{{ iif(is_washer, 'input_datetime.history_washer_stop_', 'input_datetime.history_dryer_stop_') }}"
        iterations: 4
    
    # Treat the existing start/stop times as a stack, and push items 1-4 into 2-5. This eliminates the oldest and
    # lets us put the most recent times into item 1.
    - repeat:
        count: "{{ iterations }}"
        sequence:
          - variables:
              x: "{{ repeat.index - 1 }}"
              from_start_entity: "{{ start_entity_prefix ~ (iterations - x) }}"
              to_start_entity: "{{ start_entity_prefix ~ (iterations - x + 1) }}"
              from_stop_entity: "{{ stop_entity_prefix ~ (iterations - x) }}"
              to_stop_entity: "{{ stop_entity_prefix ~ (iterations - x + 1) }}"
          
          - action: input_datetime.set_datetime
            target:
              entity_id: "{{ to_start_entity }}"
            data:
              timestamp: "{{ state_attr(from_start_entity, 'timestamp') }}"
          
          - action: input_datetime.set_datetime
            target:
              entity_id: "{{ to_stop_entity }}"
            data:
              timestamp: "{{ state_attr(from_stop_entity, 'timestamp') }}"
    
    # Set the new start/stop times. Note that we add 60 seconds to the stop time, in order to be able to see any final 
    # transitions of the debug entities.
    - service: input_datetime.set_datetime
      target:
        entity_id: "{{ start_entity_prefix ~ '1' }}"
      data_template:
        timestamp: "{{ start_time }}"
    
    - service: input_datetime.set_datetime
      target:
        entity_id: "{{ stop_entity_prefix ~ '1' }}"
      data_template:
        timestamp: "{{ stop_time + 60 }}"

#======================#
#     Echo Devices     #
#======================#

# Mute bedroom echo devices until 9 AM the next morning (unmuted in Unmute Guest Bedroom Echos automation).
mute_studio_echo:
  alias: Mute Studio Echo
  
  sequence:
    - service: switch.turn_on
      entity_id: switch.studio_echo_do_not_disturb_switch

mute_master_bedroom_echo:
  alias: Mute Master Bedroom Echo
  
  sequence:
    - service: switch.turn_on
      entity_id: switch.master_bedroom_echo_do_not_disturb_switch

mute_penthouse_echo:
  alias: Mute Penthouse Echo
  
  sequence:
    - service: switch.turn_on
      entity_id: switch.penthouse_echo_do_not_disturb_switch

#======================#
#     Garage Doors     #
#======================#

# Open garage door
open_garage_door_north:
  alias: Open Garage Door North
  
  use_blueprint:
    path: devices/garage_door_operation.yaml
    input:
      name:      'north'
      operation: 'Open'
      contact:   binary_sensor.shelly1_garage_north_contact
      switch:    switch.shelly1_garage_north

open_garage_door_south:
  alias: Open Garage Door South
  
  use_blueprint:
    path: devices/garage_door_operation.yaml
    input:
      name:      'south'
      operation: 'Open'
      contact:   binary_sensor.shelly1_garage_south_contact
      switch:    switch.shelly1_garage_south

# Close garage door
close_garage_door_north:
  alias: Close Garage Door North
  
  use_blueprint:
    path: devices/garage_door_operation.yaml
    input:
      name:      'north'
      operation: 'Close'
      contact:   binary_sensor.shelly1_garage_north_contact
      switch:    switch.shelly1_garage_north

close_garage_door_south:
  alias: Close Garage Door South
  
  use_blueprint:
    path: devices/garage_door_operation.yaml
    input:
      name:      'south'
      operation: 'Close'
      contact:   binary_sensor.shelly1_garage_south_contact
      switch:    switch.shelly1_garage_south

#============================#
#     Deep Sleep Control     #
#============================#

# Suspend deep sleep on ESPHome devices so we can update the firmware using OTA
suspend_deep_sleep:
  alias: Suspend Deep Sleep
  
  fields:
    topic:
      description: 'The battery sensor MQTT topic.'
  
  sequence:
  
  - service: mqtt.publish
    data:
      topic:   "{{ topic }}"
      payload: 'ON'
      retain: true

# Resume deep sleep on ESPHome devices
resume_deep_sleep:
  alias: Resume Deep Sleep
  
  fields:
    topic:
      description: 'The battery sensor MQTT topic.'
  
  sequence:
  
  - service: mqtt.publish
    data:
      topic:   "{{ topic }}"
      payload: 'OFF'
  
  - service: mqtt.publish
    data:
      topic:   "{{ topic }}"
      payload: ''
      retain: true

#====================#
#     HVAC Vents     #
#====================#

open_hvac_vents:
  alias: Open HVAC Vents
  
  use_blueprint:
    path: devices/hvac_vent_operation.yaml
    input:
      vent_entity:
        - cover.master_br_vent_1
        - cover.master_br_vent_2
      position: 100

close_hvac_vents:
  alias: Close HVAC Vents
  
  use_blueprint:
    path: devices/hvac_vent_operation.yaml
    input:
      vent_entity:
        - cover.master_br_vent_1
        - cover.master_br_vent_2
      position: 0

#======================#
#     Ceiling Fans     #
#======================#

# Set a ceiling fan to a given speed.
set_fan_to_speed:
  alias: Set Fan To Speed
  
  fields:
    entity_id:
      description: 'The target ceiling fan.'
    
    speed:
      description: 'The desired fan speed (0 = off, 33 = low, 66 = medium, 99 = high).'
  
  variables:
    fan_speed_entity: "{{ 'input_number.' ~ (state_attr(entity_id, 'friendly_name') | replace(' ', '_') | lower) ~ '_speed' }}"
  
  sequence:
    
    # Don't set the speed if the fan is already at the desired speed.
    - if:
        - "{{ states(fan_speed_entity) != speed }}"
      
      then:    
        # Set the fan to the specified speed. 
        - service: fan.turn_on
          target:
            entity_id: "{{ entity_id }}"
          data:
            percentage: "{{ speed }}"
    
    # To calculate estimated power consumption, we need to keep track of the specified speed. We do this
    # using a unique input number for each fan. Lovely.
    - service: input_number.set_value
      target:
        entity_id: "{{ fan_speed_entity }}"
      data:
        value: "{{ speed }}"

# Control a fan based on temperature.
control_fan_for_temperature:
  alias: Control Fan For Temperature
  mode: queued
  
  fields:
    fan_entity_id:
      description: 'The target fan.'
      selector:
        entity:
          domain: fan
    
    temperature_entity_id:
      description: 'The temperature sensor.'
      selector:
        entity:
          domain: sensor
    
    thresholds:
      name: Threshold List
      description: List of thresholds for high, medium and low fan speeds.
      selector:
        number:
          min: 0
          max: 100
    
    timeout:
      description: 'Time to leave the fan on, in seconds. Zero means no timeout.'
  
  sequence:
    - variables:
        high_threshold: "{{ thresholds[0] }}"
        med_threshold:  "{{ thresholds[1] }}"
        low_threshold:  "{{ thresholds[2] }}"
    
    # Set the fan to a speed based on the temperature.
    - choose:
      - conditions: "{{ states(temperature_entity_id) | float(0) >= high_threshold }}"
      
        sequence:
          - service: script.set_fan_to_speed
            data:
              entity_id: "{{ fan_entity_id }}"
              speed: 99
      
      - conditions: "{{ states(temperature_entity_id) | float(0) >= med_threshold }}"
      
        sequence:
          - service: script.set_fan_to_speed
            data:
              entity_id: "{{ fan_entity_id }}"
              speed: 66
      
      - conditions: "{{ states(temperature_entity_id) | float(0) >= low_threshold }}"
      
        sequence:
          - service: script.set_fan_to_speed
            data:
              entity_id: "{{ fan_entity_id }}"
              speed: 33
      
      default:
        - service: script.set_fan_to_speed
          data:
            entity_id: "{{ fan_entity_id }}"
            speed: 0
    
    # Continue if a valid timeout is specified.
    - condition: "{{ timeout > 0 if is_number(timeout) }}"
    
    # Delay for the timeout period.
    - delay: "{{ timeout }}" 
    
    # Then turn the fan off.
    - service: script.set_fan_to_speed
      data:
        entity_id: "{{ fan_entity_id }}"
        speed: 0
