#===============#
#     House     #
#===============#

# Turn off extended away mode if Jon returns home early.
turn_off_extended_away_mode:
  alias: Turn Off Extended Away Mode  
  sequence:

    # Continue only if extended away mode is currently on.  
    - condition: state
      entity_id: input_boolean.extended_away_mode
      state: 'on'
    
    # Set the extended away end 2 minutes from now (the extra time is just to make sure the timing satifies my paranoia).
    # This in turn will trigger the Disable Extended Away Mode automation.
    - service: input_datetime.set_datetime
      target:
        entity_id: input_datetime.extended_away_end
      data:
        datetime: "{{ (now() + timedelta(minutes = 2)).strftime('%Y-%m-%d %H:%M:%S') }}"

# This is a failsafe to make sure the Jon Away flag gets reset when I return home. This should happen
# when the Open Garage Door runs, but you never know.
reset_jon_away:
  alias: Reset Jon Away
  
  sequence:
    - delay: "00:10:00"
    
    - service: input_boolean.turn_off
      entity_id: input_boolean.jon_away

#==========================#
#     Computer Control     #
#==========================#

# Lock the PC
lock_pc:
  alias: Lock PC
  sequence:
  - service: mqtt.publish
    data:
      topic: "iotlink/workgroup/legion-t530/commands/lock"
      payload: ""

# Turn off the PC
turn_off_pc:
  alias: Turn Off PC
  sequence:
  
  - service: mqtt.publish
    data:
      topic: "iotlink/workgroup/legion-t530/commands/shutdown"
      payload: ""

#=======================#
#     Fire TV Stick     #
#=======================#

# Restart Fire TV stick.
restart_fire_tv:
  alias: Restart Fire TV
  sequence:
    
    - service: switch.turn_off
      entity_id: switch.fire_tv
    
    - delay: '00:00:05'
    
    - service: switch.turn_on
      entity_id: switch.fire_tv

#===================#
#     Shield TV     #
#===================#

# Restart Shield TV.
restart_shield_tv:
  alias: Restart Shield TV
  sequence:
    
    - service: switch.turn_off
      entity_id: switch.shield_tv
    
    - delay: '00:00:05'
    
    - service: switch.turn_on
      entity_id: switch.shield_tv

#========================#
#     Family Room AV     #
#========================#

# Turn on family room AV.
enable_family_room_av:
  alias: Enable Family Room AV
  sequence:
    
    - service: switch.turn_on
      entity_id: switch.fire_tv
    
    - service: switch.turn_on
      entity_id: switch.sonoff_family_room_av

# Turn off family room AV.
disable_family_room_av:
  alias: Disable Family Room AV
  sequence:
    
    - service: switch.turn_off
      entity_id: switch.fire_tv
    
    - service: switch.turn_off
      entity_id: switch.sonoff_family_room_av

#======================#
#     Echo Devices     #
#======================#

# Mute bedroom echo devices until 9 AM the next morning.

mute_guest_bedroom_echo:
  alias: Mute Guest Bedroom Echo
  use_blueprint:
    path: devices/echo_do_not_disturb.yaml
    input:
      switch_entity: switch.guest_bedroom_echo_do_not_disturb_switch
      mute_duration: >
        {% set next = now().today().replace(hour=9, minute=0, second=0, microsecond=0) + timedelta(days = 1) %}
        {{ (next - now().today().replace(microsecond=0)).seconds }}

mute_master_bedroom_echo:
  alias: Mute Master Bedroom Echo
  use_blueprint:
    path: devices/echo_do_not_disturb.yaml
    input:
      switch_entity: switch.master_bedroom_echo_do_not_disturb_switch
      mute_duration: >
        {% set next = now().today().replace(hour=9, minute=0, second=0, microsecond=0) + timedelta(days = 1) %}
        {{ (next - now().today().replace(microsecond=0)).seconds }}

mute_upstairs_bedroom_echo:
  alias: Mute Upstairs Bedroom Echo
  use_blueprint:
    path: devices/echo_do_not_disturb.yaml
    input:
      switch_entity: switch.upstairs_bedroom_echo_do_not_disturb_switch
      mute_duration: >
        {% set next = now().today().replace(hour=9, minute=0, second=0, microsecond=0) + timedelta(days = 1) %}
        {{ (next - now().today().replace(microsecond=0)).seconds }}

#----------------------#
#     Garage Doors     #
#----------------------#

# Open garage door
open_garage_door_north:
  alias: Open Garage Door North
  
  use_blueprint:
    path: devices/garage_door_operation.yaml
    input:
      name:      'north'
      operation: 'Open'
      contact:   binary_sensor.shelly1_garage_north_contact
      switch:    switch.shelly1_garage_north

open_garage_door_south:
  alias: Open Garage Door South
  
  use_blueprint:
    path: devices/garage_door_operation.yaml
    input:
      name:      'south'
      operation: 'Open'
      contact:   binary_sensor.shelly1_garage_south_contact
      switch:    switch.shelly1_garage_south

# Close garage door
close_garage_door_north:
  alias: Close Garage Door North
  
  use_blueprint:
    path: devices/garage_door_operation.yaml
    input:
      name:      'north'
      operation: 'Close'
      contact:   binary_sensor.shelly1_garage_north_contact
      switch:    switch.shelly1_garage_north

close_garage_door_south:
  alias: Close Garage Door South
  
  use_blueprint:
    path: devices/garage_door_operation.yaml
    input:
      name:      'south'
      operation: 'Close'
      contact:   binary_sensor.shelly1_garage_south_contact
      switch:    switch.shelly1_garage_south

#============================#
#     Deep Sleep Control     #
#============================#

# Suspend deep sleep on ESPHome devices so we can update the firmware using OTA
suspend_deep_sleep:
  alias: Suspend Deep Sleep
  
  fields:
    topic:
      description: 'The battery sensor MQTT topic.'
  
  sequence:
  
  - service: mqtt.publish
    data:
      topic:   "{{ topic }}"
      payload: 'ON'
      retain: true

# Resume deep sleep on ESPHome devices
resume_deep_sleep:
  alias: Resume Deep Sleep
  
  fields:
    topic:
      description: 'The battery sensor MQTT topic.'
  
  sequence:
  
  - service: mqtt.publish
    data:
      topic:   "{{ topic }}"
      payload: 'OFF'
  
  - service: mqtt.publish
    data:
      topic:   "{{ topic }}"
      payload: ''
      retain: true

#====================#
#     HVAC Vents     #
#====================#

open_upstairs_br_vents:
  alias: Open Upstairs BR Vents
  
  use_blueprint:
    path: devices/hvac_vent_operation.yaml
    input:
      vent_entity:
        - cover.upstairs_br_vent_1
        - cover.upstairs_br_vent_2
      position: 100

close_upstairs_br_vents:
  alias: Close Upstairs BR Vents
  
  use_blueprint:
    path: devices/hvac_vent_operation.yaml
    input:
      vent_entity:
        - cover.upstairs_br_vent_1
        - cover.upstairs_br_vent_2
      position: 0

#======================#
#     Ceiling Fans     #
#======================#

# Set a ceiling fan to a given speed.
set_fan_to_speed:
  alias: Set Fan To Speed
  
  fields:
    entity_id:
      description: 'The target ceiling fan.'
    
    speed:
      description: 'The desired fan speed (0 = off, 33 = low, 66 = medium, 99 = high).'
  
  variables:
    fan_speed_entity: "{{ 'input_number.' ~ (state_attr(entity_id, 'friendly_name') | replace(' ', '_') | lower) ~ '_speed' }}"
  
  sequence:
    
    # Don't set the speed if the fan is already at the desired speed.
    - if:
        - "{{ states(fan_speed_entity) != speed }}"
      
      then:    
        # Set the fan to the specified speed. 
        - service: fan.turn_on
          target:
            entity_id: "{{ entity_id }}"
          data:
            percentage: "{{ speed }}"
    
    # To calculate estimated power consumption, we need to keep track of the specified speed. We do this
    # using a unique input number for each fan. Lovely.
    - service: input_number.set_value
      target:
        entity_id: "{{ fan_speed_entity }}"
      data:
        value: "{{ speed }}"

# Control a fan based on temperature.
control_fan_for_temperature:
  alias: Control Fan For Temperature
  
  fields:
    fan_entity_id:
      description: 'The target fan.'
      selector:
        entity:
          domain: fan
    
    temperature_entity_id:
      description: 'The temperature sensor.'
      selector:
        entity:
          domain: sensor
    
    thresholds:
      name: Threshold List
      description: List of thresholds for high, medium and low fan speeds.
      selector:
        number:
          min: 0
          max: 100
    
    timeout:
      description: 'Time to leave the fan on, in seconds. Zero means no timeout.'
  
  sequence:
    - variables:
        high_threshold: "{{ thresholds[0] }}"
        med_threshold:  "{{ thresholds[1] }}"
        low_threshold:  "{{ thresholds[2] }}"
    
    # Set the fan to a speed based on the temperature.
    - choose:
      - conditions: "{{ states(temperature_entity_id) | float(0) >= high_threshold }}"
      
        sequence:
          - service: script.set_fan_to_speed
            data:
              entity_id: "{{ fan_entity_id }}"
              speed: 99
      
      - conditions: "{{ states(temperature_entity_id) | float(0) >= med_threshold }}"
      
        sequence:
          - service: script.set_fan_to_speed
            data:
              entity_id: "{{ fan_entity_id }}"
              speed: 66
      
      - conditions: "{{ states(temperature_entity_id) | float(0) >= low_threshold }}"
      
        sequence:
          - service: script.set_fan_to_speed
            data:
              entity_id: "{{ fan_entity_id }}"
              speed: 33
      
      default:
        - service: script.set_fan_to_speed
          data:
            entity_id: "{{ fan_entity_id }}"
            speed: 0
    
    # Continue if a valid timeout is specified.
    - condition: "{{ timeout > 0 if is_number(timeout) }}"
    
    # Delay for the timeout period.
    - delay: "{{ timeout }}" 
    
    # Then turn the fan off.
    - service: script.set_fan_to_speed
      data:
        entity_id: "{{ fan_entity_id }}"
        speed: 0
