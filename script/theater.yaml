#===========================#
#     Cinema Activation     #
#===========================#

# There are several ways to use the cinema:
#
# 1) Open for general usage
# 2) Play a feature movie
# 3) Play a random set of music videos
# 4) Start a specific Harmony activity
# 5) Watch a specific Shield TV app
#
# It is possible to use these in various combinations; a few examples:
#
# - open, watch an app, watch another app, ...
# - open, play a feature movie
# - open, start an activity, watch an app, watch videos
#
# So we need a generic script that is a front end to all of these. It needs to do the following:
#
# - Enforce cinema usage control, to prevent rapid open/close activity.
# - Turn on the desired Harmony activity, which ensures the correct devices are turned on.
# - Wait for the projector to warm up if needed.
# - Activate the Kodi app if needed.
# - Perform post-open tasks if needed.

activate_cinema:
  alias: Activate Cinema
  
  fields:
    activity:
      description: The desired Harmony activity name.
    
    need_kodi:
      description: True if we need to start the Kodi app.
  
  variables:
    cinema_off_upon_entry: "{{ states('sensor.harmony_hub') == 'PowerOff' }}"
  
  sequence:
    
    # Ensure the cinema has not been closed recently, if it was off upon entry.
    - if:
        - "{{ cinema_off_upon_entry }}"
    
      then:
        - service: script.check_cinema_usage_control
          data:
            opening: true
        
        - if:
            - condition: state
              entity_id: input_boolean.cinema_usage_allowed
              state: 'off'
          
          then:
            - stop: "Cinema usage is denied."
  
    # Start the input Harmony activity, which ensures the correct devices are on.
    # However, if Enable Streaming is requested but the cinema is currently on, then use the Stream Player
    # activity instead. The only difference between those activities is the receiver input (CD for 
    # Enable Streaming and CBL/SAT for Stream Player). This allows us to keep the screen dark when the
    # cinema is first opened, but not switch inputs if it's already open. I probably haven't explained
    # this very well. Sorry.
    - if:
        - "{{ activity == 'Enable Streaming' and not cinema_off_upon_entry }}"
    
      then:
    
        - service: remote.turn_on
          entity_id: remote.harmony_hub
          data:
            activity: Stream Player
      
      else:
        - service: remote.turn_on
          entity_id: remote.harmony_hub
          data:
            activity: "{{ activity }}"
  
    # Do a few things if the cinema was off upon entry.
    - if:
        - "{{ cinema_off_upon_entry }}"
    
      then:
        
        # Indicate the cinema is open.
        - service: input_boolean.turn_on
          entity_id: input_boolean.theater_open
    
        # Turn on some lights.
        - service: script.set_theater_idle
    
        # Announce the grand opening.
        - service: notify.alexa_media
          data:
            message: >
              <speak>
                <amazon:emotion name="excited" intensity="low">
                {{ ["I'm waiting a bit for the projector to warm up.", 
                    "You have a minute or so before the theater is ready.", 
                    "I'll let you know when things are ready.",
                    "Hopefully the projector won't explode. Stay tuned.",
                    "Lights are on, just waiting on the projection equipment.",
                    "Loading the film canister now.",
                    "Theater is waking up.",
                    "Popcorn is popping. Cokes are bubbling. Grab a seat and relax.",
                    "I'm flipping on all the switches. Hope that works.",
                    "What's this big red button do? Let's find out!"
                   ] | random }}
                </amazon:emotion>
              </speak>
            target:
              - media_player.family_room_echo
              - media_player.theater_echo
            data:
              type: tts
      
        # Delay for a bit to let the projector turn on. I'm assuming if it's on it's warmed up.
        - wait_template: "{{ states('media_player.epson_projector') in ['warmup', 'on'] }}"
          timeout: '00:03:00'
    
        # Perform post-open tasks.
        - service: script.turn_on
          entity_id: script.perform_post_open_tasks
  
    # Activate Kodi if requested.
    - if:
        - "{{ need_kodi }}"
    
      then:        
        - service: script.activate_kodi

#==========================================#
#     1) Open Cinema For General Usage     #
#==========================================#

open_cinema:
  alias: Open Cinema
  
  sequence:
    
    # Activate the cinema.
    - service: script.activate_cinema
      data:
        activity: Open Cinema
        need_kodi: false
    
    - if:
        - condition: state
          entity_id: input_boolean.cinema_usage_allowed
          state: 'off'
      
      then:
        - stop: "Cinema usage is denied."

#===============================#
#     2) Play Feature Movie     #
#===============================#

play_feature_movie:
  alias: Play Feature Movie
  
  sequence:
    
    # Activate the cinema.
    - service: script.activate_cinema
      data:
        activity: Enable Streaming
        need_kodi: true
    
    - if:
        - condition: state
          entity_id: input_boolean.cinema_usage_allowed
          state: 'off'
      
      then:
        - stop: "Cinema usage is denied."
  
    # Send the GetMovies command to Kodi, with the target movie name. The Handle Kodi Movies Result script calls 
    # Process Single Kodi Movie Result below with the command result.
    - service: kodi.call_method
      data:
        entity_id: media_player.kodi
        method: VideoLibrary.GetMovies
        filter:
          field: title
          operator: is
          value: "{{ states('input_select.kodi_movies') }}"
        limits:
          end: 1
          start: 0

# Process the single movie returned by Kodi.
process_single_kodi_movie_result:
  alias: Process Single Kodi Movie Result
  
  fields:
    result:
      description: The result from the GetMovies Kodi call.
  
  sequence:
    
    # Pick up the movie ID.
    - variables:
        movieid: "{{ result.movies.0.movieid }}"
    
    # Build a set of random music videos as a preamble to the movie. These are added to a playlist.
    - service: script.get_all_kodi_videos
          
    # Add the movie to the playlist.
    - service: kodi.call_method
      target:
        entity_id: media_player.kodi
      data:
        method: Playlist.Add
        playlistid: 1
        item:
          movieid: "{{ movieid }}"
  
    # Now switch the receiver to the proper input so Kodi can be viewed on screen.
    - service: remote.send_command
      entity_id: remote.harmony_hub
      data:
        command: 'InputCbl/Sat'
        device: Marantz Receiver
  
    # Play the playlist.
    - service: script.play_kodi_playlist
  
    # Darken the theater.
    - service: script.turn_on
      entity_id: script.set_theater_dark_delay

#=====================================#
#     3) Play Random Music Videos     #
#=====================================#

# Play random videos using Kodi. This is intended to be run standalone. Playing videos as a preamble to a movie
# uses some of the same technology, but is part of the Play Feature Movie script.
play_random_kodi_videos:
  alias: Play Random Kodi Videos
  
  sequence:
    
    # Activate the cinema.
    - service: script.activate_cinema
      data:
        activity: Enable Streaming
        need_kodi: true
    
    - if:
        - condition: state
          entity_id: input_boolean.cinema_usage_allowed
          state: 'off'
      
      then:
        - stop: "Cinema usage is denied."

    # Build a set of random music videos. These are added to a playlist.
    - service: script.get_all_kodi_videos
  
    # Now switch the receiver to the proper input so Kodi can be viewed on screen.
    - service: remote.send_command
      entity_id: remote.harmony_hub
      data:
        command: 'InputCbl/Sat'
        device: Marantz Receiver
        
    # Play the playlist.
    - service: script.play_kodi_playlist
  
    # Darken the theater.
    - service: script.turn_on
      entity_id: script.set_theater_dark_delay

#====================================#
#     4) Start Harmony Activity      #
#====================================#

# Shield TV (streaming)
start_streaming:
  alias: Start Streaming
  
  use_blueprint:
    path: theater/start_harmony_activity.yaml
    input:
      activity: Stream Player
      lighting: script.set_theater_dark_delay

# Blu-ray
start_bluray:
  alias: Start Bluray
  
  use_blueprint:
    path: theater/start_harmony_activity.yaml
    input:
      activity: BD Player
      lighting: script.set_theater_dark_delay

# Laserdisc
start_laserdisc:
  alias: Start Laserdisc
  
  use_blueprint:
    path: theater/start_harmony_activity.yaml
    input:
      activity: LD Player
      lighting: script.set_theater_dark_delay

# Turntable
start_turntable:
  alias: Start Turntable
  
  use_blueprint:
    path: theater/start_harmony_activity.yaml
    input:
      activity: LP Player
      lighting: script.set_theater_dim

#=================================#
#     5) Watch Shield TV App      #
#=================================#

# Amazon Prime
watch_amazon_prime:
  alias: Watch Amazon Prime
  
  use_blueprint:
    path: theater/watch_shield_tv_app.yaml
    input:
      appl_name: Amazon Prime

# Disney Plus
watch_disney_plus:
  alias: Watch Disney Plus
  
  use_blueprint:
    path: theater/watch_shield_tv_app.yaml
    input:
      appl_name: Disney+

# Hulu
watch_hulu:
  alias: Watch Hulu
  
  use_blueprint:
    path: theater/watch_shield_tv_app.yaml
    input:
      appl_name: Hulu

# Kodi
watch_kodi:
  alias: Watch Kodi
  
  use_blueprint:
    path: theater/watch_shield_tv_app.yaml
    input:
      appl_name: Kodi

# Max
watch_max:
  alias: Watch Max
  
  use_blueprint:
    path: theater/watch_shield_tv_app.yaml
    input:
      appl_name: HBO Max

# Netflix
watch_netflix:
  alias: Watch Netflix
  
  use_blueprint:
    path: theater/watch_shield_tv_app.yaml
    input:
      appl_name: Netflix

# Paramount Plus
watch_paramount_plus:
  alias: Watch Paramount Plus
  
  use_blueprint:
    path: theater/watch_shield_tv_app.yaml
    input:
      appl_name: Paramount+

# Peacock
watch_peacock:
  alias: Watch Peacock
  
  use_blueprint:
    path: theater/watch_shield_tv_app.yaml
    input:
      appl_name: Peacock

# Youtube TV
watch_youtube_tv:
  alias: Watch Youtube TV
  
  use_blueprint:
    path: theater/watch_shield_tv_app.yaml
    input:
      appl_name: Youtube TV

#=======================#
#     Cinema Close      #
#=======================#

# Close the cinema by turning off the current harmony activity, and relevant lights after a delay.
#
# NOTE: We're also called by the close_cinema automation ... some steps taken here are superfluous
#       in that context, such as turning the remote off, but should do no harm.
close_cinema:
  alias: Close Cinema
  
  sequence:
    
    # Ensure the cinema is not already closed, and has not been opened recently.
    - service: script.check_cinema_usage_control
      data:
        opening: false
    
    - if:
        - condition: state
          entity_id: input_boolean.cinema_usage_allowed
          state: 'off'
      
      then:
        - stop: "Cinema usage is denied."
        
    # Indicate the cinema is closed.    
    - service: input_boolean.turn_off
      entity_id: input_boolean.theater_open
    
    # Set the usage control timestamp.
    - service: input_datetime.set_datetime
      target:
        entity_id: input_datetime.cinema_usage_control
      data_template:
        datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
    
    # Turn on some lights. This also turns on automations/lights that were possibly turned off by the open cinema script.
    - service: script.turn_on
      entity_id: script.set_theater_idle
    
    # Turn off all devices.
    - delay: '00:00:02'
    
    - service: remote.turn_off
      entity_id: remote.harmony_hub
    
    # Set the upstairs Ecobee to away or sleep mode, depending on the time of day.
    - if:
        - condition: time
          after:  '18:30:00'
          before: '23:30:00'
        
      then:
          
        - service: script.set_thermostat_preset
          data:
            thermostat_entity: climate.upstairs
            preset: 'sleep'
      
      else:
        
        - service: script.set_thermostat_preset
          data:
            thermostat_entity: climate.upstairs
            preset: 'away'
    
    # Turn on the upstairs ecobee minimum fan time.
    # NOTE: The time amount should be coordinated with the ecobee system settings, using the app or the thermostat.
    - service: ecobee.set_fan_min_on_time
      data:
        entity_id: climate.upstairs
        fan_min_on_time: 5
    
    # Turn off all lights.
    - delay: '00:05:00'
    
    - service: script.turn_on
      entity_id: script.set_theater_dark

#====================================#
#     Cinema Open/Close Control      #
#====================================#

# We don't want to allow operation if the cinema has been closed or opened within a few minutes ago, as this might cause
# undue wear and tear on the projector.
check_cinema_usage_control:
  alias: Check Cinema Usage Control
  
  fields:
    opening:
      description: True if the cinema is being opened, false if it's being closed.
      selector:
        boolean:
  
  variables:
    message_state1: "{{ iif(opening == true, 'closed', 'opened') }}"
    message_state2: "{{ iif(opening == true, 'open', 'close') }}"
    
    # Elapsed time in seconds since the last open or close.
    delta_time: >
      {% set start = as_timestamp(strptime(states('input_datetime.cinema_usage_control'), '%Y-%m-%d %H:%M:%S')) %}
      {% set seconds = (now().timestamp() - start) %}
      {{ seconds }}
    
    # Time in seconds we must wait between open and close or vice versa.
    delay_time: 300
    
    # Time in seconds to delay the requested open or close.
    delay: "{{ (delay_time - delta_time) | round }}"
  
  sequence:
    
    # Ensure the cinema has not been used recently. I don't want to jerk the projector around.    
    - if:
        - "{{ delta_time | float(0) < delay_time }}"
      
      then:
        
        # Turn off the allowed toggle.
        - service: input_boolean.turn_off
          target:
            entity_id: input_boolean.cinema_usage_allowed
        
        # Bypass the message and timer start if the timer is already running. Someone is being a jerk.
        - if:
            - "{{ is_state('timer.cinema_usage_delay', 'idle') }}"
          
          then:        
            - service: notify.alexa_media
              data:
                message: >
                  {% set delay_minutes = (delay / 60) | round %}
                  {% set delay_display = iif(delay_minutes >= 1, delay_minutes, 1) %}
                  {{ 'Cinema has been ' ~ message_state1 ~ ' recently. Delaying cinema ' ~ message_state2 ~ ' for ' ~ delay_display ~ ' ' ~ iif(delay_display == 1, 'minute', 'minutes') ~ '.' }}
                target:
                  - media_player.family_room_echo
                  - media_player.theater_echo
                data:
                  type: tts
        
            - service: timer.start
              data:
                entity_id: timer.cinema_usage_delay
                duration: "{{ delay }}"
      
      else:
        
        # Turn on the allowed toggle.
        - service: input_boolean.turn_on
          target:
            entity_id: input_boolean.cinema_usage_allowed
    
        # Set the usage control timestamp.
        - service: input_datetime.set_datetime
          target:
            entity_id: input_datetime.cinema_usage_control
          data_template:
            datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"

#==========================#
#     Post-Open Tasks      #
#==========================#

# The cinema can be opened for general usage (Open Cinema), a feature film (Play Feature) or to play a set
# of random music videos (Play Random Kodi Videos). In all of these cases there are some common tasks, which
# we perform here.

perform_post_open_tasks:
  alias: Perform Post-Open Tasks
  
  sequence:
    
    # Say something appropriate.
    - service: notify.alexa_media
      data:
        message: >
          <speak>
            <amazon:emotion name="excited" intensity="medium">
            {{ ["Cinema is now open to the public!", 
                "Hope you enjoy the show!", 
                "White Rabbit Theater is ready!",
                "Don't forget to silence your phones!",
                "Please don't lose your children in the dark!",
                "Watch for weeping angels!",
                "Come relax in our state of the art theater!",
                "Prepare to laugh and weep in equal measure!",
                "Time to vegetate on the couch!"
               ] | random }}
            </amazon:emotion>
          </speak>
        target:
          - media_player.family_room_echo
          - media_player.theater_echo
        data:
          type: tts
    
    # Set the upstairs Ecobee to home mode.
    - service: script.set_thermostat_preset
      data:
        thermostat_entity: climate.upstairs
        preset: 'home'
    
    # Turn off the upstairs Ecobee minimum fan time (it makes me cold sometimes).
    - service: ecobee.set_fan_min_on_time
      data:
        entity_id: climate.upstairs
        fan_min_on_time: 0
    
    # Turn off some downstairs lights after a delay, if appropriate.
    - delay: '00:05:00'
    
    - service: script.change_downstairs_lighting
      data:
        turn_on: false
        christmas: true
    
    # Turn off the family room AV system and box 3 backlight if it's late enough and no one else is home.
    - condition:
        - condition: state
          entity_id: 
            - binary_sensor.adults_home
            - binary_sensor.children_home
          state: 'off'
        
        - condition: time
          after:  '18:00:00'
          before: '23:30:00'
    
    - service: script.disable_family_room_av
    
    - service: light.turn_off
      entity_id: light.family_room_box3_lcd_backlight

#=========================#
#     Volume Control      #
#=========================#

# Set the receiver media player volume. This is called by:
#
# 1) The Initialize <app/device> Volume automations, when using the theater.
# 2) The Set Application Volume script, if the theater is in use.
set_receiver_volume:
  alias: Set Receiver Volume
  
  fields:
    target_name:
      description: The name of the application on the Shield TV (example 'Youtube TV'), or the Harmony device (example 'BD Player').
    
    volume:
      description: The receiver volume.
      selector:
        number:
          min: 0.48
          max: 0.64
  
  sequence:
    - service: system_log.write
      data:
        message: "Setting volume for {{ target_name }} to {{ volume }}"
        level: debug
  
    - service: media_player.volume_set
      data:
        entity_id: media_player.marantz_sr7012
        volume_level: "{{ volume | float(0.60) }}"

# Set the volume for an app/device into an app-specific number, and also set the live volume if the theater is open
# and the target app/device is currently in use.
set_application_volume:
  alias: Set Application Volume
  
  fields:
    volume_entity:
      description: The entity in which to set the volume for the target application.
      selector:
        entity:
          domain: input_number
    
    volume:
      description: The new volume for the target application.
      selector:
        number:
          min: 0.48
          max: 0.64
  
  sequence:
    
    # NOTE: The Shield TV app names for "plus" apps are named with a '+' for the Android Debug Bridge integration.
    # For example Disney Plus is named Disney+. But we can't use '+' in entity IDs, so the application volume number
    # entity is named input_number.disney_plus_volume. In order to check against the Shield TV app name, convert 'Plus' to '+'.
    - variables:
        target_name: "{{ state_attr(volume_entity, 'friendly_name') | replace('Volume', '') | replace(' Plus', '+') | trim }}"
        activity: "{{ states('sensor.harmony_hub') }}"
    
    # Set the app-specific number, so the app will get set to this volume the next time it is opened/used.
    - service: input_number.set_value
      target:
        entity_id: "{{ volume_entity }}"
      data:
        value: "{{ volume }}"
    
    # Also set the live volume if the target app/device is currently in use.
    - if:
        - "{{ states('input_boolean.theater_open') == 'on' and 
              ('Stream' in activity and state_attr('media_player.shield_android_tv', 'app_name') == target_name) or
              (activity == 'BD Player' or activity == 'LD Player') }}"
      
      then:
        - service: script.set_receiver_volume
          data:
            target_name: "{{ target_name }}"
            volume: "{{ volume }}"

# Raise or lower the theater volume by one step.
#
# NOTE: This is intended to be called by voice control; I don't know how to provide input variables via voice, so these are
# simple front ends to Change Theater Volume.
raise_theater_volume:
  alias: Raise Theater Volume
  
  sequence:
    - service: script.change_theater_volume
      data:
        raise: true

lower_theater_volume:
  alias: Lower Theater Volume
  
  sequence:
    - service: script.change_theater_volume
      data:
        raise: false

# Raise or lower the theater volume.
change_theater_volume:
  alias: Change Theater Volume
  
  fields:
    raise:
      description: Whether to raise (true) or lower (false) the volume.
      selector:
        boolean:
  
  sequence:
    - variables:
        activity: "{{ states('sensor.harmony_hub') }}"
        app_name: "{{ iif('Stream' in activity, state_attr('media_player.shield_android_tv', 'app_name') | replace('+', ' Plus') | replace(' ', '_') | lower, 'none') }}"
        volume_entity: >
          {% if 'Stream' in activity %}
            {{ 'input_number.' ~ app_name ~ '_volume' }}
          {% elif activity == 'BD Player' %}
            input_number.bd_player_volume
          {% elif activity == 'LD Player' %}
            input_number.ld_player_volume
          {% endif %}
        current_volume: "{{ states(volume_entity) | float(0.60) }}"
    
    - if:
        - "{{ raise == true }}"
      
      then:
        - service: script.set_application_volume
          data:
            volume_entity: "{{ volume_entity }}"
            volume: "{{ current_volume + 0.01 }}"
      
      else:
        - service: script.set_application_volume
          data:
            volume_entity: "{{ volume_entity }}"
            volume: "{{ current_volume - 0.01 }}"

#===========================#
#     Theater Lighting      #
#===========================#

# Make the theater dark.
set_theater_dark:
  alias: Set Theater Dark
  sequence:
    - scene: scene.theater_aux_dark
    - scene: scene.lutron_dark

# Make the theater dark, with a delay.
set_theater_dark_delay:
  alias: Set Theater Dark Delay
  sequence:
    - scene: scene.theater_aux_dark
    - delay: '00:00:12'
    - scene: scene.lutron_dark

# Make the theater dim.
set_theater_dim:
  alias: Set Theater Dim
  sequence:
    - scene: scene.theater_aux_dark
    - scene: scene.lutron_dim

# Make the theater bright.
set_theater_bright:
  alias: Set Theater Bright
  sequence:
    - scene: scene.theater_aux_partial
    - service: script.change_downstairs_lighting
      data:
        turn_on: true
        christmas: false
    - scene: scene.lutron_bright

# Make the theater idle, meaning it's on but we need lights to see.
set_theater_idle:
  alias: Set Theater Idle
  sequence:
    - scene: scene.theater_aux_partial
    - scene: scene.lutron_idle
    - service: script.change_downstairs_lighting
      data:
        turn_on: true
        christmas: false

#============================#
#     Downstairs Lights      #
#============================#

# Turn on some downstairs lights if it's dark enough, or conditionally turn them off. This is used as follows,
# either directly or via the Set Theater Idle script:
#
# - The Open Cinema script (turn on, delay, turn off)
# - The Close Cinema script (turn on)
# - The Alexa Break Time routine, which calls Set Theater Idle (turn on)
# - The Restore Lighting On Resume script (turn off)
change_downstairs_lighting:
  alias: Change Downstairs Lighting
  fields:
    turn_on:
      description: Whether to turn the lights on (true) or off (false).
    
    christmas:
      description: Whether to change the Christmas lights (true) or not (false).
  
  sequence:
    - if:
      
        # Turn on lights.
        - "{{ turn_on == true }}"
        
      then:
          
        # Turn on lights if needed.
        - if:
            - "{{ states('sensor.foyer_sensor_ambient_light') | int(0) <= 300 }}"
          
          then:    
            - action: light.turn_on
              data_template:
                entity_id: >
                  {% if states('input_boolean.christmas_mode') == 'off' or (christmas == false) %}
                    {{ 'light.daytime_lights' }}
                  {% else %}
                    {{ ['light.hallway_lamp', 'light.indoor_christmas_lights'] }}
                  {% endif %}
            
            - action: light.turn_on
              entity_id:
                - light.stairway_light
                - light.island_light
        
      # Turn off lights, but only if no family members present.
      else:
        - condition: state
          entity_id: binary_sensor.adults_home
          state: 'off'
        
        - action: light.turn_off
          data_template:
            entity_id: >
              {% if states('input_boolean.christmas_mode') == 'off' or (christmas == false) %}
                {{ 'light.daytime_lights' }}
              {% else %}
                {{ ['light.hallway_lamp', 'light.indoor_christmas_lights'] }}
              {% endif %}
        
        - action: light.turn_off
          entity_id: 
            - light.stairway_light
            - light.island_light

#========================#
#     Cinema Resume      #
#========================#

# Resume the current harmony activity and restore the lighting.

# Worker script
resume_worker:
  alias: Resume Worker
  fields:
    device:
      description: 'The Harmony device name to be resumed.'
      example: 'Sony DVD/Blu-ray Player'
  
  sequence:
  
    # Send the play command to the target device.
    - service: remote.send_command
      entity_id: remote.harmony_hub
      data:
        command: Play
        device: "{{ device }}"
    
    # Restore theater lighting.
    - service: script.restore_lighting_on_resume

# Call the worker script with the appropriate device based on the Harmony activity.
# Note: The turntable cannot be controlled, so all we do is turn on some lights.
resume_cinema:
  alias: Resume Cinema
  
  sequence:
    - choose:
      - conditions: "{{ is_state('sensor.harmony_hub', 'Stream Player') or is_state('sensor.harmony_hub', 'Enable Streaming') }}"
        
        sequence:
          - service: script.resume_worker
            data:
              device: 'NVIDIA Shield TV'
      
      - conditions: "{{ is_state('sensor.harmony_hub', 'BD Player') }}"
        
        sequence:
          - service: script.resume_worker
            data:
              device: 'Sony DVD/Blu-ray Player'
      
      - conditions: "{{ is_state('sensor.harmony_hub', 'LD Player') }}"
        
        sequence:
          - service: script.resume_worker
            data:
              device: 'Panasonic Laserdisc Player'
      
      - conditions: "{{ is_state('sensor.harmony_hub', 'LP Player') }}"
        
        sequence:
          - service: script.turn_on
            entity_id: script.set_theater_dim
      
      default:
        - service: system_log.write
          data:
            message: Current activity does not support resume command.
            level: warning

# Restore the theater lighting on resume (called by the restore automation and script).
restore_lighting_on_resume:
  alias: Restore Lighting On Resume
  
  sequence:
  
    # Establish 'dark' theater lighting.
    - service: script.turn_on
      entity_id: script.set_theater_dark
    
    # Turn off some downstairs lights.
    - service: script.change_downstairs_lighting
      data:
        turn_on: false
        christmas: false

#=======================#
#     Activate Kodi     #
#=======================#

# Activate Kodi on the Shield TV. We make no assumptions here about the rest of the theater; for example we don't
# require the projector to be on. All we need is the Shield TV on and the Kodi application running on it.
activate_kodi:
  alias: Activate Kodi
  
  sequence:
  
    # Turn on the Shield TV if needed so we can host the Kodi application.
    - if:
        - condition: state
          entity_id: media_player.shield_tv
          state: 'off'
      
      then:    
        - service: media_player.turn_on
          data:
            entity_id: media_player.shield_tv
        - delay: '00:00:02'
  
    # Start Kodi on the Shield TV.
    - service: remote.turn_on
      target:
        entity_id: remote.shield_android_tv
      data:
        activity: Kodi
    - delay: '00:00:01'

#============================#
#     Kodi Movie Results     #
#============================#

# When we send commands to Kodi, for example to get movies or music videos, it seems we can't wait for the result in a script
# using wait_for_trigger, because the result event is fired before such trigger is initialized (at least from what I've seen).
# So we use automations instead to react to the result event, and process those results here, for movies. 
#
# Results for a set of music videos is handled directly by the Process Kodi Video Result automation.
handle_kodi_movies_result:
  alias: Handle Kodi Movies Result
  
  fields:
    result:
      description: The result from the GetMovies Kodi call.
  
  sequence:
    
    # We expect either one movie to be returned, or all of them. Pass the result on to the appropriate script to continue.
    - choose:
      - conditions: "{{ result.limits.total == 1 }}"
        
        sequence:
          - service: script.process_single_kodi_movie_result
            data:
              result: "{{ result }}"
      
      - conditions: "{{ result.limits.total > 1 }}"
        
        sequence:
          - service: script.process_all_kodi_movies_result
            data:
              result: "{{ result }}"
      
      # Nothing was returned. This is unexpected.
      default:
        - service: system_log.write
          data:
            message: "Kodi GetMovies command did not return any movies."
            level: warning

#========================#
#     Kodi All Movies    #
#========================#

# Get the list of all movies known by Kodi.
# This script is only needed when the Kodi movie library is updated.
get_all_kodi_movies:
  alias: Get All Kodi Movies
  
  sequence:
    
    # Activate Kodi on the Shield TV.
    - service: script.activate_kodi
    
    - delay: '00:00:10'
  
    # Send the GetMovies command to Kodi. The Handle Kodi Movies Result script calls Process All Kodi Movies Result
    # below with the command result.
    - service: kodi.call_method
      data:
        entity_id: media_player.kodi
        method: VideoLibrary.GetMovies

# Process the list of movies returned by Kodi.
process_all_kodi_movies_result:
  alias: Process All Kodi Movies Result
  
  fields:
    result:
      description: The result from the GetMovies Kodi call.
  
  sequence:
    
    - variables:
        movie_list: >
          {% set movies = result.get('movies') %}
          {% set ns = namespace(list = []) %}
          {% for movie in movies %}
            {% set ns.list = ns.list + [movie.get('label')] %}
          {% endfor %}
          
          {{ ns.list | sort }}
    
    # Call the python script to populate the input select.
    - service: pyscript.save_input_select_options
      data:
        entity: input_select.kodi_movies
        list: "{{ movie_list }}"
        file: '/config/all_movies_backup'
  
    # Exit the Kodi application.
    - service: remote.send_command
      entity_id: remote.harmony_hub
      data:
        command: 'Home'
        device: NVIDIA Shield TV
    - delay: '00:00:01'
  
    # Turn the Shield TV off again.
    - service: media_player.turn_off
      data:
        entity_id: media_player.shield_tv

#=====================================#
#     Kodi Video Playlist Control     #
#=====================================#

# Get all music videos using Kodi.
get_all_kodi_videos:
  alias: Get All Kodi Videos
  
  sequence:
    
    # Send the command to Kodi to get all available videos.
    - service: kodi.call_method
      target:
        entity_id: media_player.kodi
      data:
        method: VideoLibrary.GetMusicVideos
        properties:
          - artist
          - streamdetails

# Build a playlist of selected music videos.
build_kodi_video_playlist:
  alias: Build Kodi Video Playlist
  
  sequence:
  
    # Ensure the playlist is clear.
    - service: kodi.call_method
      target:
        entity_id: media_player.kodi
      data:
        method: Playlist.Clear
        playlistid: 1
    
    - repeat:
        
        # Repeat for each selected video ID.
        for_each: "{{ states('input_text.music_video_ids').split(',') }}"
        
        sequence:
          
          # Add the video to the playlist.
          - service: kodi.call_method
            target:
              entity_id: media_player.kodi
            data:
              method: Playlist.Add
              playlistid: 1
              item:
                musicvideoid: "{{ repeat.item | int(0) }}"

# Play a Kodi playlist. This consists of either a set of music videos, or such a set along with a feature movie.
play_kodi_playlist:
  alias: Play Kodi Playlist
  
  sequence:
    - service: kodi.call_method
      target:
        entity_id: media_player.kodi
      data:
        method: Player.Open
        item:
          playlistid: 1
