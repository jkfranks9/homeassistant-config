#===========================#
#     Cinema Open/Close     #
#===========================#

# Open the cinema to turn on some lights and warm up the projector and receiver.
open_cinema:
  alias: Open Cinema
  
  sequence:
    
    # Ensure the cinema is not already open.
    - if:
        - "{{ states('input_boolean.theater_open') == 'on' }}"
      
      then:
        - service: notify.alexa_media
          data:
            message: "Cinema is already open!!"
            target:
              - media_player.family_room_echo
              - media_player.theater_echo
            data:
              type: tts
        
        - stop: "Cinema is already open."
    
    # Ensure the cinema has not been closed recently. I don't want to jerk the projector around.
    - variables:
        delta_time: >
          {% set start = as_timestamp(strptime(states('input_datetime.cinema_usage_control'), '%Y-%m-%d %H:%M:%S')) %}
          {% set seconds = (now().timestamp() - start) %}
          {{ seconds }}
    
    - if:
        - "{{ delta_time | float(0) < 600 }}"
      
      then:
        - variables:
            delay: "{{ (600 - delta_time) | round }}"
        
        # Bypass the message and timer start if the timer is already running. Someone is being a jerk.
        - if:
            - "{{ is_state('timer.cinema_usage_delay', 'idle') }}"
          
          then:        
            - service: notify.alexa_media
              data:
                message: >
                  {% set delay_minutes = (delay / 60) | round %}
                  {% set delay_display =iif(delay_minutes >= 1, delay_minutes, 1) %}
                  Cinema has been closed recently. Delaying cinema open for {{ delay_display }} {{ iif(delay_display == 1, 'minute', 'minutes') }}
                target:
                  - media_player.family_room_echo
                  - media_player.theater_echo
                data:
                  type: tts
        
            - service: timer.start
              data:
                entity_id: timer.cinema_usage_delay
                duration: "{{ delay }}"
        
        - stop: "Cinema has been closed recently."
    
    # Indicate the theater is open.
    - service: input_boolean.turn_on
      entity_id: input_boolean.theater_open
    
    # Set the usage control timestamp.
    - service: input_datetime.set_datetime
      target:
        entity_id: input_datetime.cinema_usage_control
      data_template:
        datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
    
    # Turn on the necessary devices.
    - service: remote.turn_on
      entity_id: remote.harmony_hub
      data:
        activity: Open Cinema
    
    # Turn on some lights.
    - service: script.turn_on
      entity_id: script.set_theater_idle
    
    # Say something appropriate.
    - service: notify.alexa_media
      data:
        message: "{{ ['Cinema is open for business!', 
                      'Enjoy the show!', 
                      'Theater is ready!'
                     ] | random }}"
        target:
          - media_player.family_room_echo
          - media_player.theater_echo
        data:
          type: tts
    
    # Set the upstairs Ecobee to home mode.
    - service: script.set_thermostat_preset
      data:
        thermostat_entity: climate.upstairs
        preset: 'Home'
    
    # If no family are home, delay, then turn off some downstairs lights.
    - delay: '00:05:00'
    
    - service: script.change_downstairs_lighting
      data:
        turn_on: false
        christmas: true
    
    # Turn off the family room AV system if it's late enough and no one else is home.
    - condition:
        - condition: state
          entity_id: 
            - binary_sensor.adults_home
            - binary_sensor.children_home
          state: 'off'
        
        - condition: time
          after:  '18:00:00'
          before: '23:30:00'
    
    - service: script.disable_family_room_av

# Close the cinema by turning off the current harmony activity, and relevant lights after a delay.
#
# NOTE: We're also called by the close_cinema automation ... some steps taken here are superfluous
#       in that context, such as turning the remote off, but should do no harm.
close_cinema:
  alias: Close Cinema
  
  sequence:
    
    # Ensure the cinema is not already closed.
    - if:
        - "{{ states('input_boolean.theater_open') == 'off' }}"
      
      then:
        - service: notify.alexa_media
          data:
            message: "Cinema is already closed!!"
            target:
              - media_player.family_room_echo
              - media_player.theater_echo
            data:
              type: tts
        
        - stop: "Cinema is already closed."
    
    # Ensure the cinema has not been opened recently. I don't want to jerk the projector around.
    - variables:
        delta_time: >
          {% set start = as_timestamp(strptime(states('input_datetime.cinema_usage_control'), '%Y-%m-%d %H:%M:%S')) %}
          {% set seconds = (now().timestamp() - start) %}
          {{ seconds }}
    
    - if:
        - "{{ delta_time | float(0) < 600 }}"
      
      then:
        - variables:
            delay: "{{ (600 - delta_time) | round }}"
        
        # Bypass the message and timer start if the timer is already running. Someone is being a jerk.
        - if:
            - "{{ is_state('timer.cinema_usage_delay', 'idle') }}"
          
          then:        
            - service: notify.alexa_media
              data:
                message: >
                  {% set delay_minutes = (delay / 60) | round %}
                  {% set delay_display =iif(delay_minutes >= 1, delay_minutes, 1) %}
                  Cinema has been opened recently. Delaying cinema close for {{ delay_display }} {{ iif(delay_display == 1, 'minute', 'minutes') }}
                target:
                  - media_player.family_room_echo
                  - media_player.theater_echo
                data:
                  type: tts
        
            - service: timer.start
              data:
                entity_id: timer.cinema_usage_delay
                duration: "{{ delay }}"
        
        - stop: "Cinema has been opened recently."
    
    # Indicate the theater is closed.
    - service: input_boolean.turn_off
      entity_id: input_boolean.theater_open
    
    # Set the usage control timestamp.
    - service: input_datetime.set_datetime
      target:
        entity_id: input_datetime.cinema_usage_control
      data_template:
        datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
    
    # Turn on some lights. This also turns on automations/lights that were possibly turned off by the open cinema script.
    - service: script.turn_on
      entity_id: script.set_theater_idle
    
    # Turn off all devices.
    - delay: '00:00:02'
    
    - service: remote.turn_off
      entity_id: remote.harmony_hub
    
    # Set the upstairs Ecobee to away or sleep mode, depending on the time of day.
    - if:
        - condition: time
          after:  '18:30:00'
          before: '23:30:00'
        
      then:
          
        - service: script.set_thermostat_preset
          data:
            thermostat_entity: climate.upstairs
            preset: 'Sleep'
      
      else:
        
        - service: script.set_thermostat_preset
          data:
            thermostat_entity: climate.upstairs
            preset: 'Away'
    
    # Turn off all lights.
    - delay: '00:05:00'
    
    - service: script.turn_on
      entity_id: script.set_theater_dark

#===========================#
#     Theater Lighting      #
#===========================#

# Make the theater dark.
set_theater_dark:
  alias: Set Theater Dark
  sequence:
    - scene: scene.theater_aux_dark
    - scene: scene.lutron_dark

# Make the theater dark, with a delay.
set_theater_dark_delay:
  alias: Set Theater Dark Delay
  sequence:
    - scene: scene.theater_aux_dark
    - delay: '00:00:12'
    - scene: scene.lutron_dark

# Make the theater dim.
set_theater_dim:
  alias: Set Theater Dim
  sequence:
    - scene: scene.theater_aux_dark
    - scene: scene.lutron_dim

# Make the theater bright.
set_theater_bright:
  alias: Set Theater Bright
  sequence:
    - scene: scene.theater_aux_partial
    - service: script.change_downstairs_lighting
      data:
        turn_on: true
        christmas: false
    - scene: scene.lutron_bright

# Make the theater idle, meaning it's on but we need lights to see.
set_theater_idle:
  alias: Set Theater Idle
  sequence:
    - scene: scene.theater_aux_partial
    - scene: scene.lutron_idle
    - service: script.change_downstairs_lighting
      data:
        turn_on: true
        christmas: false

#============================#
#     Downstairs Lights      #
#============================#

# Turn on some downstairs lights if it's dark enough, or conditionally turn them off. This is used as follows,
# either directly or via the Set Theater Idle script:
#
# - The Open Cinema script (turn on, delay, turn off)
# - The Close Cinema script (turn on)
# - The Alexa Break Time routine, which calls Set Theater Idle (turn on)
# - The Restore Lighting On Resume script (turn off)
change_downstairs_lighting:
  alias: Change Downstairs Lighting
  fields:
    turn_on:
      description: Whether to turn the lights on (true) or off (false).
    
    christmas:
      description: Whether to change the Christmas lights (true) or not (false).
  
  sequence:
    - if:
      
        # Turn on lights.
        - "{{ turn_on == true }}"
        
      then:
          
        # Turn on automations that might have been turned off.
        - service: automation.turn_on
          entity_id:
            - automation.check_daytime_lights_sunset_minimum
            - automation.check_daytime_lights_sunset_medium
            - automation.check_daytime_lights_sunset_maximum
          
        # Turn on lights. The use of the sun elevation angle here is a crude approximation of the Weather Based Light At Sunset blueprint.
        - if:
            - "{{ state_attr('sun.sun', 'elevation') | float(0) <= state_attr('sensor.variables', 'variables').min_elevation | float(0) }}"
          
          then:    
            - service: light.turn_on
              data_template:
                entity_id: >
                  {% if states('input_boolean.christmas_mode') == 'off' or (christmas == false) %}
                    {{ 'light.daytime_lights' }}
                  {% else %}
                    {{ ['light.hallway_lamp', 'light.indoor_christmas_lights'] }}
                  {% endif %}
            
            - service: light.turn_on
              entity_id:
                - light.stairway_light
                - light.island_light
        
      # Turn off lights, but only if no family members present.
      else:
        - condition: state
          entity_id: binary_sensor.adults_home
          state: 'off'
        
        # First, turn off automations that might turn on some of these lights.
        - service: automation.turn_off
          entity_id:
            - automation.check_daytime_lights_sunset_minimum
            - automation.check_daytime_lights_sunset_medium
            - automation.check_daytime_lights_sunset_maximum    
        
        # Now, turn them off.
        - service: light.turn_off
          data_template:
            entity_id: >
              {% if states('input_boolean.christmas_mode') == 'off' or (christmas == false) %}
                {{ 'light.daytime_lights' }}
              {% else %}
                {{ ['light.hallway_lamp', 'light.indoor_christmas_lights'] }}
              {% endif %}
        
        - service: light.turn_off
          entity_id: 
            - light.stairway_light
            - light.island_light

#==============================#
#     Watch Shield TV App      #
#==============================#

# Template script that does the work.
watch_app:
  alias: Watch Application
  fields:
    component:
      description: 'The component name of the target Shield TV application. These are obtained by querying the Shield TV box.'
      example: 'com.netflix.ninja/.MainActivity'
    lighting:
      description: 'Script or scene that establishes the desired lighting.'
      example: 'script.set_theater_dark'
  
  sequence:
    
    # Turn on some lights.
    - service: script.set_theater_idle
  
    # First, turn on the harmony activity that ensures the projector, receiver and Shield TV are powered on. The receiver at this 
    # point is switched to an unused input so the screen will be dark.
    - service: remote.turn_on
      entity_id: remote.harmony_hub
      data:
        activity: Enable Streaming
    
    # After a short delay, bring up the target application on the Shield TV.
    - delay: '00:00:03'
    - service: androidtv.adb_command
      data:
        entity_id: media_player.shield_tv
        command: "am start -a android.intent.action.MAIN -c android.intent.category.LEANBACK_LAUNCHER -n {{ component }}"
  
    # Now switch the receiver to the proper input so the application can be viewed on screen.
    - service: remote.send_command
      entity_id: remote.harmony_hub
      data:
        command: 'InputCbl/Sat'
        device: Marantz Receiver
  
    # Establish the target lighting.
    - service: "{{ lighting }}"

#------------------------#
#   -- Applications --   #
#------------------------#

# Amazon Prime
watch_amazon_prime:
  alias: Watch Amazon Prime
  sequence:
    - service: script.watch_app
      data:
        component: 'com.amazon.amazonvideo.livingroom/com.amazon.ignition.IgnitionActivity'
        lighting: 'script.set_theater_dark_delay'

# Disney Plus
watch_disney_plus:
  alias: Watch Disney Plus
  sequence:
    - service: script.watch_app
      data:
        component: 'com.disney.disneyplus/com.bamtechmedia.dominguez.main.MainActivity'
        lighting: 'script.set_theater_dark_delay'

# Max
watch_max:
  alias: Watch Max
  sequence:
    - service: script.watch_app
      data:
        component: 'com.wbd.stream/com.wbd.beam.BeamActivity'
        lighting: 'script.set_theater_dark_delay'

# Hulu
watch_hulu:
  alias: Watch Hulu
  sequence:
    - service: script.watch_app
      data:
        component: 'com.hulu.livingroomplus/.WKFactivity'
        lighting: 'script.set_theater_dark_delay'

# Kodi
watch_kodi:
  alias: Watch Kodi
  sequence:
    - service: script.watch_app
      data:
        component: 'org.xbmc.kodi/.Splash'
        lighting: 'script.set_theater_dark_delay'

# Netflix
watch_netflix:
  alias: Watch Netflix
  sequence:
    - service: script.watch_app
      data:
        component: 'com.netflix.ninja/.MainActivity'
        lighting: 'script.set_theater_dark_delay'

# Paramount Plus
watch_paramount_plus:
  alias: Watch Paramount Plus
  sequence:
    - service: script.watch_app
      data:
        component: 'com.cbs.ott/com.paramount.android.pplus.splash.tv.ui.activity.SplashActivity'
        lighting: 'script.set_theater_dark_delay'

# Peacock
watch_peacock:
  alias: Watch Peacock
  sequence:
    - service: script.watch_app
      data:
        component: 'com.peacocktv.peacockandroid/com.peacock.peacocktv.GoogleMainActivity'
        lighting: 'script.set_theater_dark_delay'

# Youtube TV
watch_youtube_tv:
  alias: Watch Youtube TV
  sequence:
    - service: script.watch_app
      data:
        component: 'com.google.android.youtube.tvunplugged/com.google.android.apps.youtube.tvunplugged.activity.MainActivity'
        lighting: 'script.set_theater_dark_delay'

#=============================#
#     Harmony Activities      #
#=============================#

# Template script that does the work.
start_activity:
  alias: Start Activity
  fields:
    activity:
      description: 'The Harmony activity name to be started.'
      example: 'BD Player'
    lighting:
      description: 'Script or scene that establishes the desired lighting.'
      example: 'script.set_theater_dark'
  
  sequence:
  
    # Turn on the target activity.
    - service: remote.turn_on
      entity_id: remote.harmony_hub
      data:
        activity: "{{ activity }}"
  
    # Establish the target lighting.
    - service: "{{ lighting }}"

#----------------------#
#   -- Activities --   #
#----------------------#

# Shield TV (streaming)
start_streaming:
  alias: Start Streaming
  sequence:
    - service: script.start_activity
      data:
        activity: 'Stream Player'
        lighting: 'script.set_theater_dark_delay'

# Blu-ray
start_bluray:
  alias: Start Bluray
  sequence:
    - service: script.start_activity
      data:
        activity: 'BD Player'
        lighting: 'script.set_theater_dark_delay'

# Laserdisc
start_laserdisc:
  alias: Start Laserdisc
  sequence:
    - service: script.start_activity
      data:
        activity: 'LD Player'
        lighting: 'script.set_theater_dark_delay'

# Turntable
start_turntable:
  alias: Start Turntable
  sequence:
    - service: script.start_activity
      data:
        activity: 'LP Player'
        lighting: 'script.set_theater_dim'

#========================#
#     Cinema Resume      #
#========================#

# Resume the current harmony activity and restore the lighting.

# Worker script
resume_worker:
  alias: Resume Worker
  fields:
    device:
      description: 'The Harmony device name to be resumed.'
      example: 'Sony DVD/Blu-ray Player'
  
  sequence:
  
    # Send the play command to the target device.
    - service: remote.send_command
      entity_id: remote.harmony_hub
      data:
        command: Play
        device: "{{ device }}"
    
    # Restore theater lighting.
    - service: script.restore_lighting_on_resume

# Call the worker script with the appropriate device based on the Harmony activity.
# Note: The turntable cannot be controlled, so all we do is turn on some lights.
resume_cinema:
  alias: Resume Cinema
  
  sequence:
    - choose:
      - conditions: "{{ is_state('sensor.harmony_hub', 'Stream Player') or is_state('sensor.harmony_hub', 'Enable Streaming') }}"
        
        sequence:
          - service: script.resume_worker
            data:
              device: 'NVIDIA Shield TV'
      
      - conditions: "{{ is_state('sensor.harmony_hub', 'BD Player') }}"
        
        sequence:
          - service: script.resume_worker
            data:
              device: 'Sony DVD/Blu-ray Player'
      
      - conditions: "{{ is_state('sensor.harmony_hub', 'LD Player') }}"
        
        sequence:
          - service: script.resume_worker
            data:
              device: 'Panasonic Laserdisc Player'
      
      - conditions: "{{ is_state('sensor.harmony_hub', 'LP Player') }}"
        
        sequence:
          - service: script.turn_on
            entity_id: script.set_theater_dim
      
      default:
        - service: system_log.write
          data:
            message: Current activity does not support resume command.
            level: warning

# Restore the theater lighting on resume (called by the restore automation and script).
restore_lighting_on_resume:
  alias: Restore Lighting On Resume
  
  sequence:
  
    # Establish 'dark' theater lighting.
    - service: script.turn_on
      entity_id: script.set_theater_dark
    
    # Turn off some downstairs lights.
    - service: script.change_downstairs_lighting
      data:
        turn_on: false
        christmas: false

#===========================#
#     Kodi Misc Control     #
#===========================#

# Activate the cinema if needed. This is necessary if Play Feature Movie or Play Random Kodi Videos is started when the
# cinema is off.
activate_cinema:
  alias: Activate Cinema
  
  sequence:
  
    #
    - if:
        - "{{ states('binary_sensor.theater_av_system') == 'off' }}"
    
      then:
    
        # Turn on some lights.
        - service: script.set_theater_idle
  
        # Start the 'enable streaming' Harmony activity, which ensures the correct devices are on and the screen is dark.
        - service: remote.turn_on
          entity_id: remote.harmony_hub
          data:
            activity: Enable Streaming
      
        # Delay for a bit to let the projector warm up.
        - delay: '00:04:00'

# Activate Kodi on the Shield TV. We make no assumptions here about the rest of the theater; for example we don't
# require the projector to be on. All we need is the Shield TV on and the Kodi application running on it.
activate_kodi:
  alias: Activate Kodi
  
  sequence:
  
    # Turn on the Shield TV so we can host the Kodi application.
    - service: media_player.turn_on
      data:
        entity_id: media_player.shield_tv
    - delay: '00:00:02'
  
    # Start Kodi on the Shield TV.
    - service: androidtv.adb_command
      data:
        entity_id: media_player.shield_tv
        command: "am start -a android.intent.action.MAIN -c android.intent.category.LEANBACK_LAUNCHER -n 'org.xbmc.kodi/.Splash'"
    - delay: '00:00:01'

#============================#
#     Kodi Movie Results     #
#============================#

# When we send commands to Kodi, for example to get movies or music videos, it seems we can't wait for the result in a script
# using wait_for_trigger, because the result event is fired before such trigger is initialized (at least from what I've seen).
# So we use automations instead to react to the result event, and process those results here, for movies. 
#
# Results for a set of music videos is handled directly by the Process Kodi Video Result automation.
handle_kodi_movies_result:
  alias: Handle Kodi Movies Result
  
  fields:
    result:
      description: The result from the GetMovies Kodi call.
  
  sequence:
    
    # We expect either one movie to be returned, or all of them. Pass the result on to the appropriate script to continue.
    - choose:
      - conditions: "{{ result.limits.total == 1 }}"
        
        sequence:
          - service: script.process_single_kodi_movie_result
            data:
              result: "{{ result }}"
      
      - conditions: "{{ result.limits.total > 1 }}"
        
        sequence:
          - service: script.process_all_kodi_movies_result
            data:
              result: "{{ result }}"
      
      # Nothing was returned. This is unexpected.
      default:
        - service: system_log.write
          data:
            message: "Kodi GetMovies command did not return any movies."
            level: warning

#========================#
#     Kodi All Movies    #
#========================#

# Get the list of all movies known by Kodi.
# This script is only needed when the Kodi movie library is updated.
get_all_kodi_movies:
  alias: Get All Kodi Movies
  
  sequence:
    
    # Activate Kodi on the Shield TV.
    - service: script.activate_kodi
  
    # Send the GetMovies command to Kodi. The Handle Kodi Movies Result script calls Process All Kodi Movies Result
    # below with the command result.
    - service: kodi.call_method
      data:
        entity_id: media_player.kodi
        method: VideoLibrary.GetMovies

# Process the list of movies returned by Kodi.
process_all_kodi_movies_result:
  alias: Process All Kodi Movies Result
  
  fields:
    result:
      description: The result from the GetMovies Kodi call.
  
  sequence:
    
    # Call the python script to populate the input select.
    - service: pyscript.populate_all_movies
      data:
        entity: input_select.kodi_movies
        result: "{{ result }}"
  
    # Exit the Kodi application.
    - service: remote.send_command
      entity_id: remote.harmony_hub
      data:
        command: 'Home'
        device: NVIDIA Shield TV
    - delay: '00:00:01'
  
    # Turn the Shield TV off again.
    - service: media_player.turn_off
      data:
        entity_id: media_player.shield_tv

#===========================#
#     Kodi Play Feature     #
#===========================#

# Play feature movie! 
play_feature_movie:
  alias: Play Feature Movie
  
  sequence:
    
    # Prepare the cinema if needed.
    - service: script.activate_cinema
    
    # Activate Kodi on the Shield TV.
    - service: script.activate_kodi
  
    # Send the GetMovies command to Kodi, with the target movie name. The Handle Kodi Movies Result script calls 
    # Process Single Kodi Movie Result below with the command result.
    - service: kodi.call_method
      data:
        entity_id: media_player.kodi
        method: VideoLibrary.GetMovies
        filter:
          field: title
          operator: is
          value: "{{ states('input_select.kodi_movies') }}"
        limits:
          end: 1
          start: 0

# Process the single movie returned by Kodi.
process_single_kodi_movie_result:
  alias: Process Single Kodi Movie Result
  
  fields:
    result:
      description: The result from the GetMovies Kodi call.
  
  sequence:
    
    # Pick up the movie ID.
    - variables:
        movieid: "{{ result.movies.0.movieid }}"
    
    # Build a set of random music videos as a preamble to the movie. These are added to a playlist.
    - service: script.get_all_kodi_videos
          
    # Add the movie to the playlist.
    - service: kodi.call_method
      target:
        entity_id: media_player.kodi
      data:
        method: Playlist.Add
        playlistid: 1
        item:
          movieid: "{{ movieid }}"
  
    # Now switch the receiver to the proper input so Kodi can be viewed on screen.
    - service: remote.send_command
      entity_id: remote.harmony_hub
      data:
        command: 'InputCbl/Sat'
        device: Marantz Receiver
  
    # Play the playlist.
    - service: script.play_kodi_playlist
  
    # Darken the theater.
    - service: script.turn_on
      entity_id: script.set_theater_dark_delay

#=================================#
#     Kodi Play Random Videos     #
#=================================#

# Play random videos using Kodi. This is intended to be run standalone. Playing videos as a preamble to a movie
# uses some of the same technology, but is part of the Play Feature Movie script.
play_random_kodi_videos:
  alias: Play Random Kodi Videos
  
  sequence:
    
    # Prepare the cinema if needed.
    - service: script.activate_cinema
    
    # Activate Kodi on the Shield TV.
    - service: script.activate_kodi

    # Build a set of random music videos. These are added to a playlist.
    - service: script.get_all_kodi_videos
  
    # Now switch the receiver to the proper input so Kodi can be viewed on screen.
    - service: remote.send_command
      entity_id: remote.harmony_hub
      data:
        command: 'InputCbl/Sat'
        device: Marantz Receiver
        
    # Play the playlist.
    - service: script.play_kodi_playlist
  
    # Darken the theater.
    - service: script.turn_on
      entity_id: script.set_theater_dark_delay

#=====================================#
#     Kodi Video Playlist Control     #
#=====================================#

# Get all music videos using Kodi.
get_all_kodi_videos:
  alias: Get All Kodi Videos
  
  sequence:
    
    # Send the command to Kodi to get all available videos.
    - service: kodi.call_method
      target:
        entity_id: media_player.kodi
      data:
        method: VideoLibrary.GetMusicVideos
        properties:
          - artist
          - streamdetails

# Build a playlist of selected music videos.
build_kodi_video_playlist:
  alias: Build Kodi Video Playlist
  
  sequence:
  
    # Ensure the playlist is clear.
    - service: kodi.call_method
      target:
        entity_id: media_player.kodi
      data:
        method: Playlist.Clear
        playlistid: 1
    
    - repeat:
        
        # Repeat for each selected video ID.
        for_each: "{{ states('input_text.music_video_ids').split(',') }}"
        
        sequence:
          
          # Add the video to the playlist.
          - service: kodi.call_method
            target:
              entity_id: media_player.kodi
            data:
              method: Playlist.Add
              playlistid: 1
              item:
                musicvideoid: "{{ repeat.item | int(0) }}"

# Play a Kodi playlist. This consists of either a set of music videos, or such a set along with a feature movie.
play_kodi_playlist:
  alias: Play Kodi Playlist
  
  sequence:
    - service: kodi.call_method
      target:
        entity_id: media_player.kodi
      data:
        method: Player.Open
        item:
          playlistid: 1
