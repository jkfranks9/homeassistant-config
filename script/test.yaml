
remove_global_variables:
  alias: Remove Global Variables
  
  sequence:
    
    - event: remove_variable
      event_data:
        key: rooms_with_lights
    - event: remove_variable
      event_data:
        key: rooms_with_lights_entities

#==============#
#     Kodi     #
#==============#

test_kodi:
  alias: Test Kodi
  
  sequence:
  
    # Send the 'get movies' command to Kodi.
    - service: kodi.call_method
      data:
        entity_id: media_player.kodi
        #method: VideoLibrary.GetMusicVideos
        method: VideoLibrary.GetMovies
    
    # Wait a bit for a good 'get movies' result, but quit if it times out.
    - wait_for_trigger:
        - platform: event
          event_type: test_kodi_result
          #event_data:
          #  source: "{{ wait.trigger.event.data.source }}"
      timeout: 10
      continue_on_timeout: false
        
    - service: system_log.write
      data:
        message: "{{ wait.trigger.event.data.result }}"
        level: warning

test_kodi_video_playlist:
  alias: Test Kodi Video Playlist
  
  sequence:
  
    - service: kodi.call_method
      target:
        entity_id: media_player.kodi
      data:
        method: Playlist.Clear
        playlistid: 1
    
    - wait_for_trigger:
        - platform: event
          event_type: kodi_call_method_result
          event_data:
            result_ok: true
            input:
              method: Playlist.Clear
      timeout: 3
  
    - service: kodi.call_method
      target:
        entity_id: media_player.kodi
      data:
        method: Playlist.Add
        playlistid: 1
        item:
          musicvideoid: 55
    
    - wait_for_trigger:
        - platform: event
          event_type: kodi_call_method_result
          event_data:
            result_ok: true
            input:
              method: Playlist.Add
      timeout: 3
  
    - service: kodi.call_method
      target:
        entity_id: media_player.kodi
      data:
        method: Playlist.Add
        playlistid: 1
        item:
          musicvideoid: 66
    
    - wait_for_trigger:
        - platform: event
          event_type: kodi_call_method_result
          event_data:
            result_ok: true
            input:
              method: Playlist.Add
      timeout: 3

#====================#
#     Thermostat     #
#====================#

test_temp_thermostat_hold:
  alias: Test Temp Thermostat Hold
  
  sequence:
    - service: script.set_temporary_thermostat_hold
      data:
        thermostat_entity: climate.upstairs
        heat_temp: "{{ state_attr('sensor.variables', 'variables').upstairs_home_heat_temp }}"
        cool_temp: "{{ state_attr('sensor.variables', 'variables').upstairs_home_cool_temp }}"

test_thermostat_hold:
  alias: Test Thermostat Hold
  
  sequence:
    - service: ecobee.create_vacation
      data_template:
        entity_id: climate.upstairs
        vacation_name: "Temporary"
        start_date: "{{ states('sensor.date') }}"
        start_time: "{{ now().strftime('%H:%M:%S') }}"
        end_date: "{{ (as_timestamp(states('sensor.date')) + 86400) | timestamp_custom('%Y-%m-%d') }}"
        end_time: "{{ now().strftime('%H:%M:%S') }}"
        heat_temp: "{{ state_attr('sensor.variables', 'variables').upstairs_home_heat_temp }}"
        cool_temp: "{{ state_attr('sensor.variables', 'variables').upstairs_home_cool_temp }}"

test_remove_thermostat_hold:
  alias: Test Remove Thermostat Hold
  
  sequence:
    - condition: template
      value_template: "{{ state_attr('climate.upstairs', 'preset_mode') == 'temp' }}"
    - service: ecobee.delete_vacation
      data_template:
        entity_id: climate.upstairs
        vacation_name: "Temporary"

#================#
#     Shield     #
#================#

test_shield_app:
  alias: Test Shield App
  
  sequence:
    - service: androidtv.adb_command
      data:
        entity_id: media_player.shield_tv
        command: "am start -a android.intent.action.MAIN -c android.intent.category.LEANBACK_LAUNCHER -n com.hulu.livingroomplus/.MainActivity"

#================#
#     Notify     #
#================#

test_notify_echo:
  alias: Test Notify Echo
  
  sequence:
    - service: script.send_notification
      data:
        destination:
          - echo
        message: 'Testing 1 2 3'
        media_player_entity: media_player.everywhere

test_notify_persistent:
  alias: Test Notify Persistent
  
  sequence:
    - service: script.send_notification
      data:
        destination:
          - persistent
        title: 'Test:'
        notification_id: 'testing123'
        message: 'Testing 1 2 3'

test_notify_mobile:
  alias: Test Notify Mobile
  
  sequence:    
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Test:'
        message: 'Testing 1 2 3'
        channel: standard
        throttled: false
    
    - delay: '00:00:30'
    
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Test:'
        message: 'Testing 1 2 3'
        channel: temporary
        throttled: false
        timeout: 15
    
    - delay: '00:00:30'
    
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Test:'
        message: 'Testing 1 2 3'
        channel: persistent
        throttled: false
        tag: 'test123'
    
    - delay: '00:00:15'
    
    - service: notify.mobile_app_jon_companion
      data:
        message: 'clear_notification'
        data:
          tag: 'test123'
    
    - delay: '00:00:15'
    
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Test:'
        message: 'Testing 1 2 3'
        channel: critical
        throttled: false
        tag: 'testing123'

test_notify_all:
  alias: Test Notify All
  
  sequence:    
    - service: script.send_notification
      data:
        destination:
          - echo
          - persistent
          - mobile
        title: 'Test:'
        message: 'Testing 1 2 3'
        channel: standard
        throttled: false
        media_player_entity: media_player.everywhere
        notification_id: 'testing123'

#==========================#
#     Friendly Strings     #
#==========================#

test_friendly_time:
  alias: Test Friendly Time
  
  sequence:
    - service: script.send_notification
      data:
        destination:
          - persistent
        title: 'Test:'
        notification_id: 'test_friendly'
        message: >
          {% from 'friendly_strings.jinja' import format_duration %}
          {{ format_duration(state_attr('input_datetime.reminder_cleaning_guest_bath', 'timestamp')) }}

#================#
#     Lights     #
#================#

test_light_flash:
  alias: Test Light Flash
  
  sequence:
        
    - repeat:
        count: 3
        sequence:
    
          - service: light.turn_on
            entity_id: light.foyer_hutch
          
          - delay: 2
    
          - service: light.turn_off
            entity_id: light.foyer_hutch
          
          - delay: 2

#=======================================#
#     Alexa Actionable Notification     #
#=======================================#

test_alexa_actionable_notification:
  alias: Test Alexa Actionable Notification
  
  sequence:
    - service: script.activate_alexa_actionable_notification
      data:
        message: Would you like me to flash the light?
        event_id: actionable_notification_flash_light
        alexa_device: media_player.office_echo
        suppress_confirmation: false

#=======================#
#     Dynamic Group     #
#=======================#

test_group_create:
  alias: Test Group Create
  
  sequence:
    service: group.set
    data:
      name: Test Group
      object_id: test_group
      entities:
        - light.family_room_lamp
        - light.hallway_lamp

test_group_modify:
  alias: Test Group Modify
  
  sequence:
    service: group.set
    data:
      name: Test Group
      object_id: test_group
      entities:
        - light.family_room_lamp
        - light.hallway_lamp
        - light.guest_bath_light

test_group_remove:
  alias: Test Group Remove
  
  sequence:
    service: group.remove
    data:
      object_id: test_group
