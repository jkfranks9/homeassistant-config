#==========================#
#     Global Variables     #
#==========================#

# We keep a set of global variables in the trigger-based template sensor 'Variables'. Most/all of these are actually
# constants. They exist as entries in a dictionary under the 'variables' attribute, so are retrieved as follows:
#
# state_attr('sensor.variables', 'variables').<var name>

# Trigger-based template sensors are restored on HA start, so we only need to initialize the variables once, which 
# is the purpose of this script. As such, it never needs to be called normally.
initialize_global_variables:
  alias: Initialize Global Variables
  
  sequence:
    
    # Sun elevation angles used for lighting blueprints, automations and scripts.
    - event: set_variable
      event_data:
        key: min_elevation
        value: 3
    - event: set_variable
      event_data:
        key: med_elevation
        value: 6
    - event: set_variable
      event_data:
        key: max_elevation
        value: 9
    
    # Thermostat temperatures.
    - event: set_variable
      event_data:
        key: downstairs_home_heat_temp
        value: 68
    - event: set_variable
      event_data:
        key: downstairs_home_cool_temp
        value: 77
    - event: set_variable
      event_data:
        key: upstairs_home_heat_temp
        value: 67
    - event: set_variable
      event_data:
        key: upstairs_home_cool_temp
        value: 76
    - event: set_variable
      event_data:
        key: extended_hold_heat_temp
        value: 59
    - event: set_variable
      event_data:
        key: extended_hold_cool_temp
        value: 83
    
    # Rooms with lights are for voice control of lights in certain rooms.
    # NOTE: The next 2 variables are related and must be kept in sync.
    - event: set_variable
      event_data:
        key: light_rooms
        value: ['family_room', 'guest_bedroom', 'master_bedroom', 'office', 'theater', 'upstairs_bedroom']    
    - event: set_variable
      event_data:
        key: light_rooms_lights
        value: ['light.family_room_lamp', 'light.guest_bedroom_lamp_2', 'light.master_bedroom_lamp', 'light.office_lamp', 'light.theater_ceiling', 'light.upstairs_bedroom_light']
    
    # Rooms with fans are for voice control of ceiling fans in certain rooms.
    - event: set_variable
      event_data:
        key: fan_rooms
        value: ['family_room', 'office', 'theater']
    
    # Delay in milliseconds to allow Alexa last called to be updated.
    - event: set_variable
      event_data:
        key: last_called_delay
        value: 1000

#===================#
#     Utilities     #
#===================#

# Concatenate a set of backup log files into one file for easier examination.
concat_log_files:
  alias: Concat Log Files
  sequence:
    - service: shell_command.concat_log_files

# Concatenate a set of automation/script log files into one file for easier examination.
concat_auto_scripts_log_files:
  alias: Concat Auto Scripts Log Files
  sequence:
    - service: shell_command.concat_auto_scripts_log_files

#===================#
#     Reminders     #
#===================#

# Set an input datetime entity with an offset in days.
set_datetime_offset_days:
  alias: Set Datetime Offset Days
  
  fields:
    entity:
      description: The entity to be updated.
      selector:
        entity:
          domain: input_datetime
    
    amount:
      description: The amount by which to update the entity.
      selector:
        number:
          min: 1
          max: 100
  
  sequence:
    - service: input_datetime.set_datetime
      data:
        entity_id: "{{ entity }}"
        datetime: "{{ now().today().replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days = amount) }}"

# Set an input datetime entity with an offset in weeks.
set_datetime_offset_weeks:
  alias: Set Datetime Offset Weeks
  
  fields:
    entity:
      description: The entity to be updated.
      selector:
        entity:
          domain: input_datetime
    
    amount:
      description: The amount by which to update the entity.
      selector:
        number:
          min: 1
          max: 52
  
  sequence:
    - service: input_datetime.set_datetime
      data:
        entity_id: "{{ entity }}"
        datetime: "{{ now().today().replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(weeks = amount) }}"

# Set an input datetime entity with an offset in months.
set_datetime_offset_months:
  alias: Set Datetime Offset Months
  
  fields:
    entity:
      description: The entity to be updated.
      selector:
        entity:
          domain: input_datetime
    
    amount:
      description: The amount by which to update the entity.
      selector:
        number:
          min: 1
          max: 24
  
  sequence:
    - service: input_datetime.set_datetime
      data:
        entity_id: '{{ entity }}'
        datetime: >
          {% set dtobj=now().fromtimestamp(as_timestamp(states(entity))) %} 
          {% set sub_months=((dtobj.year * 12) + (dtobj.month + amount - 1)) %}
          {% set new_months=((sub_months) % 12) + 1 %}
          {% set new_year=((sub_months - new_months + 1) / 12) | int(0) %}
          {% set new_day = dtobj.day %}
          {% if new_day == 31 and new_months in [9, 4, 6, 11] or new_months == 2 and new_day > 28 %}
            {% set new_months = new_months + 1 %}
            {% set new_day = 1 %}
          {% endif %}
          {{ dtobj.replace(day=new_day, month=new_months, year=new_year) }}

# Set an input number entity with an offset value.
set_number_offset:
  alias: Set Number Offset
  
  fields:
    entity:
      description: The entity to be updated.
      selector:
        entity:
          domain: input_number
    
    base_entity:
      description: The base entity to which the amount should be added.
      selector:
        entity:
          domain: input_number
    
    amount:
      description: The amount by which to update the entity.
      selector:
        number:
          min: 1
          max: 6000
  
  sequence:
    - service: input_number.set_value
      data:
        entity_id: "{{ entity }}"
        value: "{{ states(base_entity) | int(0) + amount }}"

#========================#
#     MQTT Discovery     #
#========================#

# Publish state & attributes for MQTT last changed sensors.
publish_mqtt_automated_states:
  alias: Publish MQTT Automated States
  mode: parallel
  
  fields: 
    <<: &mqtt_fields
      domain:
        description: The entity domain.
        selector:
          text:
            type: text
      
      unique_id:
        description: The entity ID.
        selector:
          text:
            type: text
    
    state:
      description: The entity state.
      selector:
        text:
          type: text
    
    attributes:
      description: The entity attributes.
      example: A dictionary {} in yaml
      selector:
        object:
  
  variables: 
    <<: &mqtt_variables
      root: "homeassistant"
      
      topic_root: >
        {%- if domain is not defined or unique_id is not defined %}
          {{- [ root, 'error'] | join('/') }}
        {%- else %}
          {{- [ root, domain, unique_id ] | join('/') }}
        {%- endif %}
    
    service_data: >
      {{ {
        'topic': topic_root ~ '/state',
        'payload': '' ~ { 'state': state, 'attributes': attributes | default({}) } | tojson,
        'retain': retain | default('true')
      } }}

  sequence:
    - service: mqtt.publish
      data: "{{ service_data }}"
  
    - service: system_log.write
      data:
        message: "Publish MQTT state: {{ service_data }}"
        level: info

# Set up MQTT discovery sensors to keep track of the last changed time for interesting entities.
set_up_mqtt_automated_config:
  alias: Set Up MQTT Automated Config
  mode: parallel
  
  fields: 
    <<: *mqtt_fields
    device_class: 
      description: The entity device class.
      selector:
        text:
          type: text
  
  variables:
    name: >
      {{ unique_id | default('') | replace('_', ' ') | title }}
    
    <<: *mqtt_variables
    
    service_data: >
      {%- set items = [
        ( "name", name),
        ( "unique_id", unique_id | default(none)),
        ( "state_topic", topic_root ~ "/state"),
        ( "value_template", "{{ value_json.state }}"),
        ( "json_attributes_topic", topic_root ~ "/state"),
        ( "json_attributes_template", "{{ value_json.attributes | tojson }}"),
        ( "device_class", device_class | default(none) ),
      ] %}
      {% set payload = dict.from_keys(items | rejectattr('1', 'none') | list) %}
      {{ {
        'topic': topic_root ~ '/config',
        'payload': '' ~ payload | tojson,
      } }}
  
  sequence:
    - service: mqtt.publish
      data: "{{ service_data }}"

#=======================#
#     Debug Logging     #
#=======================#

# Log laundry events to assist with debugging.
log_laundry_event:
  alias: Log Laundry Event
  
  mode: queued
  
  fields:
    event_type:
      description: The type of event to be logged.
      selector:
        select:
          options:
            - basic
            - metric
            - metric_plus_gradient
            - fill_plus_load
            - timer
    
    prefix:
      description: The message prefix that indicates a washer or dryer event.
    
    message:
      description: The message to be logged.
    
    entity_id_1:
      description: The first entity required (if any) for the message.
    
    entity_id_2:
      description: The second entity required (if any) for the message.
  
  sequence:
    - variables:
        timestamp: "{{ as_timestamp(now()) | timestamp_custom('%b %d %Y %X') }}:"
    
    # Take action based on the event type.
    - choose:
      
      # A basic message just has a text component.
      - conditions: "{{ event_type == 'basic' }}"
        
        sequence:
          - service: notify.laundry_events
            data_template:
              message: "{{ timestamp }} {{ prefix }} {{ message }}"
          
          # Write a separator in the log for stopped messages.
          - if:
              - "{{ message == 'stopped' }}"
            
            then:
              - service: notify.laundry_events
                data:
                  message: '--------------------'
    
      # A metric message adds a single metric, such as a temperature or humidity.
      - conditions: "{{ event_type == 'metric' }}"
        
        sequence:
          - service: notify.laundry_events
            data_template:
              message: "{{ timestamp }} {{ prefix }} {{ message }} ({{ states(entity_id_1) }})"

      # A metric plus gradient message includes both a single metric plus a trend sensor gradient. Obviously this only applies to the dryer.
      - conditions: "{{ event_type == 'metric_plus_gradient' }}"

        sequence:
          - service: notify.laundry_events
            data_template:
              message: "{{ timestamp }} {{ prefix }} {{ message }} ({{ states(entity_id_1) }}) {{ state_attr(entity_id_2, 'gradient') | round(5) }}"
    
      # A fill plus load message includes both the washer fill seconds and calculated load size.
      - conditions: "{{ event_type == 'fill_plus_load' }}"
        
        sequence:
          - service: notify.laundry_events
            data_template:
              message: "{{ timestamp }} {{ prefix }} {{ message }} {{ states(entity_id_1) }}, {{ states(entity_id_2) }}"
    
      # A timer message indicates the name of the timer.
      - conditions: "{{ event_type == 'timer' }}"
        
        sequence:
          - service: notify.laundry_events
            data_template:
              message: "{{ timestamp }} {{ prefix }} {{ message }}: {{ state_attr(entity_id_1, 'friendly_name') }}"
            
      # Should not occur.
      default:
          
        - service: system_log.write
          data:
            message: "Event type invalid value ({{ event_type }})"
            level: error
