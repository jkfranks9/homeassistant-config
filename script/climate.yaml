#=============================#
#     Thermostat Settings     #
#=============================#

set_thermostat_preset:
  alias: Set Thermostat Preset
  
  fields:
    thermostat_entity:
      description: The thermostat on which to set the preset.
    
    preset:
      description: The thermostat preset mode.
    
  sequence:
    - variables:
        climate_name: "{{ thermostat_entity.replace('climate.', '') }}"
    
    # Bypass setting the mode if the request is for the upstairs thermostat and the upstairs bedroom is occupied.
    - if:
        - "{{ climate_name != 'upstairs' or is_state('binary_sensor.penthouse_occupied', 'off') }}"
      
      then:    
        - service: climate.set_preset_mode
          target:
            entity_id: "{{ thermostat_entity }}"
          data:
            preset_mode: "{{ preset }}"

#==========================#
#     Temperature Hold     #
#==========================#

# Set temporary thermostat hold.
set_temporary_thermostat_hold:
  alias: Set Temporary Thermostat Hold
  
  fields:
    thermostat_entity:
      description: The thermostat on which to create a hold.
    
    heat_temp:
      description: The desired heat temperature.
    
    cool_temp:
      description: The desired cool temperature.
    
    days:
      description: The number of days for the temporary hold.
  
  sequence:
    
    # Create a vacation to simulate a hold, using today's date/time, plus the input days for the end. 
    - service: ecobee.create_vacation
      data_template:
        entity_id: "{{ thermostat_entity }}"
        vacation_name: "Temporary"
        start_date: "{{ states('sensor.date') }}"
        start_time: "{{ now().strftime('%H:%M:%S') }}"
        end_date: "{{ (as_timestamp(states('sensor.date')) + (86400 * days | int(0))) | timestamp_custom('%Y-%m-%d') }}"
        end_time: "{{ now().strftime('%H:%M:%S') }}"
        heat_temp: "{{ heat_temp }}"
        cool_temp: "{{ cool_temp }}"

# Set extended thermostat holds.
set_extended_thermostat_holds:
  alias: Set Extended Thermostat Holds
  
  fields:
    heat_temp:
      description: The desired heat temperature.
    
    cool_temp:
      description: The desired cool temperature.
  
  sequence:
    - variables:
        start_date: "{{ states('input_datetime.extended_away_start').split(' ')[0] }}"
        start_time: "{{ states('input_datetime.extended_away_start').split(' ')[1] }}"
        end_date: "{{ states('input_datetime.extended_away_end').split(' ')[0] }}"
        end_time: "{{ states('input_datetime.extended_away_end').split(' ')[1] }}"
    
    # Create vacations to simulate a hold, using the extended away dates/times. 
    # We should remove the vacations when the extended away ends.
    - service: ecobee.create_vacation
      data_template:
        entity_id: climate.downstairs
        vacation_name: "{{ start_date }}"
        start_date: "{{ start_date }}"
        start_time: "{{ start_time }}"
        end_date: "{{ end_date }}"
        end_time: "{{ end_time }}"
        heat_temp: "{{ heat_temp }}"
        cool_temp: "{{ cool_temp }}"
    
    - service: ecobee.create_vacation
      data_template:
        entity_id: climate.upstairs
        vacation_name: "{{ start_date }}"
        start_date: "{{ start_date }}"
        start_time: "{{ start_time }}"
        end_date: "{{ end_date }}"
        end_time: "{{ end_time }}"
        heat_temp: "{{ heat_temp }}"
        cool_temp: "{{ cool_temp }}"

# Remove a temperature hold for a given thermostat.
remove_thermostat_hold:
  alias: Remove Thermostat Hold
  
  fields:
    thermostat_entity:
      description: The thermostat on which to remove a vacation.
    
    extended:
      description: True for an extended hold, false for a temporary hold.
  
  sequence:
    
    # Verify a vacation exists on the thermostat first.
    - condition: "{{ state_attr(thermostat_entity, 'preset_mode') in ['vacation', 'temp'] }}"
    
    - variables:
        
        # For an extended vacation, use the extended away start date as the name. For a temporary vacation, use the hardcoded name.
        vacation_name: "{{ iif (extended == true, states('input_datetime.extended_away_start').split(' ')[0], 'Temporary') }}"
    
    # Remove the vacation on the thermostat.
    - service: ecobee.delete_vacation
      data_template:
        entity_id: "{{ thermostat_entity }}"
        vacation_name: "{{ vacation_name }}"

#==========================#
#     Weather Forecast     #
#==========================#

# Calculate a set of weather metrics, for example temperature and humidity. The calculations are performed on the
# weather forecast, for a time span defined by the input hours (24 hour clock, zero origin). The method of 
# calculation is embedded in the name of each metric.
#
# NOTES:
#
# 1) This is always called BEFORE the start of the first hour of an hourly forecast. It is not designed to work otherwise.
# 2) Hours may cross midnight if needed.
calculate_weather_metrics:
  alias: Calculate Weather Metrics
  
  fields:
    weather_entity:
      description: The weather entity to use.
      selector:
        entity:
          domain: weather
    
    forecast_type:
      description: The type of forecast to retrieve.
      selector:
        select:
          options:
            - hourly
            - daily
    
    first_hour:
      description: (Optional) The first hour of the time span to be interrogated for an hourly forecast.
      selector:
        number:
          min: 0
          max: 23
    
    last_hour:
      description: (Optional) The last hour of the time span to be interrogated for an hourly forecast. If less than first_hour the span crosses midnight.
      selector:
        number:
          min: 0
          max: 23
    
    num_days:
      description: (Optional) The number of days to be interrogated for a daily forecast.
    
    metrics_list:
      description: A list of metrics; each entry contains a number entity, weather forecast variable, default numeric value and initialization value.
      selector:
        object:
  
  sequence:
    
    # Get the hourly weather forecast data.
    - action: weather.get_forecasts
      data:
        type: "{{ forecast_type }}"
      target:
        entity_id: "{{ weather_entity }}"
      response_variable: result
    
    - variables:
        midnight_cross: "{{ iif(forecast_type == 'hourly' and first_hour >= last_hour, true, false) }}"
        num_hours: >
          {% if forecast_type == 'hourly' %}
            {{ iif(midnight_cross == false, last_hour - first_hour, last_hour + 24 - first_hour) }}
          {% endif %}
        
        # The list of hourly weather data for the input time span.
        forecast_list_hourly: >
          {% if forecast_type == 'hourly' %}
            {% set var = namespace(list = [], day = 0) %}
            {% for i in result[weather_entity].forecast %}
              {% set hour = as_local(as_datetime(i.datetime)).strftime('%H') | int(0) %}
              {% set day = as_local(as_datetime(i.datetime)).strftime('%d') | int(0) %}
              {% if loop.first %}
                {% set var.day = day %}
              {% endif %}
              {% if day == var.day %}
                {% if first_hour <= hour <= (iif(midnight_cross == false, last_hour, last_hour + 24)) %}
                  {% set var.list = var.list + [i] %}
                {% endif %}
              {% else %}
                {% if (iif(midnight_cross == false, first_hour, first_hour - 24)) <= hour <= last_hour %}
                  {% set var.list = var.list + [i] %}
                {% endif %}
              {% endif %}
              {% if var.list | length == num_hours %}
                {% break %}
              {% endif %}
            {% endfor %}
            {{ var.list }}
          {% endif %}
        
        # The list of daily weather data for the input number of days.
        forecast_list_daily: >
          {% if forecast_type == 'daily' %}
            {% set var = namespace(list = []) %}
            {% for i in result[weather_entity].forecast %}
              {% set var.list = var.list + [i] %}
              {% if var.list | length == num_days %}
                {% break %}
              {% endif %}
            {% endfor %}
            {{ var.list }}
          {% endif %}
    
    # Initialize the metrics we're about to collect during the loop.
    - repeat:
        for_each: "{{ metrics_list }}"
      
        sequence:
          - variables:
              number_entity: "{{ repeat.item[0] }}"
              init_val: "{{ repeat.item[3] }}"
          
          - action: input_number.set_value
            target:
              entity_id: "{{ number_entity }}"
            data:
              value: "{{ init_val }}"
    
    # Walk through the hourly weather data list.
    - repeat:
        for_each: "{{ iif(forecast_type == 'hourly', forecast_list_hourly, forecast_list_daily) }}"
      
        sequence:
          - variables:
              forecast: "{{ repeat.item }}"
          
          # Walk through each metric.
          - repeat:
              for_each: "{{ metrics_list }}"
          
              sequence:
                - variables:
                    number_entity: "{{ repeat.item[0] }}"
                    forecast_var: "{{ repeat.item[1] }}"
                    default_val: "{{ repeat.item[2] }}"
                    method: "{{ number_entity.split('.')[1].split('_')[0] }}"
                    forecast_data: "{{ forecast.get(forecast_var) }}"
                    value_data: >
                      {% if method == 'average' %}
                        {{ states(number_entity) | float(default_val) + forecast_data }}
                      {% elif method == 'minimum' %}
                        {{ min(states(number_entity) | float(default_val), forecast_data) }}
                      {% elif method == 'maximum' %}
                        {{ max(states(number_entity) | float(default_val), forecast_data) }}
                      {% endif %}
                
                # Perform an intermediate or final calculation according to the method
                - action: input_number.set_value
                  target:
                    entity_id: "{{ number_entity }}"
                  data:
                    value: "{{ value_data }}"
    
    # Now perform the average calculation for all averaged metrics.
    - repeat:
        for_each: "{{ metrics_list }}"
      
        sequence:
          - variables:
              number_entity: "{{ repeat.item[0] }}"
              default_val: "{{ repeat.item[2] }}"
              method: "{{ number_entity.split('.')[1].split('_')[0] }}"
              forecast_list: "{{ iif(forecast_type == 'hourly', forecast_list_hourly, forecast_list_daily) }}"
                
          - if:
              - "{{ method == 'average' }}"
              
            then:
              - action: input_number.set_value
                target:
                  entity_id: "{{ number_entity }}"
                data:
                  value: "{{ states(number_entity) | float(default_val * forecast_list | length) / forecast_list | length }}"
