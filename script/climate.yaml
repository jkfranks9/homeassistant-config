#===========================#
#     Weather Condition     #
#===========================#

# Distill the OpenWeather code into an approximation of the available light level.
#
# Openweather Codes:
#   2xx - Thunderstorm
#   3xx - Drizzle
#   5xx - Rain
#   6xx - Snow
#   7xx - Atmosphere
#   800 - Clear
#   801 - 11% to 25% clouds
#   802 - 26% to 50% clouds
#   803 - 51% to 84% clouds
#   804 - 85% to 100% clouds
evaluate_weather_condition:
  alias: Evaluate Weather Condition
  
  # Allow multiple independent runs.
  mode: parallel
  
  sequence:
    
    - choose:
      
      # Clear or light clouds
      - conditions:
        - condition: template
          value_template: >
            {{  states('sensor.openweathermap_weather_code') | int(0) == 800 or
                states('sensor.openweathermap_weather_code') | int(0) == 801 }}
        sequence:
          
          - service: input_select.select_option
            entity_id: input_select.weather_condition
            data:
              option: 'clear'
      
      # Drizzle, atmospheric haze or moderate clouds
      - conditions:
        - condition: template
          value_template: >
            {{ (states('sensor.openweathermap_weather_code') | int(0) >= 300 and
                states('sensor.openweathermap_weather_code') | int(0) <  400) or
               (states('sensor.openweathermap_weather_code') | int(0) >= 700 and
                states('sensor.openweathermap_weather_code') | int(0) <  800) or
                states('sensor.openweathermap_weather_code') | int(0) == 802 }}
        sequence:
          
          - service: input_select.select_option
            entity_id: input_select.weather_condition
            data:
              option: 'hazy'
      
      # Thunderstorm, rain, snow or heavy clouds
      - conditions:
        - condition: template
          value_template: >
            {{ (states('sensor.openweathermap_weather_code') | int(0) >= 200 and
                states('sensor.openweathermap_weather_code') | int(0) <  300) or
               (states('sensor.openweathermap_weather_code') | int(0) >= 500 and
                states('sensor.openweathermap_weather_code') | int(0) <  700) or
                states('sensor.openweathermap_weather_code') | int(0) == 803  or
                states('sensor.openweathermap_weather_code') | int(0) == 804 }}
        sequence:
          
          - service: input_select.select_option
            entity_id: input_select.weather_condition
            data:
              option: 'gloomy'
      
      # This should never happen, log a warning but choose clear.
      default:
        
        - service: system_log.write
          data:
            message: Unexpected weather code {{ states('sensor.openweathermap_weather_code') }}
            level: warning
        
        - service: input_select.select_option
          entity_id: input_select.weather_condition
          data:
            option: 'clear'

#=============================#
#     Thermostat Settings     #
#=============================#
set_thermostat_preset:
  alias: Set Thermostat Preset
  
  fields:
    thermostat_entity:
      description: The thermostat on which to set the preset.
    
    preset:
      description: The thermostat preset mode.
    
  sequence:
    
    - service: climate.set_preset_mode
      target:
        entity_id: "{{ thermostat_entity }}"
      data:
        preset_mode: "{{ preset }}"

#==========================#
#     Temperature Hold     #
#==========================#

# Set temporary thermostat hold.
set_temporary_thermostat_hold:
  alias: Set Temporary Thermostat Hold
  
  fields:
    thermostat_entity:
      description: The thermostat on which to create a hold.
    
    heat_temp:
      description: The desired heat temperature.
    
    cool_temp:
      description: The desired cool temperature.
  
  sequence:
    
    # Create a vacation to simulate a hold, using today's date/time, plus 1 day for the end. 
    # We should remove the vacation on the following morning.
    - service: ecobee.create_vacation
      data_template:
        entity_id: "{{ thermostat_entity }}"
        vacation_name: "Temporary"
        start_date: "{{ states('sensor.date') }}"
        start_time: "{{ now().strftime('%H:%M:%S') }}"
        end_date: "{{ (as_timestamp(states('sensor.date')) + 86400) | timestamp_custom('%Y-%m-%d') }}"
        end_time: "{{ now().strftime('%H:%M:%S') }}"
        heat_temp: "{{ heat_temp }}"
        cool_temp: "{{  cool_temp }}"

# Set extended thermostat hold.
set_extended_thermostat_hold:
  alias: Set Extended Thermostat Hold
  
  fields:
    thermostat_entity:
      description: The thermostat on which to create a hold.
    
    heat_temp:
      description: The desired heat temperature.
    
    cool_temp:
      description: The desired cool temperature.
  
  sequence:
    
    # Create a vacation to simulate a hold, using the extended away dates/times. 
    # We should remove the vacation when the extended away ends.
    - service: ecobee.create_vacation
      data_template:
        entity_id: "{{ thermostat_entity }}"
        vacation_name: "{{ states('input_datetime.extended_away_start').split(' ')[0] }}"
        start_date: "{{ states('input_datetime.extended_away_start').split(' ')[0] }}"
        start_time: "{{ states('input_datetime.extended_away_start').split(' ')[1] }}"
        end_date: "{{ states('input_datetime.extended_away_end').split(' ')[0] }}"
        end_time: "{{ states('input_datetime.extended_away_end').split(' ')[1] }}"
        heat_temp: "{{ heat_temp }}"
        cool_temp: "{{  cool_temp }}"

# Remove a temperature hold for a given thermostat.
remove_thermostat_hold:
  alias: Remove Thermostat Hold
  
  fields:
    thermostat_entity:
      description: The thermostat on which to remove a vacation.
    
    extended:
      description: True for an extended hold, false for a temporary hold.
  
  sequence:
    
    # Verify a vacation exists on the thermostat first.
    - condition: "{{ state_attr(thermostat_entity, 'preset_mode') == 'vacation' }}"
    
    # Remove the vacation on the thermostat. Note that the name is limited to 12 characters.
        
    # For an extended vacation, use the extended away start date as the name.
    - if:
        - "{{ extended == 'true' }}"
      
      then:
          
        - service: ecobee.delete_vacation
          data_template:
            entity_id: "{{ thermostat_entity }}"
            vacation_name: "{{ states('input_datetime.extended_away_start').split(' ')[0] }}"
      
      # For a temporary vacation, use the hardcoded name.
      else:
        
        - service: ecobee.delete_vacation
          data_template:
            entity_id: "{{ thermostat_entity }}"
            vacation_name: "Temporary"
