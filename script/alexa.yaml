# NOTE:
#
# Scripts starting with "alexa_" are intended to be used by Alexa routines. All such scripts are made
# available to Alexa via an include_entity_globs entry in the alexa configuration file.

#=======================================#
#     Alexa Actionable Notification     #
#=======================================#

# This integrates with the Alexa custom skill AlexaActionableNotification. This skill allows us to have Alexa ask questions
# and then process the response. There are 3 parts to this process:
#
# 1) An automation or script is used to call this script with the message to be announced and the echo device to use.
#    More importantly, the event ID is provided, which is used in step 3.
# 2) This script invokes the skill with the event ID. Alexa then asks a question and waits for a response. The skill then
#    fires the alexa_actionable_notification event with the supplied event ID.
# 3) An automation listens for the event and event ID and takes whatever action is desired.

activate_alexa_actionable_notification:
  alias: Activate Alexa Actionable Notification
  
  fields:
    message:
      name: Message
      description: The content of the message that you want to be announced.
      selector:
        text:
          type: text
          multiline: false
    
    event_id:
      name: Event ID
      description: Correlation ID for event responses.
      selector:
        text:
          type: text
          multiline: false
    
    alexa_device:
      name: Alexa Device
      description: Alexa device you want to trigger.
      selector:
        entity:
          filter:
            - integration: alexa_media
              domain: media_player
    
    suppress_confirmation:
      name: Suppress Confirmation
      description: Set true if you want to suppress 'okay' confirmation.
      selector:
        boolean:
  
  sequence:
    
    # The Alexa skill depends on the parameters being saved in this input text.
    - service: input_text.set_value
      data_template:
        entity_id: input_text.alexa_actionable_notification
        value: '{"text": "{{ message }}", "event": "{{ event_id }}", "suppress_confirmation": "{{ suppress_confirmation }}"}'
    
    # Fire off the Alexa skill. Once the user has responded the skill will fire the appropriate event.
    - service: media_player.play_media
      target:
        entity_id: "{{ alexa_device }}"
      data:
        media_content_type: skill
        media_content_id: amzn1.ask.skill.7d2664dc-8458-4ad9-ad3f-93c95c8dae57

#======================#
#     Ceiling Fans     #
#======================#

# Change a ceiling fan speed, including turning it off. This involves asking the user for the fan speed
# and then taking action in the automation that triggers on the actionable notification event ID.
# This is intended to be called by an Alexa routine.
alexa_ask_fan_setting:
  alias: Alexa Ask Fan Setting
  
  sequence:
    
    # Get the room containing the echo device that was used.
    - service: script.get_echo_room
      response_variable: result
    
    - variables:
        
        # Extract the room from the response variable.
        room: "{{ result.room }}"
        
        # This defines the rooms with ceiling fans.
        fan_rooms: "{{ state_attr('sensor.variables', 'variables').fan_rooms }}"
    
    # Silently ignore any rooms we don't know about.
    - if:
        - "{{ room in fan_rooms }}"
      
      then:
    
        # Save the room so we can target the right echo device when we get the fan setting response.
        - service: input_text.set_value
          target:
            entity_id: input_text.alexa_fan_room
          data:
            value: "{{ room }}"
        
        # Remove any underscores from the room name, so Alexa doesn't sound so dumb.
        - variables:
            friendly_room: "{{ room.replace('_', ' ') }}"
        
        # Ask for the fan setting. The Handle Fan Setting Response automation operates the fan.
        - service: script.activate_alexa_actionable_notification
          data:
            message: "What setting should I use for the {{ friendly_room }} fan"
            event_id: actionable_notification_fan_setting_choice
            alexa_device: "{{ 'media_player.' ~ room ~ '_echo' }}"
            suppress_confirmation: false

# Shortcuts to set the fan speed directly, instead of asking the user.
# Again, intended to be called by voice assistants. 
alexa_set_fan_off:
  alias: Alexa Set Fan Off
  
  sequence:
    - service: script.modify_fan
      data:
        caller: alexa
        speed: 'off'

alexa_set_fan_low:
  alias: Alexa Set Fan Low
  
  sequence:
    - service: script.modify_fan
      data:
        caller: alexa
        speed: 'low'

alexa_set_fan_medium:
  alias: Alexa Set Fan Medium
  
  sequence:
    - service: script.modify_fan
      data:
        caller: alexa
        speed: 'medium'

alexa_set_fan_high:
  alias: Alexa Set Fan High
  
  sequence:
    - service: script.modify_fan
      data:
        caller: alexa
        speed: 'high'

nabu_set_fan_off:
  alias: Nabu Set Fan Off
  
  sequence:
    - service: script.modify_fan
      data:
        caller: nabu
        speed: 'off'

nabu_set_fan_low:
  alias: Nabu Set Fan Low
  
  sequence:
    - service: script.modify_fan
      data:
        caller: nabu
        speed: 'low'

nabu_set_fan_medium:
  alias: Nabu Set Fan Medium
  
  sequence:
    - service: script.modify_fan
      data:
        caller: nabu
        speed: 'medium'

nabu_set_fan_high:
  alias: Nabu Set Fan High
  
  sequence:
    - service: script.modify_fan
      data:
        caller: nabu
        speed: 'high'

#=====================#
#     Room Lights     #
#=====================#

# Toggle a light that lives in a room with an echo device.
# This is intended to be called by an Alexa routine.
alexa_toggle_room_light:
  alias: Alexa Toggle Room Light
  
  sequence:
    
    # Get the room containing the echo device that was used.
    - service: script.get_echo_room
      response_variable: result
    
    - variables:
        
        # Extract the room from the response variable.
        room: "{{ result.room }}"
        
        # These define the rooms and the lights in those rooms.
        light_rooms: "{{ state_attr('sensor.variables', 'variables').light_rooms }}"
        light_rooms_lights: "{{ state_attr('sensor.variables', 'variables').light_rooms_lights }}"
    
    # Silently ignore any rooms we don't know about.
    - if:
        - "{{ room in light_rooms }}"
      
      then:
        
        # Toggle the light.
        - service: light.toggle
          target:
            entity_id: "{{ light_rooms_lights[light_rooms.index(room)] }}"

#===================#
#     Utilities     #
#===================#

# Get the room in which the called echo device lives.
get_echo_room:
  alias: Get Echo Room
  
  sequence:
    
    # We need to update the last called echo device, because this information is not pushed to us by Alexa.
    - service: alexa_media.update_last_called
    
    # Next update the Last Alexa sensor, using an event trigger.
    - event: update_last_alexa_sensor
    
    # Then we need to wait a bit.
    - delay: 
        milliseconds: "{{ state_attr('sensor.variables', 'variables').last_called_delay }}"
    
    - variables:
        
        # Extract the room from the updated last alexa sensor.
        room: "{{ {'room': (states('sensor.last_alexa').split('.')[1]).split('_echo')[0]} }}"
        
    # Return the room.
    - stop: "Returning room"
      response_variable: room

# Get the room in which the called nabu device lives.
get_nabu_room:
  alias: Get Nabu Room
  
  sequence:    
    - variables:
        
        # Extract the room from the last used nabu device.
        # NOTE: Figure it out later ... I only have one for now.
        room: "{{ {'room': 'family_room'} }}"
        
    # Return the room.
    - stop: "Returning room"
      response_variable: room

# Modify a fan that lives in a room with an echo device.
modify_fan:
  alias: Modify Fan
  
  fields:
    caller:
      name: Caller
      description: Voice assistant caller.
      selector:
        select:
          options:
            - alexa
            - nabu
    
    speed:
      name: Speed
      description: Fan speed to be used (see fan_settings variable).
      selector:
        select:
  
  sequence:
    
    # Get the room containing the voice assistant device that was used.
    - choose:
        - conditions: "{{ caller == 'alexa' }}"
          
          sequence:
            - service: script.get_echo_room
              response_variable: result
      
        - conditions: "{{ caller == 'nabu' }}"
          
          sequence:
            - service: script.get_nabu_room
              response_variable: result
    
    - variables:
        
        # Extract the room from the response variable.
        room: "{{ result.room }}"
        
        # This defines the rooms with ceiling fans.
        fan_rooms: "{{ state_attr('sensor.variables', 'variables').fan_rooms }}"
        
        # These are the input speed settings. They are used to index the numerical (percentage)
        # settings below.
        fan_settings: ['off', 'low', 'medium', 'high']
        
        # This is the fan speed for each fan setting.
        fan_speeds: ['0', '33', '66', '99']
    
    # Silently ignore any rooms we don't know about.
    - if:
        - "{{ room in fan_rooms }}"
      
      then:
        
        # Set the fan to the requested speed.
        - service: script.set_fan_to_speed
          data:
            entity_id: "{{ 'fan.' ~ room ~ '_fan' }}"
            speed: "{{ fan_speeds[fan_settings.index(speed)] }}"
