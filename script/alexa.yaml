#=======================================#
#     Alexa Actionable Notification     #
#=======================================#

# This integrates with the Alexa custom skill AlexaActionableNotification. This skill allows us to have Alexa ask questions
# and then process the response. There are 3 parts to this process:
#
# 1) An automation or script is used to call this script with the message to be announced and the echo device to use.
#    More importantly, the event ID is provided, which is used in step 3.
# 2) This script invokes the skill with the event ID. Alexa then asks a question and waits for a response. The skill then
#    fires the alexa_actionable_notification event with the supplied event ID.
# 3) An automation listens for the event and event ID and takes whatever action is desired.

activate_alexa_actionable_notification:
  alias: Activate Alexa Actionable Notification
  
  fields:
    message:
      name: Message
      description: The content of the message that you want to be announced.
      selector:
        text:
          type: text
          multiline: false
    
    event_id:
      name: Event ID
      description: Correlation ID for event responses.
      selector:
        text:
          type: text
          multiline: false
    
    alexa_device:
      name: Alexa Device
      description: Alexa device you want to trigger.
      selector:
        entity:
          filter:
            - integration: alexa_media
              domain: media_player
    
    suppress_confirmation:
      name: Suppress Confirmation
      description: Set true if you want to suppress 'okay' confirmation.
      selector:
        boolean:
  
  sequence:
    
    # The Alexa skill depends on the parameters being saved in this input text.
    - service: input_text.set_value
      data_template:
        entity_id: input_text.alexa_actionable_notification
        value: '{"text": "{{ message }}", "event": "{{ event_id }}", "suppress_confirmation": "{{ suppress_confirmation }}"}'
    
    # Fire off the Alexa skill. Once the user has responded the skill will fire the appropriate event.
    - service: media_player.play_media
      target:
        entity_id: "{{ alexa_device }}"
      data:
        media_content_type: skill
        media_content_id: amzn1.ask.skill.7d2664dc-8458-4ad9-ad3f-93c95c8dae57

#======================#
#     Ceiling Fans     #
#======================#

# Change a ceiling fan speed, including turning it off. This involves asking the user for the fan speed
# and then taking action in the automation that triggers on the actionable notification event ID.
# This is intended to be called by an Alexa routine.
alexa_ask_fan_setting:
  alias: Alexa Ask Fan Setting
  
  sequence:   
    
    # We need to update the last called echo device, because this information is not pushed to us by Alexa.
    # This will in turn update the last alexa sensor.
    - service: alexa_media.update_last_called
    
    # Then we need to wait a bit.
    - delay: 
        milliseconds: "{{ state_attr('sensor.variables', 'variables').last_called_delay }}"
    
    - variables:
        
        # Extract the room from the updated last alexa sensor.
        room: "{{ (states('sensor.last_alexa').split('.')[1]).split('_echo')[0] }}"
        
        # This defines the rooms with ceiling fans.
        fan_rooms: "{{ state_attr('sensor.variables', 'variables').fan_rooms }}"
    
    # Silently ignore any rooms we don't know about.
    - if:
        - "{{ room in fan_rooms }}"
      
      then:
    
        # Save the room so we can target the right echo device when we get the fan setting response.
        - service: input_text.set_value
          target:
            entity_id: input_text.alexa_fan_room
          data:
            value: "{{ room }}"
        
        # Remove any underscores from the room name, so Alexa doesn't sound so dumb.
        - variables:
            friendly_room: "{{ room.replace('_', ' ') }}"
        
        # Ask for the fan setting. The Handle Fan Setting Response automation operates the fan.
        - service: script.activate_alexa_actionable_notification
          data:
            message: "What setting should I use for the {{ friendly_room }} fan"
            event_id: actionable_notification_fan_setting_choice
            alexa_device: "{{ 'media_player.' ~ room ~ '_echo' }}"
            suppress_confirmation: false

#=====================#
#     Room Lights     #
#=====================#

# Toggle a light that lives in a room with an echo device.
# This is intended to be called by an Alexa routine.
alexa_toggle_room_light:
  alias: Alexa Toggle Room Light
  
  sequence:    
    
    # We need to update the last called echo device, because this information is not pushed to us by Alexa.
    # This will in turn update the last alexa sensor.
    - service: alexa_media.update_last_called
    
    # Then we need to wait a bit.
    - delay: 
        milliseconds: "{{ state_attr('sensor.variables', 'variables').last_called_delay }}"
    
    - variables:
        
        # Extract the room from the updated last alexa sensor.
        room: "{{ (states('sensor.last_alexa').split('.')[1]).split('_echo')[0] }}"
        
        # These define the rooms and the lights in those rooms.
        light_rooms: "{{ state_attr('sensor.variables', 'variables').light_rooms }}"
        light_rooms_lights: "{{ state_attr('sensor.variables', 'variables').light_rooms_lights }}"
    
    # Silently ignore any rooms we don't know about.
    - if:
        - "{{ room in light_rooms }}"
      
      then:
        # Toggle the light.
        - service: light.toggle
          target:
            entity_id: "{{ light_rooms_lights[light_rooms.index(room)] }}"
