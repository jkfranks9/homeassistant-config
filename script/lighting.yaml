#============================#
#     Extended Away Mode     #
#============================#

# Turn off extended away mode if Jon returns home early.
turn_off_extended_away_mode:
  alias: Turn Off Extended Away Mode  
  sequence:

    # Continue only if extended away mode is currently on.  
    - condition: state
      entity_id: input_boolean.extended_away_mode
      state: 'on'
    
    # Set the extended away end 2 minutes from now (the extra time is just to make sure the timing satifies my paranoia).
    # This in turn will trigger the Disable Extended Away Mode automation.
    - service: input_datetime.set_datetime
      target:
        entity_id: input_datetime.extended_away_end
      data:
        datetime: "{{ (now() + timedelta(minutes = 2)).strftime('%Y-%m-%d %H:%M:%S') }}"

#=======================================#
#     Turn On Lights Per Conditions     #
#=======================================#

# This determines if it's dark enough to need light based on an ambient light level sensor.
turn_on_lights_per_conditions:
  alias: Turn On Lights Per Conditions
  
  fields:
    light_entity:
      description: The entity ID of the target lights.
      selector:
        entity:
          domain: light
    
    lux_entity:
      description: The ambient light level sensor entity.
      selector:
        entity:
          domain: sensor
    
    min_lux_value:
      description: The minimum ambient light level value.
    
  sequence: 
    
    # Turn on the light if the ambient light sensor is at or below the minimum.
    - if:
        - "{{ states(lux_entity) | float(0) <= min_lux_value | float(0) }}"
    
      then:
        - action: light.turn_on
          target:
            entity_id: "{{ light_entity }}"

#=====================#
#     Smart Bulbs     #
#=====================#
    
# We have power glitches occasionally, which cause all TP-Link smart bulbs to turn on. Here we attempt to
# turn them off if they're not supposed to be on at the moment. This is intended to be called by a voice
# assistant.
reset_smart_bulbs:
  alias: Reset Smart Bulbs
  
  sequence:
    - action: script.reset_smart_bulb_nighttime
      data:
        light_entity: light.master_bedroom_lamp

    - action: script.reset_smart_bulb_lux_sensor
      data:
        light_entity: light.office_lamp
        lux_entity: sensor.office_sensor_ambient_light
        lux_value: "{{ states('input_number.office_ambient_max') | int(0) }}"
          
# Reset a smart bulb based on various sleep/wake modes.
reset_smart_bulb_nighttime:
  alias: Reset Smart Bulb Nighttime
  
  fields:
    light_entity:
      description: 'The light entity to turn off.'

  sequence:
        
    # Perform the reset if nighttime mode is off, or sleeptime mode is on and the bathroom flag is off. 
    # This disables the reset during the time I'm in bed reading, or using the bathroom.
    - or:
      - condition: state
        entity_id: input_boolean.nighttime
        state: 'off'
      - and:
        - condition: state
          entity_id: input_boolean.sleeptime
          state: 'on'
        - condition: state
          entity_id: input_boolean.bathroom
          state: 'off'
    
    - action: light.turn_off
      target:
        entity_id: "{{ light_entity }}"

# Reset a smart bulb based on the ambient light level.
reset_smart_bulb_lux_sensor:
  alias: Reset Smart Bulb Lux Sensor
  
  fields:
    light_entity:
      description: 'The light entity to turn off.'
    
    lux_entity:
      description: 'The ambient light level sensor entity.'
    
    lux_value:
      description: 'The ambient light level sensor value.'

  sequence:
  
    # After a power glitch (or network outage that can simulate a power glitch), it might take some time for
    # the lux sensor entity to be valid, so wait a bit for that to happen. The lux entity updates every 
    # 10 minutes, so wait slightly longer than that.
    - wait_template: "{{ is_number(states(lux_entity)) }}"
      timeout: '00:11:00'
    
    # If the wait completed, check the lux sensor.
    - if:
        - "{{ wait.completed }}"
      
      then:
        - condition: "{{ states(lux_entity) | int(0) > lux_value }}"
        
        - action: light.turn_off
          target:
            entity_id: "{{ light_entity }}"

#==========================#
#     Christmas Lights     #
#==========================#

turn_on_christmas_lights:
  alias: Turn On Christmas Lights

  use_blueprint:
    path: lighting/christmas_lights_operation.yaml
    input:
      operation: 'on'

turn_off_christmas_lights:
  alias: Turn Off Christmas Lights

  use_blueprint:
    path: lighting/christmas_lights_operation.yaml
    input:
      operation: 'off'

#===================#
#     Bath Time     #
#===================#

# Prevent the bath light turning off while taking a bath. Automation with the same name triggers when the timer expires.
start_bath_time:
  alias: Start Bath Time
  
  sequence:
    
    - service: automation.turn_off
      entity_id: automation.run_studio_motion_based_light
    
    - service: timer.start
      data:
        entity_id: timer.bath_time
        duration: '00:45:00'

#======================#
#     Studio Lamps     #
#======================#

# Switch lamps in the studio bedroom.
switch_studio_lamps:
  alias: Switch Studio Lamps
  
  sequence:
    service: light.toggle
    entity_id:
      - light.sarah_s_lamp
      - light.skylar_s_lamp

# Turn the preferred studio lamps on or off.
operate_preferred_studio_lamps:
  alias: Operate Preferred Studio Lamps
  
  fields:
    operation:
      description: Whether to turn the lamp on or off.
      selector:
        select:
          options:
            - 'on'
            - 'off'
  
  sequence:
    - variables:
        preference: "{{ states('input_select.preferred_studio_lamps') }}"
        lamp_entity_list: >
          {% set var = namespace(list = []) %}
          {% if preference in ["Sarah's", 'Both'] %}
            {% set var.list = var.list + ['light.sarah_s_lamp'] %}
          {% endif %}
          {% if preference in ["Skylar's", 'Both'] %}
            {% set var.list = var.list + ['light.skylar_s_lamp'] %}
          {% endif %}
          
          {{ var.list }}
    
    # Perform the operation unless the preference is 'Neither'.
    - if:
        - "{{ lamp_entity_list | length > 0 }}"
      
      then:    
        - action: light.turn_{{ operation }}
          target:
            entity_id: "{{ lamp_entity_list }}"

#========================#
#     Kitchen Lights     #
#========================#

turn_on_kitchen_lights:
  alias: Turn On Kitchen Lights
  
  sequence:
    
    - service: light.turn_on
      entity_id:
        - light.island_light
        - light.sink_light

turn_on_bright_kitchen_lights:
  alias: Turn On Bright Kitchen Lights
  
  sequence:
    
    - service: light.turn_on
      entity_id: light.kitchen_lights

turn_off_kitchen_lights:
  alias: Turn Off Kitchen Lights
  
  sequence:
    
    - service: light.turn_off
      entity_id: light.kitchen_lights

#====================#
#     Fan Lights     #
#====================#

turn_off_fan_light:
  alias: Turn Off Fan Light
  
  fields:
    fan_entity:
      description: Fan entity to be turned off.
  
  sequence:
    
    # Turn off the light if we think it's on, and log it for diagnostics.
    - if:
        - "{{ states(fan_entity) == 'on' }}"
        
      then:
        - action: light.turn_off
          target:
            entity_id: "{{ fan_entity }}"

        - action: system_log.write
          data:
            message: "Turned off {{ fan_entity }}"
            level: debug
