#==========================#
#     Sleep Start/Stop     #
#==========================#

# Prepare for bedtime.
bedtime:
  alias: Bedtime
  sequence:
    
    # Turn on the master bedroom lamp.
    - service: light.turn_on
      entity_id: light.master_bedroom_lamp
      data:
        kelvin: 2700
        brightness_pct: 100
    
    # Turn on nighttime mode.
    - service: input_boolean.turn_on
      entity_id: input_boolean.nighttime

    # Turn off the Family Room AV system.
    - service: script.disable_family_room_av
    
    # Lock the PC.
    - service: script.turn_on
      entity_id: script.lock_pc
      
    - delay: '00:00:07'
      
    # Establish the proper bedtime environment (lights, thermostats, echo devices, smart vents, vacuum).
    - service: script.establish_bedtime_environment
    
    # Turn off Christmas lights if needed.
    - if:
        - "{{ is_state('input_boolean.christmas_mode', 'on') }}"
      
      then:
        - service: light.turn_off
          entity_id: light.all_christmas_lights
    
    # Turn off all fans.
    - scene: scene.fans_off
  
# Going to sleep now.
sleeptime:
  alias: Sleeptime
  sequence:
    
    # Only works during night time.
    - condition: state
      entity_id: input_boolean.nighttime
      state: 'on'
    
    # Turn on sleeptime mode.
    - service: input_boolean.turn_on
      entity_id: input_boolean.sleeptime
    
    # Also, turn off the master bedroom lamp and bath lights.
    - service: light.turn_off
      entity_id: light.master_bedroom_lamp
    - service: light.turn_off
      entity_id: light.master_bath_light

# Turn on the bathroom light during the night.
turn_on_bathroom_light:
  alias: Turn On Bathroom Light
  sequence:
    
    # Only works during sleep time.
    - condition: state
      entity_id: input_boolean.sleeptime
      state: 'on'
    
    # Turn on bathroom flag.
    - service: input_boolean.turn_on
      entity_id: input_boolean.bathroom
    
    # Turn on master bedroom lamp.
    - service: light.turn_on
      entity_id: light.master_bedroom_lamp
      data:
        kelvin: 2700
        brightness_pct: 20
    
    # Turn on bath lights.
    - service: light.turn_on
      entity_id: light.master_bath_light
    
    # Wait a few minutes then turn off the bathroom flag.
    - delay: '00:05:00'
    
    - service: input_boolean.turn_off
      entity_id: input_boolean.bathroom
  
# Awake but still in bed.
awake:
  alias: Awake
  sequence:
    
    # Turn off sleeptime mode.
    - service: input_boolean.turn_off
      entity_id: input_boolean.sleeptime
      
    # Turn on master bedroom lamp if needed.
    - service: script.change_lighting_per_weather
      data:
        light_entity: light.master_bedroom_lamp
        wakeup: true

# I have awoken.
wakeup:
  alias: Wakeup
  sequence:
    
    # Turn off nighttime and sleeptime modes.
    - service: input_boolean.turn_off
      entity_id: input_boolean.nighttime    
    
    - service: input_boolean.turn_off
      entity_id: input_boolean.sleeptime
    
    # Turn on wakeup lights if needed.
    - service: script.change_lighting_per_weather
      data:
        light_entity: light.wakeup_lights
        wakeup: true
    
    # Transition from bedroom to wakeup lights using a delay.
    - delay: '00:00:07'
    
    # Turn off the master bedroom and bath lights.
    - service: light.turn_off
      entity_id: light.master_bedroom_lamp    
    
    - service: light.turn_off
      entity_id: light.master_bath_light
    
    # Turn off the island light after a few minutes (lets me get breakfast).
    - delay: '00:10:00'
    
    - service: light.turn_off
      entity_id: light.island_light

#===========================================#
#     Children-Only Bedtime Environment     #
#===========================================#

# Children-only bedtime environment: this is driven by an automations when children are home without parents.
# The idea is to create the correct lighting environment before my normal bedtime, or after children are asleep.

set_up_children_only_bedtime_environment:
  alias: Set Up Children-Only Bedtime Environment
  
  fields:
    stage:
      description: 'Whether to perform pre-bedtime or post-asleep operation.'
      selector:
        select:
          options:
            - 'pre'
            - 'post'
  
  sequence:
  
    # Verify that only children are home. If we're here after a delay until 8PM, things could have changed.
    - condition: "{{ is_state('binary_sensor.adults_home', 'off') and is_state('binary_sensor.children_home', 'on') }}"
    
    # Pre-bedtime stage: turn on the appropriate bedroom light.
    # NOTE: We don't turn off the downstairs bedroom light if another bedroom is selected, because the downstairs
    # bedroom is home base.
    - if:
        - "{{ stage == 'pre' }}"
    
      then:
    
        # Determine which bedroom will be used.
        - choose:
      
          - conditions:
            - condition: state
              entity_id: input_select.occupied_bedrooms
              state: 'ChildDown'
          
            sequence:
              - service: scene.apply
                data:
                  entities:
                    light.guest_bedroom_lamp:      'off'
                    light.guest_bedroom_lamp_2:    'on'
                    light.upstairs_bedroom_outlet: 'off'
                    light.master_bedroom_lamp:     'off'
      
          - conditions:
            - condition: state
              entity_id: input_select.occupied_bedrooms
              state: 'ChildUp'
          
            sequence:
              - service: scene.apply
                data:
                  entities:
                    light.guest_bedroom_lamp:      'off'
                    light.upstairs_bedroom_outlet: 'on'
                    light.master_bedroom_lamp:     'off'
      
          - conditions:
            - condition: state
              entity_id: input_select.occupied_bedrooms
              state: 'Master'
          
            sequence:
              - service: scene.apply
                data:
                  entities:
                    light.guest_bedroom_lamp:      'off'
                    light.upstairs_bedroom_outlet: 'off'
                    light.master_bedroom_lamp:     'on'
    
      # Post-asleep stage: reset bedroom light and turn on appropriate night light if needed.
      else:
    
        # Determine which bedroom is being used.
        # NOTE: No need to worry about the master because that's handled at bedtime by Establish Bedtime Environment.
        - choose:      
        
          # Downstairs: the night lights here are the daytime lights, which we don't need to touch, so just turn
          # off the bedroom light.
          - conditions:
            - condition: state
              entity_id: input_select.occupied_bedrooms
              state: 'ChildDown'
          
            sequence:
              - service: light.turn_off
                entity_id: light.guest_bedroom_lamp_2
      
          # Upstairs: I'm assuming I'm also using the same bedroom. Turn on the night light, but don't turn off the bedroom
          # light if it's nighttime.
          - conditions:
            - condition: state
              entity_id: input_select.occupied_bedrooms
              state: 'ChildUp'
          
            sequence:
              - service: light.turn_on
                entity_id: light.upstairs_bath_vanity_light
            
              - condition: state
                entity_id: input_boolean.nighttime
                state: 'off'
            
              - service: light.turn_off
                entity_id: light.upstairs_bedroom_outlet

#=============================#
#     Bedtime Environment     #
#=============================#

# Bedtime environment rules (lighting, HVAC, etc) are determined by family members present (adults and children), and by the occupied
# bedrooms. Children in this context means too young to be in complete control of lights and other entities, so we do that here.

establish_bedtime_environment:
  alias: Establish Bedtime Environment
  
  sequence:
          
    # Just me home: turn off everything except the master bedroom lamp. There's no need to bother with any devices.
    - if:
        - condition: state
          entity_id: input_select.occupied_bedrooms
          state: 'None'
      
      then:
        - scene: scene.non_master_lights_out
      
      # Family members are present.
      else:
    
        # Turn off all but bedroom lights.
        - scene: scene.non_bedroom_lights_out
        
        # Determine who is home and which bedrooms are occupied.
        - choose:
          
          # Child only, downstairs.
          - conditions:
            - condition: state
              entity_id: input_select.occupied_bedrooms
              state: 'ChildDown'
            
            sequence:
                    
              # Turn off bedroom lights and turn on night lights.
              - service: scene.apply
                data:
                  entities:
                    light.family_room_lamp:              'on'
                    light.hallway_lamp:                  'on'
                    light.guest_bedroom_lamp:            'off'
                    light.guest_bedroom_lamp_2:          'off'
                    light.upstairs_guest_suite_lights:   'off'
              
              # Set up all the bedtime devices.
              - service: script.set_up_bedroom_devices
                data:
                  bedrooms: 'downstairs'

              # Enter sleep mode upstairs.
              - service: script.set_thermostat_preset
                data:
                  thermostat_entity: climate.upstairs
                  preset: 'Sleep'
          
          # Child only, upstairs.
          - conditions:
            - condition: state
              entity_id: input_select.occupied_bedrooms
              state: 'ChildUp'
            
            sequence:
                    
              # Turn off bedroom lights and turn on night lights.
              - service: scene.apply
                data:
                  entities:
                    light.family_room_lamp:              'off'
                    light.downstairs_guest_suite_lights: 'off'
                    light.upstairs_bath_vanity_light:    'on'
                    light.upstairs_bedroom_light:        'off'
                    light.upstairs_bedroom_outlet:       'off'
              
              # Set up all the bedtime devices.
              - service: script.set_up_bedroom_devices
                data:
                  bedrooms: 'upstairs'
          
          # Child only, master.
          - conditions:
            - condition: state
              entity_id: input_select.occupied_bedrooms
              state: 'Master'
            
            sequence:
                    
              # Turn off bedroom lights and night lights (we turn on the master bath light later as a night light).
              - service: scene.apply
                data:
                  entities:
                    light.family_room_lamp:              'off'
                    light.downstairs_guest_suite_lights: 'off'
                    light.upstairs_guest_suite_lights:   'off'
        
              # Set a temporary temperature hold downstairs.
              - service: script.set_temporary_thermostat_hold
                data:
                  thermostat_entity: climate.downstairs
                  heat_temp: !secret constant_downstairs_home_heat_temp
                  cool_temp: !secret constant_downstairs_home_cool_temp

              # Enter sleep mode upstairs.
              - service: script.set_thermostat_preset
                data:
                  thermostat_entity: climate.upstairs
                  preset: 'Sleep'

              # Mute master bedroom echo device.
              - service: script.turn_on
                entity_id: script.mute_master_bedroom_echo
                
              # Close the upstairs guest bedroom vents.
              - service: script.close_upstairs_br_vents
                
              # Turn on the master bath light as a night light, after a delay.
              - delay: '00:20:00'
              - service: light.turn_on
                entity_id: light.master_bath_light
                  
              # Disable the motion sensor automation, so the light remains on all night.
              - service: automation.turn_off
                entity_id: automation.run_master_bath_motion_based_light
          
          # Adults only, downstairs.
          - conditions:
            - condition: state
              entity_id: input_select.occupied_bedrooms
              state: 'AdultDown'
            
            sequence:
                    
              # Turn off upstairs bedroom lights and downstairs night lights (except the hallway light, which is part of the downstairs suite).
              - service: scene.apply
                data:
                  entities:
                    light.family_room_lamp:              'off'
                    light.upstairs_guest_suite_lights:   'off'
              
              # Set up all the bedtime devices.
              - service: script.set_up_bedroom_devices
                data:
                  bedrooms: 'downstairs'

              # Enter sleep mode upstairs.
              - service: script.set_thermostat_preset
                data:
                  thermostat_entity: climate.upstairs
                  preset: 'Sleep'
          
          # Adults only, upstairs.
          - conditions:
            - condition: state
              entity_id: input_select.occupied_bedrooms
              state: 'AdultUp'
            
            sequence:
                    
              # Turn off downstairs bedroom lights and night lights.
              - service: scene.apply
                data:
                  entities:
                    light.family_room_lamp:              'off'
                    light.downstairs_guest_suite_lights: 'off'
              
              # Set up all the bedtime devices.
              - service: script.set_up_bedroom_devices
                data:
                  bedrooms: 'upstairs'
          
          # Adults only, both.
          - conditions:
            - condition: state
              entity_id: input_select.occupied_bedrooms
              state: 'Both'
            
            sequence:
                    
              # Turn off downstairs night lights (except the hallway light, which is part of the downstairs suite).
              - service: scene.apply
                data:
                  entities:
                    light.family_room_lamp:              'off'
              
              # Set up all the bedtime devices.
              - service: script.set_up_bedroom_devices
                data:
                  bedrooms: 'both'
          
          # Child downstairs, adults upstairs.
          - conditions:
            - condition: state
              entity_id: input_select.occupied_bedrooms
              state: 'ChildDownPlus'
            
            sequence:
                    
              # Turn off downstairs bedroom lights and turn on night lights.
              - service: scene.apply
                data:
                  entities:
                    light.family_room_lamp:              'on'
                    light.hallway_lamp:                  'on'
                    light.guest_bedroom_lamp:            'off'
                    light.guest_bedroom_lamp_2:          'off'
              
              # Set up all the bedtime devices.
              - service: script.set_up_bedroom_devices
                data:
                  bedrooms: 'both'
          
          # Child upstairs, adults downstairs.
          - conditions:
            - condition: state
              entity_id: input_select.occupied_bedrooms
              state: 'ChildUpPlus'
            
            sequence:
                    
              # Turn off upstairs bedroom lights and turn on night lights.
              - service: scene.apply
                data:
                  entities:
                    light.family_room_lamp:              'off'
                    light.upstairs_bath_vanity_light:    'on'
                    light.upstairs_bedroom_light:        'off'
                    light.upstairs_bedroom_outlet:       'off'
              
              # Set up all the bedtime devices.
              - service: script.set_up_bedroom_devices
                data:
                  bedrooms: 'both'

# Set up the various devices required for bedtime:
#
# - set thermostat settings for guest comfort
# - mute appropriate echo devices
# - open or close the upstairs bedroom vents
# - turn off the vacuum automation if needed, so as to not frighten upstairs guests
set_up_bedroom_devices:
  alias: Set Up Bedroom Devices
  
  fields:
    bedrooms:
      description: 'Which bedroom(s) are occupied. We use a short form of the Occupied Bedrooms select for brevity.'
      selector:
        select:
          options:
            - 'downstairs'
            - 'upstairs'
            - 'both'
  
  sequence:
  
    - choose:
      
      # Downstairs bedroom occupied.
      - conditions: "{{ bedrooms == downstairs }}"
      
        sequence:
    
          # Set a temporary temperature hold downstairs.
          - service: script.set_temporary_thermostat_hold
            data:
              thermostat_entity: climate.downstairs
              heat_temp: !secret constant_downstairs_home_heat_temp
              cool_temp: !secret constant_downstairs_home_cool_temp

          # Mute downstairs guest bedroom echo device.
          - service: script.turn_on
            entity_id: script.mute_guest_bedroom_echo
            
          # Close the upstairs guest bedroom vents.
          - service: script.close_upstairs_br_vents
      
      # Upstairs bedroom occupied. We don't change the upstairs thermostat, vents or vacuum here. 
      # That's done once when family members arrive.
      - conditions: "{{ bedrooms == upstairs }}"
      
        sequence:

          # Mute upstairs guest bedroom echo device.
          - service: script.turn_on
            entity_id: script.mute_upstairs_bedroom_echo
        
      # Both bedrooms occupied. We don't change the upstairs thermostat, vents or vacuum here. 
      # That's done once when family members arrive.
      - conditions: "{{ bedrooms == both }}"
      
        sequence:
    
          # Set a temporary temperature hold downstairs.
          - service: script.set_temporary_thermostat_hold
            data:
              thermostat_entity: climate.downstairs
              heat_temp: !secret constant_downstairs_home_heat_temp
              cool_temp: !secret constant_downstairs_home_cool_temp

          # Mute downstairs guest bedroom echo device.
          - service: script.turn_on
            entity_id: script.mute_guest_bedroom_echo

          # Mute upstairs guest bedroom echo device.
          - service: script.turn_on
            entity_id: script.mute_upstairs_bedroom_echo

# Reset the bedtime environment in the morning. This is called by an automation that triggers on the nighttime flag turning off.
reset_bedtime_environment:
  alias: Reset Bedtime Environment
  
  sequence:
    
    # Note that the bedroom echo devices automatically unmute at 9 AM.
    
    # Turn off the upstairs night light if we turned it on at bedtime, and it's light enough.
    # The downstairs night lights (aka daytime lights) are turned off by an automation.
    # Note that if it's still dark, we don't check this light again anywhere. Oh well.
    - if:
        - "{{ states('input_select.occupied_bedrooms') in ['ChildUp', 'ChildUpPlus'] }}"
      
      then:    
        - service: script.change_lighting_per_weather_simple
          data:
            light_entity: light.upstairs_bath_vanity_light
            turn_on: false  
  
    # Turn on all automations that were turned off.
    - service: automation.turn_on
      entity_id:
        - automation.run_master_bath_motion_based_light
    
    # Remove downstairs thermostat hold.
    - service: script.remove_thermostat_hold
      data:
        thermostat_entity: climate.downstairs
        extended: false

#================================================#
#     Modify Lighting Per Weather Conditions     #
#================================================#

# The following scripts turn lights on or off near sunrise or sunset based on weather conditions, 
# which obviously affect indoor lighting levels. See the comments for the change_daytime_lights
# automation for more details.
#
# This script contains the overall logic:
#
# - If the sun is rising, handle sunrise tasks:
#   - If called from the wakeup script, turn lights on if needed
#   - Else, turn lights off as needed
# - Else handle sunset tasks:
#   - Turn lights on as needed
change_lighting_per_weather:
  alias: Change Lighting Per Weather
  
  fields:
    light_entity:
      description: 'The entity ID of the target lights.'
    
    wakeup:
      description: 'Whether or not the caller is the wakeup script.'
      example: false
    
  sequence:
    
    # Evaluate the weather condition and set the result in an input_select.
    - service: script.evaluate_weather_condition   
        
    - variables:
        sun_elevation: "{{ state_attr('sun.sun', 'elevation') }}"
        min_elevation: "{{ states('input_number.min_elevation') }}"
        med_elevation: "{{ states('input_number.min_elevation') }}"
        max_elevation: "{{ states('input_number.max_elevation') }}"
    
    # Perform the appropriate actions based on the caller, sun rising state and weather.
    - if:
        
        # Sun rising
        - "{{ state_attr('sun.sun', 'rising') == true }}"
        
      then:
          
        - if:
                
            # Called for wakeup
            - "{{ wakeup == true }}"
              
          then:
                
            - condition: template
              value_template: >
                {{  sun_elevation <= min_elevation | float(min_elevation) or 
                   (sun_elevation > min_elevation | float(min_elevation) and
                    sun_elevation <= med_elevation | float(med_elevation) and
                    states('input_select.weather_condition') != 'clear') or
                   (sun_elevation > med_elevation | float(med_elevation) and
                    sun_elevation < max_elevation | float(max_elevation) and
                    states('input_select.weather_condition') == 'gloomy') }}
                
            - service: homeassistant.turn_on
              data_template:
                entity_id: "{{ light_entity }}"
              
          # Not called for wakeup
          else:
              
            - condition: template
              value_template: >
                {{ (sun_elevation > min_elevation | float(min_elevation) and
                    states('input_select.weather_condition') == 'clear') or
                   (sun_elevation > med_elevation | float(med_elevation) and
                    states('input_select.weather_condition') == 'hazy') or
                    sun_elevation > max_elevation | float(max_elevation) }}
              
            - service: homeassistant.turn_off
              data_template:
                entity_id: "{{ light_entity }}"
      
      # Sun setting
      else:
        
        - condition: template
          value_template: >
            {{ (sun_elevation < max_elevation | float(max_elevation) and
                states('input_select.weather_condition') == 'gloomy') or
               (sun_elevation < med_elevation | float(med_elevation) and
                states('input_select.weather_condition') == 'hazy') or
                sun_elevation < min_elevation | float(min_elevation) }}
        
        - service: homeassistant.turn_on
          data_template:
            entity_id: "{{ light_entity }}"

#===================================================#
#     Turn On/Off Lights Per Weather Conditions     #
#===================================================#

# This is similar to the above script, but simpler. The idea is to modify 
# lights only if needed based on sun elevation and weather conditions.
change_lighting_per_weather_simple:
  alias: Change Lighting Per Weather Simple
  
  fields:
    light_entity:
      description: 'The entity ID of the target lights.'
    
    turn_on:
      description: 'True if the lights should be turned on.'
      example: false
    
  sequence:
    
    # Evaluate the weather condition and set the result in an input_select.
    - service: script.evaluate_weather_condition  
        
    - variables:
        
        # Note that we're using the effective sun sensor, which allows us to do testing using the
        # testing infrastructure. If we're not testing the sensor reflects the real sun.
        sun_elevation: "{{ state_attr('sensor.effective_sun', 'elevation') }}"
        min_elevation: "{{ states('input_number.min_elevation') }}"
        med_elevation: "{{ states('input_number.min_elevation') }}"
        max_elevation: "{{ states('input_number.max_elevation') }}"
    
    # Perform the appropriate action based on turning on or off, sun rising state and weather.
    - if:
      
        # Turn on lighting.
        - "{{ turn_on == true }}"
        
      then:
          
        - condition: template
          value_template: >
            {{ (sun_elevation < max_elevation | float(max_elevation) and
                states('input_select.weather_condition') == 'gloomy') or
               (sun_elevation < med_elevation | float(med_elevation) and
                states('input_select.weather_condition') == 'hazy') or
                sun_elevation < min_elevation | float(min_elevation) }}
          
        - service: homeassistant.turn_on
          data_template:
            entity_id: "{{ light_entity }}"
      
      # Turn off lighting.
      else:
          
        - condition: template
          value_template: >
            {{ (sun_elevation > min_elevation | float(min_elevation) and
                states('input_select.weather_condition') == 'clear') or
               (sun_elevation > med_elevation | float(med_elevation) and
                states('input_select.weather_condition') == 'hazy') or
                sun_elevation > max_elevation | float(max_elevation) }}
          
        - service: homeassistant.turn_off
          data_template:
            entity_id: "{{ light_entity }}"  

#=====================#
#     Smart Bulbs     #
#=====================#

# Reset (turn off) all smart bulbs after a power outage if the conditions are right.
reset_smart_bulbs:
  alias: Reset Smart Bulbs
  
  sequence:
    
    - service: script.reset_smart_bulb_sky_conditions
      data:
        light_entity: light.family_room_lamp
    
    - service: script.reset_smart_bulb_nighttime
      data:
        light_entity: light.master_bedroom_lamp
    
    - service: script.reset_smart_bulb_lux_sensor
      data:
        light_entity: light.office_lamp
        lux_entity: sensor.office_ambient_light
        lux_value: 300

# Reset a smart bulb based on the sky conditions (sun angle and weather).
reset_smart_bulb_sky_conditions:
  alias: Reset Smart Bulb Sky Conditions
  
  fields:
    light_entity:
      description: 'The light entity to turn off.'

  sequence:
        
    # Evaluate the weather condition and set the result in an input_select.
    - service: script.evaluate_weather_condition  
        
    - variables:
        sun_elevation: "{{ state_attr('sun.sun', 'elevation') }}"
        min_elevation: "{{ states('input_number.min_elevation') }}"
        med_elevation: "{{ states('input_number.min_elevation') }}"
        max_elevation: "{{ states('input_number.max_elevation') }}"
    
    # Use the evaluated weather conditions and sun elevation.
    - condition: template
      value_template: >
        {{ (sun_elevation > min_elevation | float(min_elevation) and
            states('input_select.weather_condition') == 'clear') or
           (sun_elevation > med_elevation | float(med_elevation) and
            states('input_select.weather_condition') == 'hazy') or
            sun_elevation > max_elevation | float(max_elevation) }}
    
    - service: homeassistant.turn_off
      target:
        entity_id: "{{ light_entity }}"

# Reset a smart bulb based on various sleep/wake modes.
reset_smart_bulb_nighttime:
  alias: Reset Smart Bulb Nighttime
  
  fields:
    light_entity:
      description: 'The light entity to turn off.'

  sequence:
        
    # Perform the reset if nighttime mode is off, or sleeptime mode is on and the bathroom flag is off. 
    # This disables the reset during the time I'm in bed reading, or using the bathroom.
    - or:
      - condition: state
        entity_id: input_boolean.nighttime
        state: 'off'
      - and:
        - condition: state
          entity_id: input_boolean.sleeptime
          state: 'on'
        - condition: state
          entity_id: input_boolean.bathroom
          state: 'off'
    
    - service: homeassistant.turn_off
      target:
        entity_id: "{{ light_entity }}"

# Reset a smart bulb based on the ambient light level.
reset_smart_bulb_lux_sensor:
  alias: Reset Smart Bulb Lux Sensor
  
  fields:
    light_entity:
      description: 'The light entity to turn off.'
    
    lux_entity:
      description: 'The ambient light level sensor entity.'
    
    lux_value:
      description: 'The ambient light level sensor value.'

  sequence:
  
    # After a power glitch (or network outage that can simulate a power glitch), it might take some time for
    # the lux sensor entity to be valid, so wait a bit for that to happen. The lux entity updates every 
    # 10 minutes, so wait slightly longer than that.
    - wait_template: "{{ is_number(states(lux_entity)) }}"
      timeout: '00:11:00'
    
    # If the wait completed, check the lux sensor. Otherwise, revert to the next best thing by performing
    # the sky conditions check.
    - if:
        - "{{ wait.completed }}"
      
      then:
        - condition: "{{ states(lux_entity) | int(0) > lux_value }}"
        
        - service: homeassistant.turn_off
          target:
            entity_id: "{{ light_entity }}"
      
      else:
        - service: script.reset_smart_bulb_sky_conditions
          data:
            light_entity: "{{ light_entity }}"

#============================#
#     Family Room Normal     #
#============================#

# Normal family room light attributes. This can be used to ensure the correct lighting.
turn_on_family_room_normal:
  alias: Turn On Family Room Normal
  
  sequence:
    
    - service: light.turn_on
      target:
        entity_id: light.family_room_lamp
      data:
        kelvin: 3125
        brightness_pct: 50

#==================================#
#     Family Room Lamp Rainbow     #
#==================================#

# Ridiculous demo that I'm keeping because my granddaughter might like it :)
start_rainbow:
  alias: Start Rainbow
  
  sequence:
    - alias: Repeat Rainbow
      
      repeat:
        while: "{{ repeat.index <= 30 }}"
        
        sequence:
          
          - service: input_select.select_next
            entity_id: input_select.rainbow_colors
          
          - service: light.turn_on
            entity_id: light.family_room_lamp
            data_template:
              brightness_pct: 100
              color_name: "{{ states('input_select.rainbow_colors') }}"
          
          - delay: '00:00:02'
    
    - service: script.turn_on_family_room_normal
    
    - service: light.turn_off
      entity_id: light.family_room_lamp

#==========================#
#     Christmas Lights     #
#==========================#

turn_on_christmas_lights:
  alias: Turn On Christmas Lights
  
  sequence:
    
    - condition: state
      entity_id: input_boolean.christmas_mode
      state: 'on'
    
    - if:
      - "{{ state_attr('sun.sun', 'elevation') | float(0) <= states('input_number.min_elevation') | float(0) }}"
    
      then:    
        - service: light.turn_on
          entity_id: light.all_christmas_lights
    
      else:    
        - service: light.turn_on
          entity_id: light.indoor_christmas_lights

turn_off_christmas_lights:
  alias: Turn Off Christmas Lights
  
  sequence:
    
    - condition: state
      entity_id: input_boolean.christmas_mode
      state: 'on'
    
    - service: light.turn_off
      entity_id: light.all_christmas_lights

#===========================#
#     Light Group Popup     #
#===========================#

popup_light_group:
  alias: Popup Light Group
  
  sequence:
    
    - service: browser_mod.popup
      data_template:
        browser_id: "{{ browser_id }}"
        title: "{{ state_attr(light_group, 'friendly_name') }}"
        content:
          type: entities
          show_header_toggle: true
          entities: "{{ expand(light_group) | map(attribute = 'entity_id') | list }}"

#===================#
#     Bath Time     #
#===================#

# Prevent the bath light turning off while taking a bath. Automation with the same name triggers when the timer expires.
start_bath_time:
  alias: Start Bath Time
  
  sequence:
    
    - service: automation.turn_off
      entity_id: automation.run_guest_bath_motion_based_light
    
    - service: timer.start
      data:
        entity_id: timer.bath_time
        duration: '00:45:00'

#==============================#
#     Lighting Convenience     #
#==============================#

# Used mostly via Alexa.

turn_on_light:
  alias: Turn On Light
  
  use_blueprint:
    path: lighting/light_operation.yaml
    input:
      operation: true

turn_off_light:
  alias: Turn Off Light
  
  use_blueprint:
    path: lighting/light_operation.yaml
    input:
      operation: false
