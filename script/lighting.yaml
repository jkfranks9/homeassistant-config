#==========================#
#     Sleep Start/Stop     #
#==========================#

# Prepare for bedtime.
bedtime:
  alias: Bedtime
  sequence:
    
    # Turn on the master bedroom lamp.
    - service: light.turn_on
      entity_id: light.master_bedroom_lamp
      data:
        kelvin: 2700
        brightness_pct: 100
    
    # Turn on nighttime mode.
    - service: input_boolean.turn_on
      entity_id: input_boolean.nighttime

    # Turn off the Family Room AV system.
    - service: script.disable_family_room_av
    
    # Lock the PC.
    - service: script.turn_on
      entity_id: script.lock_pc
    
    # Say something nice.
    - service: notify.alexa_media
      data:
        message: "{{ ['Good night!', 
                      'Pleasant dreams!',
                      'See you in the morning!'
                     ] | random }}"
        target:
          - media_player.master_bedroom_echo
        data:
          type: tts
      
    - delay: '00:00:07'
      
    # Establish the proper bedtime environment (lights, thermostats, echo devices, smart vents, vacuum).
    - service: script.establish_bedtime_environment
    
    # Turn off all fans.
    - scene: scene.fans_off
  
# Going to sleep now.
sleeptime:
  alias: Sleeptime
  sequence:
    
    # Only works during night time.
    - condition: state
      entity_id: input_boolean.nighttime
      state: 'on'
    
    # Turn on sleeptime mode.
    - service: input_boolean.turn_on
      entity_id: input_boolean.sleeptime
    
    # Also, turn off the master bedroom lamp and bath lights.
    - service: light.turn_off
      entity_id: light.master_bedroom_lamp
    - service: light.turn_off
      entity_id: light.master_bath_light

# Turn on the bathroom light during the night.
turn_on_bathroom_light:
  alias: Turn On Bathroom Light
  sequence:
    
    # Only works during sleep time.
    - condition: state
      entity_id: input_boolean.sleeptime
      state: 'on'
    
    # Turn on bathroom flag.
    - service: input_boolean.turn_on
      entity_id: input_boolean.bathroom
    
    # Turn on master bedroom lamp.
    - service: light.turn_on
      entity_id: light.master_bedroom_lamp
      data:
        kelvin: 2700
        brightness_pct: 20
    
    # Turn on bath lights.
    - service: light.turn_on
      entity_id: light.master_bath_light
    
    # Wait a few minutes then turn off the bathroom flag.
    - delay: '00:05:00'
    
    - service: input_boolean.turn_off
      entity_id: input_boolean.bathroom
  
# Awake but still in bed.
awake:
  alias: Awake
  sequence:
    
    # Turn off sleeptime mode.
    - service: input_boolean.turn_off
      entity_id: input_boolean.sleeptime
      
    # Turn on master bedroom lamp if needed.
    - service: script.change_lighting_per_weather
      data:
        light_entity: light.master_bedroom_lamp
        wakeup: true

# I have awoken.
wakeup:
  alias: Wakeup
  sequence:
    
    # Turn off nighttime and sleeptime modes.
    - service: input_boolean.turn_off
      entity_id: input_boolean.nighttime    
    
    - service: input_boolean.turn_off
      entity_id: input_boolean.sleeptime
    
    # Turn on wakeup lights if needed.
    - service: script.change_lighting_per_weather
      data:
        light_entity: light.wakeup_lights
        wakeup: true
    
    # Transition from bedroom to wakeup lights using a delay.
    - delay: '00:00:07'
    
    # Turn off the master bedroom and bath lights.
    - service: light.turn_off
      entity_id: light.master_bedroom_lamp    
    
    - service: light.turn_off
      entity_id: light.master_bath_light
    
    # Turn off the island light after a few minutes (lets me get breakfast).
    - delay: '00:10:00'
    
    - service: light.turn_off
      entity_id: light.island_light

#=================================#
#     Pre-Bedtime Environment     #
#=================================#

# Pre-Bedtime environment: this is driven by an automation with the same name when the occupied bedrooms select is changed,
# and children are home without parents. The idea is to create the correct lighting environment before my normal bedtime.

set_up_pre_bedtime_environment:
  alias: Set up Pre-bedtime Environment
  
  variables:
    
    # This is the time in minutes between now and 8 PM. If we run before that time, we delay until then to do anything.
    evening_delta: >
      {% set evening = as_timestamp(now().today().replace(hour=20, minute=0, second=0, microsecond=0)) %}
      {% set current = as_timestamp(now().today().replace(microsecond=0)) %}
      {{ ((evening - current) / 60) | round(0) }}

  fields:
    target_bedroom:
      description: 'The target occupied bedroom.'
      example: 'Master'
  
  sequence:
    
    # Delay until 8 PM if needed.
    - if:
        - condition: template
          value_template: "{{ evening_delta > 0 }}"
        
      then:
        - delay:
            minutes: "{{ evening_delta }}"
    
    # Determine which bedroom will be used. The default is the downstairs guest bedroom, which is already set up.
    - choose:
      
      # Master: turn on master bedroom lamp and turn off downstairs guest bedroom lights.
      - conditions:
        - condition: template
          value_template: "{{ target_bedroom == 'Master' }}"
        
        sequence:
          - service: light.turn_on
            entity_id: light.master_bedroom_lamp
          
          - service: light.turn_off
            entity_id:
              - light.guest_bedroom_lamp
              - light.guest_bedroom_lamp_2
      
      # Upstairs guest: turn on upstairs guest bedroom lamp and turn off downstairs guest bedroom lights.
      - conditions:
        - condition: template
          value_template: "{{ target_bedroom == 'Upstairs' }}"
        
        sequence:
          - service: light.turn_on
            entity_id: light.upstairs_bedroom_outlet
          
          - service: light.turn_off
            entity_id:
              - light.guest_bedroom_lamp
              - light.guest_bedroom_lamp_2

#=============================#
#     Bedtime Environment     #
#=============================#

# Bedtime environment rules (lighting, HVAC, etc) are determined by family members present (adults and children), and by the occupied
# bedrooms. Children in this context means too young to be in complete control of lights and other entities, so we do that here.

establish_bedtime_environment:
  alias: Establish Bedtime Environment
  
  sequence:
    
    # Determine who is home.
    - choose:
      
      # Adults home (with or without children).
      - conditions:
        - condition: state
          entity_id: input_boolean.adults_home
          state: 'on'
        
        sequence:
          
          # Turn off all but bedroom lights.
          - scene: scene.adult_bedtime_lights_out
          
          # Determine which bedrooms are occupied.
          - choose:
            
            # Downstairs only
            - conditions:
              - condition: state
                entity_id: input_select.occupied_bedrooms
                state: 'Downstairs'
              
              sequence:
                
                # Turn off upstairs bedroom lights.
                - service: light.turn_off
                  entity_id: light.upstairs_guest_suite_lights
    
                # Set a temporary temperature hold downstairs.
                - service: script.set_temporary_thermostat_hold
                  data:
                    thermostat_entity: climate.downstairs
                    heat_temp: !secret constant_downstairs_home_heat_temp
                    cool_temp: !secret constant_downstairs_home_cool_temp
    
                # Enter sleep mode upstairs.
                - service: script.set_thermostat_preset
                  data:
                    thermostat_entity: climate.upstairs
                    preset: 'Sleep'
    
                # Mute downstairs guest bedroom echo device.
                - service: script.turn_on
                  entity_id: script.mute_guest_bedroom_echo
                
                # Close the upstairs guest bedroom vents.
                - service: script.close_upstairs_br_vents
            
            # Upstairs only
            - conditions:
              - condition: state
                entity_id: input_select.occupied_bedrooms
                state: 'Upstairs'
              
              sequence:
                
                # Turn off downstairs bedroom lights.
                - service: light.turn_off
                  entity_id: light.downstairs_guest_suite_lights
    
                # Enter sleep mode downstairs.
                - service: script.set_thermostat_preset
                  data:
                    thermostat_entity: climate.downstairs
                    preset: 'Sleep'
    
                # Set a temporary temperature hold upstairs.
                - service: script.set_temporary_thermostat_hold
                  data:
                    thermostat_entity: climate.upstairs
                    heat_temp: "{{ state_attr('climate.upstairs', 'target_temp_low') }}"
                    cool_temp: "{{ state_attr('climate.upstairs', 'target_temp_high') }}"
    
                # Mute upstairs guest bedroom echo device.
                - service: script.turn_on
                  entity_id: script.mute_upstairs_bedroom_echo
                
                # Open the upstairs guest bedroom vents.
                - service: script.open_upstairs_br_vents
                
                # Turn off the vacuum automation.
                - service: automation.turn_off
                  entity_id: automation.start_vacuum
            
            # Both occupied
            - conditions:
              - condition: state
                entity_id: input_select.occupied_bedrooms
                state: 'Both'
              
              sequence:
    
                # Set a temporary temperature hold downstairs.
                - service: script.set_temporary_thermostat_hold
                  data:
                    thermostat_entity: climate.downstairs
                    heat_temp: !secret constant_downstairs_home_heat_temp
                    cool_temp: !secret constant_downstairs_home_cool_temp
    
                # Set a temporary temperature hold upstairs.
                - service: script.set_temporary_thermostat_hold
                  data:
                    thermostat_entity: climate.upstairs
                    heat_temp: "{{ state_attr('climate.upstairs', 'target_temp_low') }}"
                    cool_temp: "{{ state_attr('climate.upstairs', 'target_temp_high') }}"
    
                # Mute downstairs guest bedroom echo device.
                - service: script.turn_on
                  entity_id: script.mute_guest_bedroom_echo
    
                # Mute upstairs guest bedroom echo device.
                - service: script.turn_on
                  entity_id: script.mute_upstairs_bedroom_echo
                
                # Open the upstairs guest bedroom vents.
                - service: script.open_upstairs_br_vents
                
                # Turn off the vacuum automation.
                - service: automation.turn_off
                  entity_id: automation.start_vacuum
            
            # Should not occur.
            default:
              
              - service: system_log.write
                data:
                  message: "Occupied bedrooms invalid value ({{ states('input_select.occupied_bedrooms') }})"
                  level: error
      
      # Children home (without adults).
      - conditions:
        - condition: template
          value_template: "{{ is_state('input_boolean.adults_home', 'off') and is_state('input_boolean.children_home', 'on') }}"
        
        sequence:
          
          # Turn off all but night lights.
          - scene: scene.child_bedtime_lights_out
          
          # Determine which bedrooms are occupied.
          - choose:
            
            # Master
            - conditions:
              - condition: state
                entity_id: input_select.occupied_bedrooms
                state: 'Master'
              
              sequence:
                
                # Turn off all normal night lights (we turn on the master bath light later as a night light).
                - service: scene.apply
                  data:
                    entities:
                      light.hallway_lamp:               'off'
                      light.family_room_lamp:           'off'
                      light.upstairs_bath_vanity_light: 'off'
    
                # Set a temporary temperature hold downstairs.
                - service: script.set_temporary_thermostat_hold
                  data:
                    thermostat_entity: climate.downstairs
                    heat_temp: !secret constant_downstairs_home_heat_temp
                    cool_temp: !secret constant_downstairs_home_cool_temp
    
                # Enter sleep mode upstairs.
                - service: script.set_thermostat_preset
                  data:
                    thermostat_entity: climate.upstairs
                    preset: 'Sleep'
    
                # Mute master bedroom echo device.
                - service: script.turn_on
                  entity_id: script.mute_master_bedroom_echo
                
                # Close the upstairs guest bedroom vents.
                - service: script.close_upstairs_br_vents
                
                # Turn on the master bath light as a night light, after a delay.
                - delay: '00:20:00'
                - service: light.turn_on
                  entity_id: light.master_bath_light
                  
                # Disable the motion sensor automation, so the light remains on all night.
                - service: automation.turn_off
                  entity_id: automation.run_master_bath_motion_based_light
                  
            
            # Downstairs only
            - conditions:
              - condition: state
                entity_id: input_select.occupied_bedrooms
                state: 'Downstairs'
              
              sequence:
                
                # Turn off upstairs night lights, and turn on downstairs night lights.
                - service: scene.apply
                  data:
                    entities:
                      light.hallway_lamp:               'on'
                      light.family_room_lamp:           'on'
                      light.upstairs_bath_vanity_light: 'off'
    
                # Set a temporary temperature hold downstairs.
                - service: script.set_temporary_thermostat_hold
                  data:
                    thermostat_entity: climate.downstairs
                    heat_temp: !secret constant_downstairs_home_heat_temp
                    cool_temp: !secret constant_downstairs_home_cool_temp
    
                # Enter sleep mode upstairs.
                - service: script.set_thermostat_preset
                  data:
                    thermostat_entity: climate.upstairs
                    preset: 'Sleep'
    
                # Mute downstairs guest bedroom echo device.
                - service: script.turn_on
                  entity_id: script.mute_guest_bedroom_echo
                
                # Close the upstairs guest bedroom vents.
                - service: script.close_upstairs_br_vents
            
            # Upstairs only
            - conditions:
              - condition: state
                entity_id: input_select.occupied_bedrooms
                state: 'Upstairs'
              
              sequence:
                
                # Turn off downstairs night lights, and turn on upstairs night lights.
                - service: scene.apply
                  data:
                    entities:
                      light.hallway_lamp:               'off'
                      light.family_room_lamp:           'off'
                      light.upstairs_bath_vanity_light: 'on'
    
                # Enter sleep mode downstairs.
                - service: script.set_thermostat_preset
                  data:
                    thermostat_entity: climate.downstairs
                    preset: 'Sleep'
    
                # Set a temporary temperature hold upstairs.
                - service: script.set_temporary_thermostat_hold
                  data:
                    thermostat_entity: climate.upstairs
                    heat_temp: !secret constant_upstairs_home_heat_temp
                    cool_temp: !secret constant_upstairs_home_cool_temp
    
                # Mute upstairs guest bedroom echo device.
                - service: script.turn_on
                  entity_id: script.mute_upstairs_bedroom_echo
                
                # Open the upstairs guest bedroom vents.
                - service: script.open_upstairs_br_vents
                
                # Turn off the vacuum automation.
                - service: automation.turn_off
                  entity_id: automation.start_vacuum
            
            # Both occupied
            - conditions:
              - condition: state
                entity_id: input_select.occupied_bedrooms
                state: 'Both'
              
              sequence:
                
                # Turn on all night lights.
                - service: scene.apply
                  data:
                    entities:
                      light.hallway_lamp:               'on'
                      light.family_room_lamp:           'on'
                      light.upstairs_bath_vanity_light: 'on'
    
                # Set a temporary temperature hold downstairs.
                - service: script.set_temporary_thermostat_hold
                  data:
                    thermostat_entity: climate.downstairs
                    heat_temp: !secret constant_downstairs_home_heat_temp
                    cool_temp: !secret constant_downstairs_home_cool_temp
    
                # Set a temporary temperature hold upstairs.
                - service: script.set_temporary_thermostat_hold
                  data:
                    thermostat_entity: climate.upstairs
                    heat_temp: !secret constant_upstairs_home_heat_temp
                    cool_temp: !secret constant_upstairs_home_cool_temp
    
                # Mute downstairs guest bedroom echo device.
                - service: script.turn_on
                  entity_id: script.mute_guest_bedroom_echo
    
                # Mute upstairs guest bedroom echo device.
                - service: script.turn_on
                  entity_id: script.mute_upstairs_bedroom_echo
                
                # Open the upstairs guest bedroom vents.
                - service: script.open_upstairs_br_vents
                
                # Turn off the vacuum automation.
                - service: automation.turn_off
                  entity_id: automation.start_vacuum
            
            # Should not occur.
            default:
              
              - service: system_log.write
                data:
                  message: "Occupied bedrooms invalid value ({{ states('input_select.occupied_bedrooms') }})"
                  level: error
      
      # Just me home: turn off everything except the master bedroom lamp.
      default:
        
        - scene: scene.non_master_lights_out

# Reset the bedtime environment in the morning. This is called by an automation that triggers on the nighttime flag turning off.
reset_bedtime_environment:
  alias: Reset Bedtime Environment
  
  sequence:
    
    # Note that the bedroom echo devices automatically unmute at 9 AM.
    
    # Turn off the upstairs night light if it's light enough. The downstairs night lights (aka daytime lights) are turned off by an automation.
    # Note that if it's still dark, we don't check this light again anywhere. Oh well.
    - service: script.change_lighting_per_weather_simple
      data:
        light_entity: light.upstairs_bath_vanity_light
        turn_on: false  
  
    # Turn on all automations that were turned off.
    - service: automation.turn_on
      entity_id: 
        - automation.start_vacuum
        - automation.run_master_bath_motion_based_light
    
    # Remove thermostat holds.
    - service: script.remove_thermostat_hold
      data:
        thermostat_entity: climate.downstairs
        extended: false
    
    - service: script.remove_thermostat_hold
      data:
        thermostat_entity: climate.upstairs
        extended: false
    
    # Close the upstairs guest bedroom vents if the room is unoccupied. If it is occupied the vents will be closed by an automation
    # when family members leave.
    - condition: template
      value_template: "{{ not is_state('input_select.occupied_bedrooms', 'Upstairs') and not is_state('input_select.occupied_bedrooms', 'Both') }}"
    
    - service: script.close_upstairs_br_vents

#================================================#
#     Modify Lighting Per Weather Conditions     #
#================================================#

# The following scripts turn lights on or off near sunrise or sunset based on weather conditions, 
# which obviously affect indoor lighting levels. See the comments for the change_daytime_lights
# automation for more details.
#
# This script contains the overall logic:
#
# - If the sun is rising, handle sunrise tasks:
#   - If called from the wakeup script, turn lights on if needed
#   - Else, turn lights off as needed
# - Else handle sunset tasks:
#   - Turn lights on as needed
change_lighting_per_weather:
  alias: Change Lighting Per Weather
  
  fields:
    light_entity:
      description: 'The entity ID of the target lights.'
    
    wakeup:
      description: 'Whether or not the caller is the wakeup script.'
      example: false
    
  sequence:
    
    # Evaluate the weather condition and set the result in an input_select.
    - service: script.evaluate_weather_condition
    
    # Perform the appropriate actions based on the caller, sun rising state and weather.
    - if:
        
        # Sun rising
        - condition: template
          value_template: "{{ state_attr('sun.sun', 'rising') == true }}"
        
      then:
          
        - if:
                
            # Called for wakeup
            - condition: template
              value_template: "{{ wakeup == true }}"
              
          then:
                
            - condition: template
              value_template: >
                {{  state_attr('sun.sun', 'elevation') <= (states('input_number.min_elevation') | float(3)) or 
                   (state_attr('sun.sun', 'elevation') > (states('input_number.min_elevation') | float(3)) and
                    state_attr('sun.sun', 'elevation') <= (states('input_number.med_elevation') | float(6)) and
                    states('input_select.weather_condition') != 'clear') or
                   (state_attr('sun.sun', 'elevation') > (states('input_number.med_elevation') | float(6)) and
                    state_attr('sun.sun', 'elevation') < (states('input_number.max_elevation') | float(9)) and
                    states('input_select.weather_condition') == 'gloomy') }}
                
            - service: homeassistant.turn_on
              data_template:
                entity_id: "{{ light_entity }}"
              
          # Not called for wakeup
          else:
              
            - condition: template
              value_template: >
                {{ (state_attr('sun.sun', 'elevation') > (states('input_number.min_elevation') | float(3)) and
                    states('input_select.weather_condition') == 'clear') or
                   (state_attr('sun.sun', 'elevation') > (states('input_number.med_elevation') | float(6)) and
                    states('input_select.weather_condition') == 'hazy') or
                    state_attr('sun.sun', 'elevation') > (states('input_number.max_elevation') | float(9)) }}
              
            - service: homeassistant.turn_off
              data_template:
                entity_id: "{{ light_entity }}"
      
      # Sun setting
      else:
        
        - condition: template
          value_template: >
            {{ (state_attr('sun.sun', 'elevation') < (states('input_number.max_elevation') | float(9)) and
                states('input_select.weather_condition') == 'gloomy') or
               (state_attr('sun.sun', 'elevation') < (states('input_number.med_elevation') | float(6)) and
                states('input_select.weather_condition') == 'hazy') or
                state_attr('sun.sun', 'elevation') < (states('input_number.min_elevation') | float(3)) }}
        
        - service: homeassistant.turn_on
          data_template:
            entity_id: "{{ light_entity }}"

#===================================================#
#     Turn On/Off Lights Per Weather Conditions     #
#===================================================#

# This is similar to the above script, but simpler. The idea is to modify 
# lights only if needed based on sun elevation and weather conditions.
change_lighting_per_weather_simple:
  alias: Change Lighting Per Weather Simple
  
  fields:
    light_entity:
      description: 'The entity ID of the target lights.'
    
    turn_on:
      description: 'True if the lights should be turned on.'
      example: false
    
  sequence:
    
    # Evaluate the weather condition and set the result in an input_select.
    - service: script.evaluate_weather_condition
    
    # Perform the appropriate action based on turning on or off, sun rising state and weather.
    - if:
      
        # Turn on lighting.
        - condition: template
          value_template: "{{ turn_on == true }}"
        
      then:
          
        - condition: template
          value_template: >
            {{ (state_attr('sun.sun', 'elevation') < (states('input_number.max_elevation') | float(9)) and
                states('input_select.weather_condition') == 'gloomy') or
               (state_attr('sun.sun', 'elevation') < (states('input_number.med_elevation') | float(6)) and
                states('input_select.weather_condition') == 'hazy') or
                state_attr('sun.sun', 'elevation') < (states('input_number.min_elevation') | float(3)) }}
          
        - service: homeassistant.turn_on
          data_template:
            entity_id: "{{ light_entity }}"
      
      # Turn off lighting.
      else:
          
        - condition: template
          value_template: >
            {{ (state_attr('sun.sun', 'elevation') > (states('input_number.min_elevation') | float(3)) and
                states('input_select.weather_condition') == 'clear') or
               (state_attr('sun.sun', 'elevation') > (states('input_number.med_elevation') | float(6)) and
                states('input_select.weather_condition') == 'hazy') or
                state_attr('sun.sun', 'elevation') > (states('input_number.max_elevation') | float(9)) }}
          
        - service: homeassistant.turn_off
          data_template:
            entity_id: "{{ light_entity }}"    

#==============================#
#     Extended Away Lights     #
#==============================#

# Randomly turn certain lights on/off during extended away mode, between ~sunset and nighttime start, and
# between nighttime end and ~sunrise (only occurs during winter-ish months).
#
# This is driven by an automation with the same conditions as the 'until' clause, so coordinate changes to both.
automate_lights_while_away:
  alias: Automate Lights While Away
  
  sequence:
    
    # Repeat until the conditions are no longer met.
    repeat:
      
      sequence:
        
        - variables:
            group_id: 'light.away_lights'
            max_on: 3
            lights_on_count: "{{ expand(group_id) | selectattr('state', 'eq', 'on') | list | length }}"
            lights_on_entities: "{{ expand(group_id) | selectattr('state', 'eq', 'on') | map(attribute = 'entity_id') | list }}"
            group_lights_entities: "{{ expand(group_id) | map(attribute = 'entity_id') | list }}"
            toggle_entity: >
              {% if lights_on_count > max_on %}
                {{ lights_on_entities | random }}
              {% else %}
                {{ group_lights_entities | random }}
              {% endif %}
        
        # Log information needed to debug.
        - service: system_log.write
          data:
            message: "Extended away lights on: {{lights_on_entities}}, next to be toggled: {{toggle_entity}}"
            level: debug
        
        # Toggle a random light from the away group. We picked an entity above as follows:
        #
        # - If the number of lights currently on exceeds the maximum, pick an entity from those that are already on.
        # - Otherwise, pick any entity from the away group.
        - service: homeassistant.toggle
          data:
            entity_id: "{{ toggle_entity }}"
     
        # Delay for a random number of minutes.
        - delay: 
            minutes: "{{ range(10, 60) | random }}"
      
      # Conditions that cause us to end the repeat sequence.
      until:
        
        - condition: template
          value_template: >
            {{ is_state('input_boolean.extended_away_mode', 'off') or
               is_state('input_boolean.nighttime', 'on') or
               states('sun.sun') == 'above_horizon' }}

#=====================#
#     Smart Bulbs     #
#=====================#

# Reset (turn off) all smart bulbs after a power outage if the conditions are right.
reset_smart_bulbs:
  alias: Reset Smart Bulbs
  
  sequence:
    
    - service: script.reset_smart_bulb_sky_conditions
      data:
        light_entity: light.family_room_lamp
    
    - service: script.reset_smart_bulb_nighttime
      data:
        light_entity: light.master_bedroom_lamp
    
    - service: script.reset_smart_bulb_lux_sensor
      data:
        light_entity: light.office_lamp
        lux_entity: sensor.office_ambient_light
        lux_value: 300

# Reset a smart bulb based on the sky conditions (sun angle and weather).
reset_smart_bulb_sky_conditions:
  alias: Reset Smart Bulb Sky Conditions
  
  fields:
    light_entity:
      description: 'The light entity to turn off.'

  sequence:
        
    # Evaluate the weather condition and set the result in an input_select.
    - service: script.evaluate_weather_condition
    
    # Use the evaluated weather conditions and sun elevation.
    - condition: template
      value_template: >
        {{ (state_attr('sun.sun', 'elevation') > (states('input_number.min_elevation') | float(3)) and
            states('input_select.weather_condition') == 'clear') or
           (state_attr('sun.sun', 'elevation') > (states('input_number.med_elevation') | float(6)) and
            states('input_select.weather_condition') == 'hazy') or
            state_attr('sun.sun', 'elevation') > (states('input_number.max_elevation') | float(9)) }}
    
    - service: homeassistant.turn_off
      target:
        entity_id: "{{ light_entity }}"

# Reset a smart bulb based on various sleep/wake modes.
reset_smart_bulb_nighttime:
  alias: Reset Smart Bulb Nighttime
  
  fields:
    light_entity:
      description: 'The light entity to turn off.'

  sequence:
        
    # Perform the reset if nighttime mode is off, or sleeptime mode is on and the bathroom flag is off. 
    # This disables the reset during the time I'm in bed reading, or using the bathroom.
    - or:
      - condition: state
        entity_id: input_boolean.nighttime
        state: 'off'
      - and:
        - condition: state
          entity_id: input_boolean.sleeptime
          state: 'on'
        - condition: state
          entity_id: input_boolean.bathroom
          state: 'off'
    
    - service: homeassistant.turn_off
      target:
        entity_id: "{{ light_entity }}"

# Reset a smart bulb based on the ambient light level.
reset_smart_bulb_lux_sensor:
  alias: Reset Smart Bulb Lux Sensor
  
  fields:
    light_entity:
      description: 'The light entity to turn off.'
    
    lux_entity:
      description: 'The ambient light level sensor entity.'
    
    lux_value:
      description: 'The ambient light level sensor value.'

  sequence:
  
    # After a power glitch (or network outage that can simulate a power glitch), it might take some time for
    # the lux sensor entity to be valid, so wait a bit for that to happen. The lux entity updates every 
    # 10 minutes, so wait slightly longer than that.
    - wait_template: "{{ is_number(states(lux_entity)) }}"
      timeout: '00:11:00'
    
    # If the wait completed, check the lux sensor. Otherwise, revert to the next best thing by performing
    # the sky conditions check.
    - if:
        - "{{ wait.completed }}"
      then:
        - condition: template
          value_template: "{{ states(lux_entity) > lux_value }}"
        
        - service: homeassistant.turn_off
          target:
            entity_id: "{{ light_entity }}"
      else:
        - service: script.reset_smart_bulb_sky_conditions
          data:
            light_entity: "{{ light_entity }}"

#============================#
#     Family Room Normal     #
#============================#

# Normal family room light attributes. This can be used to ensure the correct lighting.
turn_on_family_room_normal:
  alias: Turn On Family Room Normal
  
  sequence:
    
    - service: light.turn_on
      target:
        entity_id: light.family_room_lamp
      data:
        kelvin: 3125
        brightness_pct: 50

#==================================#
#     Family Room Lamp Rainbow     #
#==================================#

# Ridiculous demo that I'm keeping because my granddaughter might like it :)
start_rainbow:
  alias: Start Rainbow
  
  sequence:
    - alias: Repeat Rainbow
      
      repeat:
        while:
          - condition: template
            value_template: "{{ repeat.index <= 30 }}"
        
        sequence:
          
          - service: input_select.select_next
            entity_id: input_select.rainbow_colors
          
          - service: light.turn_on
            entity_id: light.family_room_lamp
            data_template:
              brightness_pct: 100
              color_name: "{{ states('input_select.rainbow_colors') }}"
          
          - delay: '00:00:02'
    
    - service: script.turn_on_family_room_normal
    
    - service: light.turn_off
      entity_id: light.family_room_lamp

#==========================#
#     Christmas Lights     #
#==========================#

turn_on_christmas_lights:
  alias: Turn On Christmas Lights
  
  sequence:
    
    - condition: state
      entity_id: input_boolean.christmas_mode
      state: 'on'
    
    - scene: scene.christmas_lights_on

turn_off_christmas_lights:
  alias: Turn Off Christmas Lights
  
  sequence:
    
    - condition: state
      entity_id: input_boolean.christmas_mode
      state: 'on'
    
    - scene: scene.christmas_lights_off

#===========================#
#     Light Group Popup     #
#===========================#

popup_light_group:
  alias: Popup Light Group
  
  sequence:
    
    - service: browser_mod.popup
      data_template:
        browser_id: "{{ browser_id }}"
        title: "{{ state_attr(light_group, 'friendly_name') }}"
        content:
          type: entities
          show_header_toggle: true
          entities: "{{ expand(light_group) | map(attribute = 'entity_id') | list }}"

#===================#
#     Bath Time     #
#===================#

# Prevent the bath light turning off while taking a bath.
start_bath_time:
  alias: Start Bath Time
  
  sequence:
    
    - service: automation.turn_off
      entity_id: automation.run_guest_bath_motion_based_light

stop_bath_time:
  alias: Stop Bath Time
  
  sequence:
    
    - service: automation.turn_on
      entity_id: automation.run_guest_bath_motion_based_light
