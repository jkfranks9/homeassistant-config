#==================#
#     Workout      #
#==================#

# This is driven by a voice assistant. The daily time can also be set manually using the dashboard.
set_workout_daily_time:
  alias: Set Workout Daily Time
  
  sequence:
    
    # Set the workout time based on the current constant value.
    - action: input_number.set_value
      target:
        entity_id: input_number.workout_daily_time
      data:
        value: "{{ states('input_number.variables_workout_time') }}"

#==========================#
#     Exercise Metrics     #
#==========================#

# Here we use the daily exercise time/calories values to update the weekly and monthly metrics. This is called when any exercise
# type is performed, after the corresponding daily values have been set.
#
# We also record and log the exercise type for insurance purposes if the time or steps meets daily goals.
#
# NOTE: We depend on the weekly and monthly values being reset as needed, so we can start with fresh (0) values at the start of
# a new week or month. This happens in the Perform Daily Chores automation.
register_exercise_metrics:
  alias: Register Exercise Metrics
  
  fields:
    exercise_type:
      description: 'The type of exercise performed.'
      selector:
        select:
          options:
            - treadmill
            - workout
            - yard_work
            - other
            - steps
    
    daily_calories:
      description: The daily calories value for the exercise type.
      selector:
        number:
          min: 0
          max: 2000
  
  variables:
    valid: "{{ exercise_type in ['treadmill', 'workout', 'yard_work', 'other', 'steps'] }}"
    weekly_time_entity: "{{ 'input_number.' ~ exercise_type ~ '_weekly_time' }}"
    weekly_calories_entity: "{{ 'input_number.' ~ exercise_type ~ '_weekly_calories' }}"
    monthly_time_entity: "{{ 'input_number.' ~ exercise_type ~ '_monthly_time' }}"
    monthly_calories_entity: "{{ 'input_number.' ~ exercise_type ~ '_monthly_calories' }}"
    daily_time: "{{ states('input_number.' ~ exercise_type ~ '_daily_time') | int(0) }}"
    daily_steps: "{{ states('sensor.steps_daily') | int(0) }}"
    recordable_exercise_minimum_time: "{{ state_attr('sensor.variables', 'variables').recordable_exercise_minimum_time | int(0) }}"
    type_str: "{{ exercise_type ~ (' ' * (9 - exercise_type|length)) ~ ',' }}"
    metric_str: "{{ iif(exercise_type == 'steps', 'steps:', 'time :') }}"
    metric_val: "{{ iif(exercise_type == 'steps', daily_steps, daily_time) }}"
  
  sequence:
    
    # Continue if we have a valid input.
    - if:
        - "{{ valid }}"
      
      then:
        - variables:
            effective_date_str: "{{ states('input_datetime.other_date') }}"
            today_str: "{{ now().strftime('%Y-%m-%d') }}"
            effective_date_day_of_week: "{{ as_timestamp(effective_date_str) | timestamp_custom('%w') | int(0) }}"
            today_day_of_week: "{{ as_timestamp(now()) | timestamp_custom('%w') | int(0) }}"
            effective_date_day_of_month: "{{ as_timestamp(effective_date_str) | timestamp_custom('%d') | int(0) }}"
            today_day_of_month: "{{ now().day }}"
        
        # Update the weekly calories. However, skip this for the 'other' type if the effective day of week is not in the current week.
        - if:
            - "{{ input_exercise_type != 'other' or effective_date_day_of_week <= today_day_of_week }}"
          
          then:
            - action: input_number.set_value
              target:
                entity_id: "{{ weekly_calories_entity }}"
              data:
                value: "{{ states(weekly_calories_entity) | int(0) + daily_calories }}"
        
        # Update the monthly calories. However, skip this for the 'other' type if the effective day of month is not in the current month.
        - if:
            - "{{ input_exercise_type != 'other' or effective_date_day_of_month <= today_day_of_month }}"
          
          then:
            - action: input_number.set_value
              target:
                entity_id: "{{ monthly_calories_entity }}"
              data:
                value: "{{ states(monthly_calories_entity) | int(0) + daily_calories }}"
        
        # Update the time metrics for the appropriate exercise types.
        - if:
            - "{{ exercise_type != 'steps' }}"
          
          then:
        
            # Update the weekly time. However, skip this for the 'other' type if the effective day of week is not in the current week.
            - if:
                - "{{ input_exercise_type != 'other' or effective_date_day_of_week <= today_day_of_week }}"
              
              then:
                - action: input_number.set_value
                  target:
                    entity_id: "{{ weekly_time_entity }}"
                  data:
                    value: "{{ states(weekly_time_entity) | int(0) + daily_time }}"
        
            # Update the monthly time. However, skip this for the 'other' type if the effective day of month is not in the current month.
            - if:
                - "{{ input_exercise_type != 'other' or effective_date_day_of_week <= today_day_of_week }}"
              
              then:
                - action: input_number.set_value
                  target:
                    entity_id: "{{ monthly_time_entity }}"
                  data:
                    value: "{{ states(monthly_time_entity) | int(0) + daily_time }}"
          
          # Update the steps metrics.
          else:
            - action: input_number.set_value
              target:
                entity_id: input_number.steps_weekly
              data:
                value: "{{ states('input_number.steps_weekly') | int(0) + daily_steps }}"
            
            - action: input_number.set_value
              target:
                entity_id: input_number.steps_monthly
              data:
                value: "{{ states('input_number.steps_monthly') | int(0) + daily_steps }}"
    
        # For a workout type, update the workout group.
        - if:
            - "{{ exercise_type == 'workout' }}"
          
          then:
            
            - variables:
                next_group: >
                  {% set curr_group = states('input_number.workout_group') | int(0) %}
                  {{ iif(curr_group > 3, 1, curr_group + 1) }}
            
            - action: input_number.set_value
              target:
                entity_id: input_number.workout_group
              data:
                value: "{{ next_group }}"
        
        - variables:
            
            # The exercise is recordable if the time/steps meets or exceeds the daily goal, and the recordable toggle is
            # currently off (so we only record once per day). It's also recordable for the 'other' exercise type for a day
            # in the past.
            recordable: >
              {% set not_today = exercise_type == 'other' and effective_date_str != today_str %}
              {% set toggle_state = states('input_boolean.exercise_recordable') %}
              {% set non_steps_recordable = daily_time >= recordable_exercise_minimum_time %}
              {% set steps_recordable = states('input_number.steps_daily') | int(0) >= state_attr('sensor.variables', 'variables').steps_daily_goal | int(0) %}
              {{ not_today or (toggle_state == 'off' and iif(exercise_type != steps, non_steps_recordable == true, steps_recordable == true)) }}
        
            
        # Record this exercise if it meets the requirements.
        - if:
            - "{{ recordable == true }}"
          
          then:
          
            # Increment the exercise days and recordable days counters.
            - action: counter.increment
              target:
                entity_id:
                  - "{{ 'counter.' ~ exercise_type ~ '_days' }}"
                  - counter.exercise_recordable
        
            # Set the toggle so we don't do this again for today.
            - action: input_boolean.turn_on
              target:
                entity_id: input_boolean.exercise_recordable
            
            # Log the metrics, so I have a record of activity for each month (the log is backed up on the first of each
            # month, which starts a new log file).
            - variables:
                log_timestamp: "{{ iif(exercise_type == 'other', as_timestamp(effective_date_str), as_timestamp(now())) }}"
            
            - action: notify.send_message
              target:
                entity_id: notify.exercise_activity
              data:
                message: "{{ log_timestamp | timestamp_custom('%b %d %Y %X') ~ ': Exercise type: ' ~ type_str ~ ' ' ~ metric_str ~ ' ' ~ metric_val ~ ', calories: ' ~ daily_calories }}"
      
      # Invalid exercise type, log it.
      else:
        - action: system_log.write
          data:
            message: "Invalid exercise type '{{ exercise_type }}' specified"
            level: error

#===================#
#     Yard Work     #
#===================#

# Begin a yard work episode.
start_yard_work:
  alias: Start Yard Work
  
  sequence:
    
    # Only execute during yard work inactive state.
    - condition: state
      entity_id: input_boolean.yard_work_active
      state: 'off'
    
    # Set yard work active state.
    - action: input_boolean.turn_on
      target:
        entity_id: input_boolean.yard_work_active
    
    # Set the start time. We use this to accumulate time across breaks.
    - action: input_datetime.set_datetime
      target:
        entity_id: input_datetime.yard_work_start
      data:
        datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
    
    # Initialize the accumulated time.
    - action: input_number.set_value
      target:
        entity_id: input_number.yard_work_accumulated_time
      data:
        value: 0
    
    # Set up necessary devices.
    - action: script.set_up_yard_work_devices
      data:
        going_out: true
        stage: initial

# Pause yard work because I need to take a break, cool off and hydrate.
pause_yard_work:
  alias: Pause Yard Work
  
  sequence:
    
    # Only execute during yard work active state.
    - condition: state
      entity_id: input_boolean.yard_work_active
      state: 'on'
    
    # Set yard work inactive state.
    - action: input_boolean.turn_off
      target:
        entity_id: input_boolean.yard_work_active
    
    # Accumulate the time so far, rounding down to the nearest 5 minutes, since it takes a few minutes to get going.
    - action: input_number.set_value
      target:
        entity_id: input_number.yard_work_accumulated_time
      data:
        value: >
          {% set accum = states('input_number.yard_work_accumulated_time') | int(0) %}
          {% set start = as_timestamp(strptime(states('input_datetime.yard_work_start'), '%Y-%m-%d %H:%M:%S')) %}
          {% set num = (now().timestamp() - start) // 60 %}
          {% set minutes = (num - (num % 5)) %}
          {{ accum + minutes }}
    
    # Set up necessary devices.
    - action: script.set_up_yard_work_devices
      data:
        going_out: false
        stage: intermediate

# Ugh, back to the grind.
resume_yard_work:
  alias: Resume Yard Work
  
  sequence:
    
    # Only execute during yard work inactive state.
    - condition: state
      entity_id: input_boolean.yard_work_active
      state: 'off'
    
    # Set yard work active state.
    - action: input_boolean.turn_on
      target:
        entity_id: input_boolean.yard_work_active
    
    # Reinitialize the start time for the next interval of work.
    - action: input_datetime.set_datetime
      target:
        entity_id: input_datetime.yard_work_start
      data:
        datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
    
    # Set up necessary devices.
    - action: script.set_up_yard_work_devices
      data:
        going_out: true
        stage: intermediate

# Yay! I'm done!
stop_yard_work:
  alias: Stop Yard Work
  
  sequence:
    
    # Only execute during yard work active state.
    - condition: state
      entity_id: input_boolean.yard_work_active
      state: 'on'
    
    # Set yard work inactive state.
    - action: input_boolean.turn_off
      target:
        entity_id: input_boolean.yard_work_active
    
    # Accumulate the final time.
    - action: input_number.set_value
      target:
        entity_id: input_number.yard_work_accumulated_time
      data:
        value: >
          {% set accum = states('input_number.yard_work_accumulated_time') | int(0) %}
          {% set start = as_timestamp(strptime(states('input_datetime.yard_work_start'), '%Y-%m-%d %H:%M:%S')) %}
          {% set num = (now().timestamp() - start) // 60 %}
          {% set minutes = (num - (num % 5)) %}
          {{ accum + minutes }}
    
    # Set the daily time from the accumulated time.
    - action: input_number.set_value
      target:
        entity_id: input_number.yard_work_daily_time
      data:
        value: "{{ states('input_number.yard_work_accumulated_time') }}"
    
    # Set up necessary devices.
    - action: script.set_up_yard_work_devices
      data:
        going_out: false
        stage: final

# Set up the devices involved with doing yard work: office fan, laundry room light and garage door.
set_up_yard_work_devices:
  alias: Set Up Yard Work Devices
  
  fields:
    going_out:
      description: True if going outside, false if coming inside.
      selector:
        boolean:
    
    stage:
      description: Stage of the yard work episode.
      selector:
        select:
          options:
            - initial
            - intermediate
            - final
  
  sequence:
    
    # Handle the office fan and laundry room light when going outside.
    - if:
        - "{{ going_out == true }}"
      
      then:
        - action: script.set_fan_to_speed
          data:
            entity_id: fan.office_fan
            speed: 0
        
        - action: light.turn_on
          target:
            entity_id: light.Laundry_room
      
      # Handle the office fan and laundry room light when coming inside.
      else:
        - action: script.turn_on
          entity_id: script.control_fan_for_temperature
          data:
            variables:
              fan_entity_id: fan.office_fan
              temperature_entity_id: sensor.main_floor_temperature
              thresholds: [76, 73, 71]
              timeout: 600
        
        - action: light.turn_off
          target:
            entity_id: light.Laundry_room
    
    # Handle the garage door (do nothing for intermediate stage).
    - choose:
      - conditions: "{{ stage == 'initial' }}"
        
        sequence:
          - action: script.turn_on
            target:
              entity_id: script.open_garage_door_north
            data:
              variables:
                use_info_message: false
      
      - conditions: "{{ stage == 'final' }}"
        
        sequence:
          - action: script.turn_on
            target:
              entity_id: script.close_garage_door_north
            data:
              variables:
                use_info_message: false
