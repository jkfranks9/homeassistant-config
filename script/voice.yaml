#==========================#
#     Alexa Front Ends     #
#==========================#

# NOTE: The following scripts require knowing the most recently spoken to device. So all the scripts called here must call
# Get Voice Device Data as the first step.

# Fans ...
alexa_set_fan_off:
  alias: Alexa Set Fan Off
  
  sequence:
    - action: script.voice_modify_fan
      data:
        caller: alexa
        speed: 'off'

alexa_set_fan_low:
  alias: Alexa Set Fan Low
  
  sequence:
    - action: script.voice_modify_fan
      data:
        caller: alexa
        speed: 'low'

alexa_set_fan_medium:
  alias: Alexa Set Fan Medium
  
  sequence:
    - action: script.voice_modify_fan
      data:
        caller: alexa
        speed: 'medium'

alexa_set_fan_high:
  alias: Alexa Set Fan High
  
  sequence:
    - action: script.voice_modify_fan
      data:
        caller: alexa
        speed: 'high'

# Lights ...
alexa_turn_light_on:
  alias: Alexa Turn Light On
  
  sequence:
    - action: script.voice_operate_light
      data:
        caller: alexa
        operation: 'on'

alexa_turn_light_off:
  alias: Alexa Turn Light Off
  
  sequence:
    - action: script.voice_operate_light
      data:
        caller: alexa
        operation: 'off'

# Other ...
alexa_remove_notification:
  alias: Alexa Remove Notification
  
  sequence:
    - action: script.voice_mobile_notification
      data:
        caller: alexa

alexa_bedtime_front_end:
  alias: Alexa Bedtime Front End
  
  sequence:
    - action: script.bedtime_front_end
      data:
        caller: alexa

# NOTE: The following scripts do not require knowing the most recently spoken to device.

alexa_studio_night_lights_on:
  alias: Alexa Studio Night Lights On
  
  sequence:
    - action: script.operate_preferred_studio_night_lights
      data:
        operation: 'on'

#======================#
#     Ceiling Fans     #
#======================#

# Modify a fan that lives in a room with a voice assistant device.
voice_modify_fan:
  alias: Voice Modify Fan
  
  fields:
    caller:
      name: Caller
      description: The family of the voice device that was spoken to.
      selector:
        select:
          options:
            - alexa
            - nabu
    
    speed:
      name: Speed
      description: Fan speed to be used (see fan_settings variable).
      selector:
        select:
  
  sequence:
    
    # Get the room containing the voice assistant device that was used.
    - action: script.get_voice_device_data
      data:
        caller: "{{ caller }}"
      response_variable: result
    
    - variables:
        
        # Extract the room from the response variable.
        room: "{{ result.room }}"
        
        # This defines the rooms with ceiling fans.
        fan_rooms: "{{ state_attr('sensor.variables', 'variables').fan_rooms }}"
        
        # These are the input speed settings. They are used to index the numerical (percentage)
        # settings below.
        fan_settings: ['off', 'low', 'medium', 'high']
        
        # This is the fan speed for each fan setting.
        fan_speeds: ['0', '33', '66', '99']
    
    # Silently ignore any rooms we don't know about.
    - if:
        - "{{ room in fan_rooms }}"
      
      then:
        
        # Set the fan to the requested speed.
        - action: script.set_fan_to_speed
          data:
            entity_id: "{{ 'fan.' ~ room ~ '_fan' }}"
            speed: "{{ fan_speeds[fan_settings.index(speed)] }}"

#=====================#
#     Room Lights     #
#=====================#

# Toggle a light that lives in a room with a voice assistant device.
voice_operate_light:
  alias: Voice Operate Light
  
  fields:
    caller:
      name: Caller
      description: The family of the voice device that was spoken to.
      selector:
        select:
          options:
            - alexa
            - nabu
    
    operation:
      name: Operation
      description: Whether to turn the light on or off.
      selector:
        select:
  
  sequence:
    
    # Get the room containing the voice assistant device that was used.
    - action: script.get_voice_device_data
      data:
        caller: "{{ caller }}"
      response_variable: result
    
    - variables:
        
        # Extract the room from the response variable.
        room: "{{ result.room }}"
        
        # These define the rooms and the lights in those rooms.
        light_rooms: "{{ state_attr('sensor.variables', 'variables').light_rooms }}"
        light_rooms_lights: "{{ state_attr('sensor.variables', 'variables').light_rooms_lights }}"
    
    # Silently ignore any rooms we don't know about.
    - if:
        - "{{ room in light_rooms }}"
      
      then:
        - variables:
            light_entity: "{{ light_rooms_lights[light_rooms.index(room)] }}"
            
            # When turning on, use full brightness (the option is ignored for lights that don't support it). Since we're always specifying
            # data, use transition when turning off.
            light_data: "{{ iif(operation == 'on', {'brightness_pct': 100}, {'transition': 0}) }}"
        
        - if:
            - "{{ light_entity.split('.')[0] == 'light' }}"
          
          then:
        
            # Operate the light.
            - action: light.turn_{{ operation }}
              target:
                entity_id: "{{ light_entity }}"
              data: "{{ light_data }}"
          
          else:
            
            # For non-light domains, use specialized processing.
            # NOTE: There's only one of these for now; probably needs to be a choose in order to handle additional cases.
            - action: script.operate_preferred_studio_lamps
              data:
                operation: "{{ operation }}"

#===============#
#     Other     #
#===============#

# Remove one or more mobile notifications that can only be cleared manually.
voice_mobile_notification:
  alias: Voice Mobile Notification
  
  fields:
    caller:
      name: Caller
      description: The family of the voice device that was spoken to.
      selector:
        select:
          options:
            - alexa
            - nabu
  
  sequence:
    
    # Get the room containing the voice assistant device that was used.
    - action: script.get_voice_device_data
      data:
        caller: "{{ caller }}"
      response_variable: result
    
    # Remove manual mobile notification(s) using the output device from the response variable.
    - action: script.turn_on
      target:
        entity_id: script.remove_manual_mobile_notification
      data:
        variables:
          voice_device: "{{ result.output }}"

# Bedtime script front end. We need to determine if any adult guests staying in the studio are still awake. If so, some 
# bedtime actions need to be deferred. For example, someone could be watching TV in the family room, so I don't want to 
# turn off the family room AV and lights when I go to bed.
bedtime_front_end:
  alias: Bedtime Front End
  
  fields:
    caller:
      name: Caller
      description: The family of the voice device that was spoken to.
      selector:
        select:
          options:
            - alexa
            - nabu
  
  sequence:
    
    # Initialize the result.
    - variables:
        studio_guests_awake: false
    
    # Only ask the question if an adult guest is occupying the studio.
    - if:
        - "{{ states('input_select.studio_guests') not in ['Empty', 'Skylar'] }}"
      
      then:
    
        # Get the room containing the voice assistant device that was used.
        - action: script.get_voice_device_data
          data:
            caller: "{{ caller }}"
          response_variable: result
        
        - variables:
            
            # Extract the room from the response variable.
            room: "{{ result.room }}"
        
        # Set up the question.
        - action: input_text.set_value
          target:
            entity_id: input_text.ask_question
          data:
            value: 'Are studio guests still awake?'
        
        # Ask the question.
        - action: script.ask_question
          data:
            voice_assistant: assist_satellite.{{ room }}_nabu_assist_satellite
            preannounce: true
        
        # Pick up the result.
        - variables:
            studio_guests_awake: "{{ iif(is_state('input_boolean.ask_question', 'on'), true, false) }}"
    
    # Call the bedtime script with the result.
    - action: script.Bedtime
      data:
        studio_guests_awake: "{{ studio_guests_awake }}" 

#=======================#
#     Conversations     #
#=======================#

# Generic script to ask a question. The question is supplied in a text, and the response is provided in a toggle. One retry is allowed.
ask_question:
  alias: Ask Question
  
  use_blueprint:
    path: homeassistant/ask_yes_no_question.yaml
    input:
      question: "{{ states('input_text.ask_question') }}"
      number_of_retries: 1
      yes_actions:
        - action: input_boolean.turn_on
          target:
            entity_id: input_boolean.ask_question
      no_actions:
        - action: input_boolean.turn_off
          target:
            entity_id: input_boolean.ask_question

#===================#
#     Utilities     #
#===================#

# Get information about the most recently spoken to voice device.
get_voice_device_data:
  alias: Get Voice Device Data
  
  fields:
    caller:
      name: Caller
      description: The family of the voice device that was spoken to.
      selector:
        select:
          options:
            - alexa
            - nabu
  
  sequence:
    
    # Pre-process according to the caller.
    - choose:
        - conditions: "{{ caller == 'alexa' }}"
        
          sequence:
    
            # Update the last alexa device. Note that this could have already been done by the Update Last Alexa Device
            # automation, but we can't be sure. It might not even work now :(
            - action: script.update_last_alexa_device
            
            - variables:
                last_device_entity: "{{ states('sensor.last_alexa') }}"
                last_device_suffix: "{{ '_echo' }}"
        
        - conditions: "{{ caller == 'nabu' }}"
        
          sequence:
            - variables:
                last_device_entity: "{{ states('input_text.last_nabu_device') }}"
                last_device_suffix: "{{ '_nabu_assist_satellite' }}"
    
    - variables:
        
        # Pull the room out of the voice device entity name.
        room: "{{ (last_device_entity.split('.')[1]).split(last_device_suffix)[0] }}"
        
        # Some nabu devices don't support TTS announcements. If such a device was used, set the output device to the echo in the same room.
        output_device_entity: "{{ iif(caller == 'nabu', iif(state_attr(last_device_entity, 'supported_features') | bitwise_and(1) == 0, 'media_player.' ~ room ~ '_echo', last_device_entity), last_device_entity) }}"
        
        # Returned data.
        data: "{{ {'device': last_device_entity, 'output': output_device_entity, 'room': room} }}"  
        
    - stop: "Returning device data"
      response_variable: data

# Update the Last Alexa sensor, which contains the most recently spoken to echo media player.
# NOTE: For Nabu devices this is handled by the Update Last Nabu Device automation.
update_last_alexa_device:
  alias: Update Last Alexa Device
  
  sequence:
    - variables:
        wait_seconds: 5
        retry_count: 3
        done: false
    
    # Amazon is twitchy, so retry a few times if necessary.
    - repeat:
        until: "{{ done == true or repeat.index >= retry_count }}"
        
        sequence:
    
          # We need to ask Alexa to update the last called echo device, because this information is not pushed to us by Amazon.
          - action: alexa_media.update_last_called
        
          # The Alexa Media Player integration kindly provides an event that indicates the above call has completed, so wait for it.
          - wait_for_trigger:
            - trigger: event
              event_type: alexa_media_last_called_event
            timeout: "{{ wait_seconds }}"
        
          # If we didn't time out, update the Last Alexa sensor, using an event trigger. Otherwise, try again.
          - if:
              - "{{ wait.completed }}"
          
            then:
              - variables:
                  done: true
              
              - event: update_last_alexa_sensor
    
    # We failed, so send an announcement.
    - if:
        - "{{ done == false }}"
      
      then:
        - action: script.send_notification
          data:
            destination:
              - voice_assistant
            message: "I'm sorry, but Amazon failed to tell me what echo was just spoken to."
            room: ['everywhere']
            voice_type: announce
