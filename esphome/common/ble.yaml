# BLE tracker

# Global variables for lambdas (beacons to be tracked).
globals:
  - id: blue_charm_name
    type: std::string
    initial_value: '"blue_charm"'
  - id: blue_charm_uuid
    type: std::string
    initial_value: '"736e6f63-6165-426d-7261-684365756c42"'
  - id: jon_phone_name
    type: std::string
    initial_value: '"jon_phone"'
  - id: jon_phone_uuid
    type: std::string
    initial_value: '"f5e3d66b-d5e5-4608-8349-2b15af48c8a4"'

esphome:
  
  # The ble_dist header estimates iBeacon distances based on RSSI values. It contains the various routines called in the lambdas below.
  # The OneEuro header is an adaptive low pass filter to reduce jitter and lag on the estimated distances.
  includes:
    - common/lib/OneEuro.h
    - common/lib/ble_dist.h
  
  # Call addTracker for each iBeacon device to be tracked.
  on_boot:
    then:
      lambda: |-
        addTracker(id(blue_charm_name), id(blue_charm_uuid));
        addTracker(id(jon_phone_name), id(jon_phone_uuid));

# Parse all received iBeacon advertisements. Only devices added on boot are tracked.
esp32_ble_tracker:
  scan_parameters:
    duration: ${scan_interval}
    active: false
  on_ble_advertise:
    then:
      - lambda: |-
          parseAdvertisement(x);

# Sensors for each tracked device. These return the current estimated distance.
sensor:
  - platform: template
    name: Blue Charm Distance
    id: ${sensor_id_prefix}_blue_charm_dist
    update_interval: ${sensor_interval}
    unit_of_measurement: "ft"
    device_class: ""
    state_class: "measurement"
    accuracy_decimals: 1
    entity_category: "diagnostic"
    lambda: |-
      return getTracker(id(blue_charm_name)).get_dist();
  
  - platform: template
    name: Jon Phone Distance
    id: ${sensor_id_prefix}_jon_phone_dist
    update_interval: ${sensor_interval}
    unit_of_measurement: "ft"
    device_class: ""
    state_class: "measurement"
    accuracy_decimals: 1
    entity_category: "diagnostic"
    lambda: |-
      return getTracker(id(jon_phone_name)).get_dist();
