#============================#
#     Main Configuration     #
#============================#

# Default setup of Home Assistant (frontend, api, etc)
default_config:

# Front end
frontend:
  extra_module_url:
    - /local/community/lovelace-card-mod/card-mod.js

# We need to specify allowed directories for the file notification service here.
homeassistant:
  allowlist_external_dirs:
    - /config/debug_logs

#========================#
#     Included Files     #
#========================#

automation:     !include_dir_merge_list automation
binary_sensor:  !include binary_sensor.yaml
cover:          !include covers.yaml
group:          !include_dir_merge_named group
intent_script:  !include_dir_merge_named intent_script
logger:         !include logger.yaml
panel_custom:   !include panel_custom.yaml
recorder:       !include recorder.yaml
script:         !include_dir_merge_named script
scene:          !include scenes.yaml
sensor:         !include_dir_merge_list sensor
sql:            !include sql.yaml
template:       !include_dir_merge_list template

#======================#
#     Conversation     #
#======================#

conversation:

#==============#
#     MQTT     #
#==============#

mqtt:
  
  device_tracker:
    
    # Stationary phone device trackers, based on the wifi SSID.
    - name: Jon Phone Stationary
      state_topic: "homeassistant/device_tracker/jon_phone_stationary"
      source_type: router
      payload_home: "home"
      payload_not_home: "not_home"
    
    - name: Mike Phone Stationary
      state_topic: "homeassistant/device_tracker/mike_phone_stationary"
      source_type: router
      payload_home: "home"
      payload_not_home: "not_home"
    
    - name: Sarah Phone Stationary
      state_topic: "homeassistant/device_tracker/sarah_phone_stationary"
      source_type: router
      payload_home: "home"
      payload_not_home: "not_home"
    
    - name: David Phone Stationary
      state_topic: "homeassistant/device_tracker/david_phone_stationary"
      source_type: router
      payload_home: "home"
      payload_not_home: "not_home"
    
    # Pseudo stationary device trackers based on NFC tags.
    - name: Skylar NFC Tag
      state_topic: "homeassistant/device_tracker/skylar_nfc_tag"
      source_type: router
      payload_home: "home"
      payload_not_home: "not_home"
    
    # Test device trackers, so I can simulate various family members arriving and leaving.
    - name: Virtual David
      state_topic: "homeassistant/device_tracker/virtual_david"
      source_type: router
      payload_home: "home"
      payload_not_home: "not_home"

    - name: Virtual Maryam
      state_topic: "homeassistant/device_tracker/virtual_maryam"
      source_type: router
      payload_home: "home"
      payload_not_home: "not_home"

    - name: Virtual Mike
      state_topic: "homeassistant/device_tracker/virtual_mike"
      source_type: router
      payload_home: "home"
      payload_not_home: "not_home"

    - name: Virtual Sarah
      state_topic: "homeassistant/device_tracker/virtual_sarah"
      source_type: router
      payload_home: "home"
      payload_not_home: "not_home"

    - name: Virtual Skylar
      state_topic: "homeassistant/device_tracker/virtual_skylar"
      source_type: router
      payload_home: "home"
      payload_not_home: "not_home"

#==========================#
#     Computer Control     #
#==========================#

wake_on_lan:

#==================#
#     Switches     #
#==================#

switch:

  # Amazon Smart Plug ... copies the input boolean of the same name, allowing the plug to be a switch (and thus a light),
  # which in turn allows it to be placed in a group.
  - platform: template
    switches:
      alexa_ha_plug:
        friendly_name: Office Bookcase
        value_template: "{{ is_state('input_boolean.alexa_ha_plug', 'on') }}"
        turn_on:
          - service: input_boolean.turn_on
            entity_id:
              - input_boolean.alexa_ha_plug
        turn_off:
          - service: input_boolean.turn_off
            entity_id:
              - input_boolean.alexa_ha_plug

#================================#
#     Universal Media Player     #
#================================#

media_player:
  - platform: universal
    name: Theater Shield
    unique_id: theater_shield
    device_class: tv
    children:
      - media_player.shield_android_tv
      - media_player.shield_tv_cast
    browse_media_entity: media_player.shield_tv_cast
    commands:
      turn_off:
        service: media_player.turn_off
        data:
          entity_id: media_player.shield_android_tv
      turn_on:
        service: media_player.turn_on
        data:
          entity_id: media_player.shield_android_tv

#=================#
#     Devices     #
#=================#

# Lutron Caseta hub
lutron_caseta:
  host:     !secret lutron_ip_addr
  keyfile:  /ssl/lutron/caseta.key
  certfile: /ssl/lutron/caseta.crt
  ca_certs: /ssl/lutron/caseta-bridge.crt

#=======================#
#     Miscellaneous     #
#=======================#

# Powercalc
powercalc:
  energy_sensor_precision: 2

# System log error detection
system_log:
  fire_event: true

# Notify service
notify:
  - name: gmail
    platform: smtp
    server: "smtp.gmail.com"
    port: 587
    timeout: 15
    sender: !secret gmail_email_address
    encryption: starttls
    username: !secret gmail_email_address
    password: !secret gmail_app_password
    recipient:
      - !secret gmail_email_address
    sender_name: Jon Franks

# Command line
command_line:
  - sensor:
      name: CPU Temp
      unit_of_measurement: 'Â°'
      command: 'cat /sys/class/thermal/thermal_zone0/temp'
      value_template: "{{ (value | multiply(0.001) | float(0)) | round(2) }}"
  
  # Once per hockey season, I need to query the NHL API for the league standings, and save the result in the nhl_standings.json file.
  # The first sensor here will then extract the 3 character team abbeviations into a list. When we query the game status during the 
  # season, all we get for the opponent is the abbreviation. We can then find the abbreviation in this sensor's list to get the index, 
  # and use that to get the friendly team name from the second sensor here.
  - sensor:
      name: NHL Team Abbrev
      unique_id: nhl_team_abbrev
      command: "jq '{ abbrev: .standings | map(.teamAbbrev.default) }' nhl_standings.json"
      json_attributes:
        - abbrev
      value_template: "{{ value_json['abbrev'] | length }}"
  
  - sensor:
      name: NHL Team Names
      unique_id: nhl_team_names
      command: "jq '{ names: .standings | map(.teamCommonName.default) }' nhl_standings.json"
      json_attributes:
        - names
      value_template: "{{ value_json['names'] | length }}"

# Shell commands
shell_command:
  backup_log:                     'python /config/python/backup_logs.py /config/home-assistant.log'
  backup_auto_scripts_log:        'python /config/python/backup_logs.py /config/debug_logs/automations_scripts.log'
  backup_laundry_log:             'python /config/python/backup_logs.py /config/debug_logs/laundry_events.log'
  backup_exercise_log:            'python /config/python/backup_logs.py /config/debug_logs/exercise_activity.log'
  concat_log_files:               'python /config/python/concat_logs.py /config/home-assistant'
  concat_auto_scripts_log_files:  'python /config/python/concat_logs.py /config/debug_logs/automations_scripts'
  delete_junk_log_files:          'rm -f /config/home-assistant.log.1'
  reboot_nut_service:             bash /config/reboot_nut_server.sh
