#========================#
#     Binary Sensors     #
#========================#

- binary_sensor:

    #-----------------------------#
    #   -- Floorplan Mirrors --   #
    #-----------------------------#

    # These sensors are used to create mirror entities to items on the floorplan. For example,
    # there are four wall sconces in the theater, but the floorplan card only allows one element
    # in the SVG file with a given entity ID. By having sensors that mirror that one entity's
    # state, we can then place elements in the SVG file using those sensor IDs.    
    - name: 'Driveway Lights Mirror'
      unique_id: driveway_lights_mirror
      device_class: light
      state: "{{ is_state('switch.driveway_lights', 'on') }}"
    
    - name: 'Garage Lights Mirror'
      unique_id: garage_lights_mirror
      device_class: light
      state: "{{ is_state('switch.garage_lights', 'on') }}"
    
    - name: 'Hallway Lights Mirror'
      unique_id: hallway_lights_mirror
      device_class: light
      state: "{{ is_state('switch.hallway_lights', 'on') }}"
    
    - name: 'Kitchen Light Mirror'
      unique_id: kitchen_light_mirror
      device_class: light
      state: "{{ is_state('switch.kitchen_light', 'on') }}"
    
    - name: 'Snack Light Mirror'
      unique_id: snack_light_mirror
      device_class: light
      state: "{{ is_state('switch.snack_light', 'on') }}"
      
    - name: 'Theater Sconces Mirror'
      unique_id: theater_sconces_mirror
      device_class: light
      state: "{{ is_state('light.theater_sconces', 'on') }}"
    
    - name: 'Theater Ceiling Mirror'
      unique_id: theater_ceiling_mirror
      device_class: light
      state: "{{ is_state('light.theater_ceiling', 'on') }}"
    
    - name: 'Upstairs Bedroom Light Mirror'
      unique_id: upstairs_bedroom_light_mirror
      device_class: light
      state: "{{ is_state('switch.upstairs_bedroom_light', 'on') }}"

    #-------------------------#
    #   -- History Stats --   #
    #-------------------------#
    
    # These sensors are used to support history stats.
    
    # Family Room AV is true if the associated device is drawing power, and a grandchild
    # is not home or a grandchild is home and it's in the evening (I don't count a grandchild
    # watching YouTube or cartoon shows all day).
    - name: 'Family Room AV'
      unique_id: family_room_av
      state: >
        {{ states('sensor.sonoff_family_room_av_power') | float(0) > 10 and
           (is_state('binary_sensor.children_home', 'off') or
             (is_state('binary_sensor.children_home', 'on') and
              now().strftime('%H') >= '19')) }}
    
    # Cinema is true if the projector is drawing power, and the source device is not Shield TV
    # (we can't know if such devices are playing or not) or the source is Shield TV and it's in
    # playing state.
    - name: 'Cinema Projector'
      unique_id: cinema_projector
      state: >
        {{ states('sensor.projector_power') | float(0) > 0  and
           (is_state('switch.harmony_hub_stream_player', 'off') or
             (is_state('switch.harmony_hub_stream_player', 'on') and
              is_state('media_player.shield_tv', 'playing'))) }}

    #------------------------------#
    #   -- Device Power Flags --   #
    #------------------------------#
    
    # These indicate if a device or device group (such as an AV system) are drawing power.
    - name: Family Room AV System
      unique_id: family_room_av_system
      state: "{{ states('sensor.sonoff_family_room_av_power') | float(0) > 10 }}"
      
    - name: Theater AV System
      unique_id: theater_av_system
      state: "{{ states('sensor.projector_power') | float(0) > 0 }}"

    #------------------------------#
    #   -- Presence Detection --   #
    #------------------------------#
    
    # This sensor indicates if any adult family members are home or not.
    - name: Adults Home
      unique_id: adults_home
      state: "{{ states('person.david') == 'home' or states('person.maryam') == 'home' or states('person.mike') == 'home' or states('person.sarah') == 'home' }}"
      device_class: presence
    
    # This sensor indicates if any child family members are home or not.
    - name: Children Home
      unique_id: children_home
      state: "{{ states('person.skylar') == 'home' }}"
      device_class: presence
    
    # Am I home alone?
    - name: Home Alone
      unique_id: home_alone
      state: "{{ states('zone.home') | int(0) == 1 and state_attr('zone.home', 'persons') == ['person.jon'] }}"
      device_class: presence

    #-------------------------------------#
    #   -- Upstairs Bedroom Occupied --   #
    #-------------------------------------#
    
    # Note that the house is considered a device.
    - name: Upstairs Bedroom Occupied
      unique_id: upstairs_bedroom_occupied
      state: >
        {{ states('input_select.occupied_bedrooms') in ['AdultUp', 'ChildUp', 'ChildDownPlus', 'ChildUpPlus', 'Both'] }}
