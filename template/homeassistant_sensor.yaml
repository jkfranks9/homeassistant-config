#================================#
#     Home Assistant Sensors     #
#================================#

- sensor:

    #-----------------#
    #   -- Dates --   #
    #-----------------#
    
    - name: Credit Reports Due
      unique_id: credit_reports_due
      state: "{{ now().month == 1 and now().day == 15 }}"
    
    - name: First Of Month
      unique_id: first_of_month
      state: "{{ now().day == 1 }}"

    #--------------------------#
    #   -- Nighttime Mode --   #
    #--------------------------#
    
    # Convert nighttime boolean for dashboard
    - name: 'Nighttime'
      unique_id: nighttime
      state: "{{ iif(is_state('input_boolean.nighttime', 'on'), 1, 0) }}"

    #-------------------------#
    #   -- Effective Sun --   #
    #-------------------------#
    
    # This reflects either the real sun, or a virtual sun that can be used with the testing infrastructure.
    # Note that it only contains the state and a subset of the real sun attributes (only those attributes needed for testing).
    - name: Effective Sun
      unique_id: effective_sun
      state: >
        {% from 'testing.jinja' import get_testing_value %}
        {{ get_testing_value('input_select.virtual_sun_state', 'none', '') }}
      attributes:
        elevation: >
          {% from 'testing.jinja' import get_testing_value %}
          {{ get_testing_value('input_number.virtual_sun_elevation', 0, 'elevation') }}
        rising: >
          {% from 'testing.jinja' import get_testing_value %}
          {{ get_testing_value('input_select.virtual_sun_rising', 'none', 'rising') }}

    #-------------------#
    #   -- Backups --   #
    #-------------------#
    
    # Google Drive free percent
    - name: 'Google Drive Free Percent'
      unique_id: google_drive_free_percent
      unit_of_measurement: '%'
      state: "{{ ((1 - (state_attr('sensor.backup_state', 'free_space_in_google_drive') | replace(' GB', '') | float(0) / 15)) * 100) | round(2) }}"

    #----------------------#
    #   -- Statistics --   #
    #----------------------#
    
    - name: 'Count Automations'
      unique_id: count_automations
      state: "{{ states.automation | count }}"
    
    - name: 'Count Binary Sensors'
      unique_id: count_binary_sensors
      state: "{{ states.binary_sensor| count }}"
    
    - name: 'Count Device Trackers'
      unique_id: count_device_trackers
      state: "{{ states.device_tracker | count }}"
    
    - name: 'Count Media Players'
      unique_id: count_media_players
      state: "{{ states.media_player| count }}"
    
    - name: 'Count Input Booleans'
      unique_id: count_input_booleans
      state: "{{ states.input_boolean | count }}"
    
    - name: 'Count Input Datetimes'
      unique_id: count_input_datetimes
      state: "{{ states.input_datetime | count }}"
    
    - name: 'Count Input Numbers'
      unique_id: count_input_numbers
      state: "{{ states.input_number | count }}"
    
    - name: 'Count Lights'
      unique_id: count_lights
      state: "{{ states.light | count }}"
    
    - name: 'Count Scenes'
      unique_id: count_scenes
      state: "{{ states.scene| count }}"
    
    - name: 'Count Scripts'
      unique_id: count_scripts
      state: "{{ states.script| count }}"
    
    - name: 'Count Sensors'
      unique_id: count_sensors
      state: "{{ states.sensor | count }}"
    
    - name: 'Count Switches'
      unique_id: count_switches
      state: "{{ states.switch | count }}"
    
    - name: 'Count Timers'
      unique_id: count_timers
      state: "{{ states.timer | count }}"
    
    - name: 'Count Zones'
      unique_id: count_zones
      state: "{{ states.zone | count }}"

    #---------------------------#
    #   -- Boot / Up Times --   #
    #---------------------------#
    
    # Home Assistant uptime    
    - name: 'HA Uptime'
      unique_id: ha_uptime
      state: >
        {% from 'friendly_strings.jinja' import format_duration %}
        {{ format_duration(as_timestamp(states('sensor.uptime'))) }}

    # Raspberry Pi last boot date and time       
    - name: 'Last Boot Date Time'
      unique_id: last_boot_date_time
      state: >
        {% if states('sensor.last_boot') not in ['unknown', 'unavailable'] %}
          {% from 'friendly_strings.jinja' import format_time %}
          {{ format_time('sensor.last_boot') }}
        {% else %}
          {{ states('sensor.last_boot') }}
        {% endif %}

    # Raspberry Pi up time
    - name: 'RPi Uptime'
      unique_id: rpi_uptime
      state: >
        {% from 'friendly_strings.jinja' import format_duration %}
        {{ format_duration(as_timestamp(states('sensor.last_boot'))) }}

    # PC last boot date and time       
    - name: 'PC Boot Date Time'
      unique_id: pc_boot_date_time
      state: >
        {% if states('sensor.legion_t530_system_boot_time') not in ['unknown', 'unavailable'] %}
          {% from 'friendly_strings.jinja' import format_time %}
          {{ format_time('sensor.legion_t530_system_boot_time') }}
        {% else %}
          {{ states('sensor.legion_t530_system_boot_time') }}
        {% endif %}

    # PC up time
    - name: 'PC Uptime'
      unique_id: pc_uptime
      state: >
        {% if states('sensor.legion_t530_system_boot_time') not in ['unknown', 'unavailable'] %}
          {% from 'friendly_strings.jinja' import format_duration %}
          {{ format_duration(as_timestamp(states('sensor.legion_t530_system_boot_time'), now())) }}
        {% else %}
          {{ states('sensor.legion_t530_system_boot_time') }}
        {% endif %}

    #----------------#
    #   -- Misc --   #
    #----------------#
    
    - name: 'PC RAM free GB'
      unique_id: pc_ram_free_gb
      unit_of_measurement: 'GB'
      state: "{{ states('sensor.legion_t530_memory_total') }}"
      
    - name: 'Warm Weather'
      unique_id: warm_weather
      state: >
        {% set n = now() %}
        {{ n.month > 2 and n.month < 11 }}

    - name: 'Canes Game Status'
      unique_id: canes_game_status
      state: >
        {% if states.sensor.next_canes_game is defined and states.sensor.next_canes_game.attributes is defined and states.sensor.next_canes_game.attributes.teams is defined %}
          {{ iif(state_attr('sensor.next_canes_game', 'teams')['home']['team']['name'] == 'Carolina Hurricanes', 'Home', 'Away') }}
        {% else %}
          'Unknown'
        {% endif %}

    - name: 'Canes Opponent'
      unique_id: canes_opponent
      state: >
        {% from 'friendly_strings.jinja' import format_hockey_opposition_team %}
        {{ format_hockey_opposition_team('sensor.canes_game_status', 'sensor.next_canes_game') }}

    - name: 'Flyers Game Status'
      unique_id: flyers_game_status
      state: >
        {% if states.sensor.next_flyers_game is defined and states.sensor.next_flyers_game.attributes is defined and states.sensor.next_flyers_game.attributes.teams is defined %}
          {{ iif(state_attr('sensor.next_flyers_game', 'teams')['home']['team']['name'] == 'Philadelphia Flyers', 'Home', 'Away') }}
        {% else %}
          'Unknown'
        {% endif %}

    - name: 'Flyers Opponent'
      unique_id: flyers_opponent
      state: >
        {% from 'friendly_strings.jinja' import format_hockey_opposition_team %}
        {{ format_hockey_opposition_team('sensor.flyers_game_status', 'sensor.next_flyers_game') }}
