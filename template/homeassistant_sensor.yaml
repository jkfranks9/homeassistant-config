#================================#
#     Home Assistant Sensors     #
#================================#

#---------- Trigger Sensors ----------#

#---------------------------------#
#   -- Global Variables Hack --   #
#---------------------------------#

- triggers:
    - trigger: event
      event_type: set_variable
  
    - trigger: event
      event_type: remove_variable
  
  sensor:
    - name: Variables
      unique_id: variables
      state: Variables
      
      attributes:
        variables: >
          {% set current = this.attributes.get('variables', {}) %}
          {% if trigger.event.event_type == 'set_variable' %}
            {% set new = {trigger.event.data.key: trigger.event.data.value} %}
            {{ dict(current, **new) }}
          {% elif trigger.event.event_type == 'remove_variable' %}
            {{ dict(current.items() | rejectattr('0', 'eq', trigger.event.data.key)) }}
          {% endif %}

#--------------------------#
#   -- Mini ToDo List --   #
#--------------------------#

# Mini todo list. This contains a daily suggested list of items to work on, including calendar events, cleaning, yard work,
# office tasks, major/minor projects, etc. Basically everything I need to help organize my life.
- triggers:
    - trigger: event
      event_type: add_mini_todo_item
    
    - trigger: event
      event_type: remove_mini_todo_item
    
    - trigger: event
      event_type: reset_mini_todo_items
  
  sensor:
    - name: Daily Mini ToDo List
      unique_id: daily_mini_todo_list
      state: Mini ToDo
      
      attributes:
        items: >
          {% set var1 = namespace(current = this.attributes.get('items', [])) %}
          {% if trigger.event.event_type == 'add_mini_todo_item' %}
            {% set var1.current = var1.current + [trigger.event.data.value] %}
          {% elif trigger.event.event_type == 'remove_mini_todo_item' %}
            {% set idx = var1.current.index(trigger.event.data.value) %}
            {% set var2 = namespace(new = []) %}
            {% for item in var1.current %}
              {% if loop.index0 != idx %}
                {% set var2.new = var2.new + [item] %}
              {% endif %}
            {% endfor %}
            {% set var1.current = var2.new %}
          {% elif trigger.event.event_type == 'reset_mini_todo_items' %}
            {% set var1.current = [] %}
          {% endif %}
          
          {{ var1.current }}

# These are inputs to the daily mini-todo list logic, consisting of a short list of items to be worked on.
# They are run once a week to generate the lists for the coming week. Items are then picked as needed by the
# mini-todo list automation throughout the week.

# Weekly cleaning list
- triggers:
    - trigger: event
      event_type: add_cleaning_item
    
    - trigger: event
      event_type: remove_cleaning_item
    
    - trigger: event
      event_type: reset_cleaning_items
  
  sensor:
    - name: Mini ToDo Weekly Cleaning List
      unique_id: mini_todo_weekly_cleaning_list
      state: Cleaning
      
      attributes:
        items: >
          {% set var1 = namespace(current = this.attributes.get('items', [])) %}
          {% if trigger.event.event_type == 'add_cleaning_item' %}
            {% set var1.current = var1.current + [trigger.event.data.value] %}
          {% elif trigger.event.event_type == 'remove_cleaning_item' %}
            {% set idx = var1.current.index(trigger.event.data.value) %}
            {% set var2 = namespace(new = []) %}
            {% for item in var1.current %}
              {% if loop.index0 != idx %}
                {% set var2.new = var2.new + [item] %}
              {% endif %}
            {% endfor %}
            {% set var1.current = var2.new %}
          {% elif trigger.event.event_type == 'reset_cleaning_items' %}
            {% set var1.current = [] %}
          {% endif %}
          
          {{ var1.current }}

# Weekly yard work list
- triggers:
    - trigger: event
      event_type: add_yard_work_item
    
    - trigger: event
      event_type: remove_yard_work_item
    
    - trigger: event
      event_type: reset_yard_work_items
  
  sensor:
    - name: Mini ToDo Weekly Yard Work List
      unique_id: mini_todo_weekly_yard_work_list
      state: Yard Work
      
      attributes:
        items: >
          {% set var1 = namespace(current = this.attributes.get('items', [])) %}
          {% if trigger.event.event_type == 'add_yard_work_item' %}
            {% set var1.current = var1.current + [trigger.event.data.value] %}
          {% elif trigger.event.event_type == 'remove_yard_work_item' %}
            {% set idx = var1.current.index(trigger.event.data.value) %}
            {% set var2 = namespace(new = []) %}
            {% for item in var1.current %}
              {% if loop.index0 != idx %}
                {% set var2.new = var2.new + [item] %}
              {% endif %}
            {% endfor %}
            {% set var1.current = var2.new %}
          {% elif trigger.event.event_type == 'reset_yard_work_items' %}
            {% set var1.current = [] %}
          {% endif %}
          
          {{ var1.current }}

# Weekly other list
- triggers:
    - trigger: event
      event_type: add_other_item
    
    - trigger: event
      event_type: remove_other_item
    
    - trigger: event
      event_type: reset_other_items
  
  sensor:
    - name: Mini ToDo Weekly Other List
      unique_id: mini_todo_weekly_other_list
      state: Other
      
      attributes:
        items: >
          {% set var1 = namespace(current = this.attributes.get('items', [])) %}
          {% if trigger.event.event_type == 'add_other_item' %}
            {% set var1.current = var1.current + [trigger.event.data.value] %}
          {% elif trigger.event.event_type == 'remove_other_item' %}
            {% set idx = var1.current.index(trigger.event.data.value) %}
            {% set var2 = namespace(new = []) %}
            {% for item in var1.current %}
              {% if loop.index0 != idx %}
                {% set var2.new = var2.new + [item] %}
              {% endif %}
            {% endfor %}
            {% set var1.current = var2.new %}
          {% elif trigger.event.event_type == 'reset_other_items' %}
            {% set var1.current = [] %}
          {% endif %}
          
          {{ var1.current }}

#---------- Normal Sensors ----------#

- sensor:

    #------------------#
    #   -- Hockey --   #
    #------------------#

    - name: 'Canes Game Status'
      unique_id: canes_game_status
      state: >
        {% if states.sensor.next_canes_game is defined and states.sensor.next_canes_game.attributes is defined and states.sensor.next_canes_game.attributes.homeTeam is defined %}
          {{ iif(state_attr('sensor.next_canes_game', 'homeTeam')['abbrev'] == 'CAR', 'Home', 'Away') }}
        {% else %}
          Unknown
        {% endif %}
      
      attributes:
        tv_networks: >
          {% set vars = namespace(tv = []) %}
          {% if states.sensor.next_canes_game is defined and states.sensor.next_canes_game.attributes is defined and states.sensor.next_canes_game.attributes.tvBroadcasts is defined %}
            {% for network in state_attr('sensor.next_canes_game', 'tvBroadcasts') %}
              {% if network['countryCode'] == 'US' and network['network'] == 'MAX' %}
                {% set vars.tv = vars.tv + ['Max'] %}
              {% elif network['countryCode'] == 'US' and network['network'] == 'ESPN' %}
                {% set vars.tv = vars.tv + ['ESPN'] %}
              {% elif network['countryCode'] == 'US' and network['network'] == 'ESPN+' %}
                {% set vars.tv = vars.tv + ['ESPN+'] %}
              {% elif network['countryCode'] == 'US' and network['network'] == 'FDSNSO' %}
                {% set vars.tv = vars.tv + ['FanDuel'] %}
              {% endif %}
            {% endfor %}
          {% else %}
            {% set vars.tv = ['Unknown'] %}
          {% endif %}
          
          {{ vars.tv }}

    - name: 'Canes Opponent'
      unique_id: canes_opponent
      state: >
        {% if states('sensor.canes_game_status') == 'Home' %}
          {{ state_attr('sensor.next_canes_game', 'awayTeam')['abbrev'] }}
        {% elif states('sensor.canes_game_status') == 'Away' %}
          {{ state_attr('sensor.next_canes_game', 'homeTeam')['abbrev'] }}
        {% else %}
          Unknown
        {% endif %}
      
      attributes:
        friendly_opponent: >
          {% set vars = namespace(name = 'Unknown') %}
          
          {% set abbrev = this.state %}
          {% for team in state_attr('sensor.nhl_team_abbrev', 'abbrev') %}
            {% if team == abbrev %}
              {% set vars.name = state_attr('sensor.nhl_team_names', 'names')[loop.index0] %}
              {% break %}
            {% endif %}
          {% endfor %}
          
          {{ vars.name }}

    - name: 'Flyers Game Status'
      unique_id: flyers_game_status
      state: >
        {% if states.sensor.next_flyers_game is defined and states.sensor.next_flyers_game.attributes is defined and states.sensor.next_flyers_game.attributes.homeTeam is defined %}
          {{ iif(state_attr('sensor.next_flyers_game', 'homeTeam')['abbrev'] == 'PHI', 'Home', 'Away') }}
        {% else %}
          Unknown
        {% endif %}

    - name: 'Flyers Opponent'
      unique_id: flyers_opponent
      state: >
        {% if states('sensor.flyers_game_status') == 'Home' %}
          {{ state_attr('sensor.next_flyers_game', 'awayTeam')['abbrev'] }}
        {% elif states('sensor.flyers_game_status') == 'Away' %}
          {{ state_attr('sensor.next_flyers_game', 'homeTeam')['abbrev'] }}
        {% else %}
          Unknown
        {% endif %}
      
      attributes:
        friendly_opponent: >
          {% set vars = namespace(name = 'Unknown') %}
          
          {% set abbrev = this.state %}
          {% for team in state_attr('sensor.nhl_team_abbrev', 'abbrev') %}
            {% if team == abbrev %}
              {% set vars.name = state_attr('sensor.nhl_team_names', 'names')[loop.index0] %}
              {% break %}
            {% endif %}
          {% endfor %}

#---------- Miscellaneous ----------#

# Template select that is used on the UI, containing the current mobile tag registry keys. When an option is selected,
# that tag is removed from my phone and the tag registry. This is only used if a non-manual tag somehow gets stuck, as
# there is no other easy way to remove such a thing.
- select:
    - name: Mobile Tag Keys
      unique_id: mobile_tag_keys
      state: Select
      options: "{{ state_attr('sensor.mobile_tag_registry_keys', 'tags') }}"
      select_option:
        - action: script.remove_mobile_notification
          data:
            tag:  "{{ option }}"
