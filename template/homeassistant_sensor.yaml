#================================#
#     Home Assistant Sensors     #
#================================#

#---------- Trigger Sensors ----------#

#---------------------------------#
#   -- Global Variables Hack --   #
#---------------------------------#

- trigger:
    - platform: event
      event_type: set_variable
  
    - platform: event
      event_type: remove_variable
  
  sensor:
    - name: Variables
      unique_id: variables
      state: Variables
      
      attributes:
        variables: >
          {% set current = this.attributes.get('variables', {}) %}
          {% if trigger.event.event_type == 'set_variable' %}
            {% set new = {trigger.event.data.key: trigger.event.data.value} %}
            {{ dict(current, **new) }}
          {% elif trigger.event.event_type == 'remove_variable' %}
            {{ dict(current.items() | rejectattr('0', 'eq', trigger.event.data.key)) }}
          {% endif %}

#----------------------#
#   -- Gas Prices --   #
#----------------------#

# Lowest price for all gas stations in Siler City.
- trigger:
    
    # Trigger on the REST sensor changing.
    - platform: state
      entity_id: sensor.gas_search_siler_city
    
    # Trigger every hour.
    - platform: time_pattern
      minutes: 0
  
  sensor:
    - name: Best Price Gas Siler City
      unique_id: best_price_gas_siler_city
      icon: mdi:gas-station
      unit_of_measurement: USD
      state_class: measurement
      
      # The state is the lowest cash or credit price among all the stations returned via the REST sensor.
      state: >
        {% set vars = namespace(price = None) %}
        
        {% for price_details in this.attributes.prices %}
          {% set cash_price = price_details.get('cash') %}
          {% set credit_price = price_details.get('credit') %}
          
          {% if cash_price != None and (vars.price == None or cash_price | float(0) < vars.price | float(0)) %}
            {% set vars.price = cash_price %}
          {% endif %}
          {% if credit_price != None and (vars.price == None or credit_price | float(0) < vars.price | float(0)) %}
            {% set vars.price = credit_price %}
          {% endif %}
        {% endfor %}
        
        {{ vars.price | float(0) }}
      
      attributes:
        
        # This is all the stations with a non-zero cash and/or credit price. We only care about regular gas.
        prices: >
          {% set vars = namespace(prices = []) %}
          {% set stations = state_attr('sensor.gas_search_siler_city', 'stations') %}
          
          {% if stations != None and stations.results != None %}
            {% for result in stations.results %}
              {% for fuel in result.fuels %}
                {% if fuel == "regular_gas" %}
                  {% set fuel_vars = namespace(index = loop.index - 1, details = '') %}
                  
                  {% if fuel_vars.index < result.prices | length %}
                    {% set fuel_price = result.prices[fuel_vars.index] %}
                    
                    {% if fuel_price.cash != None and fuel_price.cash.price > 0 %}
                      {% set fuel_vars.details = fuel_vars.details + "\"cash\" : " + fuel_price.cash.price | string  %}
                    {% endif %}
                    {% if fuel_price.credit != None and fuel_price.credit.price > 0 %}
                      {% if fuel_vars.details | length > 0 %}
                        {% set fuel_vars.details = fuel_vars.details + "," %}
                      {% endif %}
                      {% set fuel_vars.details = fuel_vars.details + "\"credit\" : " + fuel_price.credit.price | string %}
                    {% endif %}
                    {% if fuel_vars.details | length > 0 %}
                      {% set additional_details =
                        "\"station\" : {" + 
                          "\"id\" : " + result.id|string + "," + 
                          "\"name\" : \"" + result.name + "\""
                        "}," + 
                        "\"address\" : {" + 
                          "\"line1\" : \"" + result.address.line1 + "\"," + 
                          "\"line2\" : \"" + result.address.line2 + "\"," + 
                          "\"locality\" : \"" + result.address.locality + "\"," + 
                          "\"postal_code\" : \"" + result.address.postalCode + "\"," +
                          "\"region\" : \"" + result.address.region + "\"" +
                        "}" %}
                      {% set fuel_vars.details = additional_details + "," + fuel_vars.details %}
                    {% endif %}
                  {% endif %}
                  {% if fuel_vars.details | length > 0 %}
                    {% set vars.prices = vars.prices + [ ('{' + fuel_vars.details + '}') | from_json ]  %}
                  {% endif %}
                {% endif %}
              {%endfor%}
            {% endfor %}
          {% endif %}
          
          {{ vars.prices }}
        
        # This is the station details for the lowest price found.
        lowest_price_details: >
          {% set vars = namespace(price = None, lowest_price_details = None) %}
          
          {% for price_details in this.attributes.prices %}
            {% set cash_price = price_details.get('cash') %}
            {% set credit_price = price_details.get('credit') %}
            
            {% if vars.lowest_price_details == None %}
              {% set vars.lowest_price_details = price_details %}
            {% endif %}
            {% if cash_price != None and (vars.price == None or cash_price < vars.price) %}
              {% set vars.price = cash_price %}
              {% set vars.lowest_price_details = price_details %}
            {% endif %}
            {% if credit_price != None and (vars.price == None or credit_price < vars.price) %}
              {% set vars.price = credit_price %}
              {% set vars.lowest_price_details = price_details %}
            {% endif %}
          {% endfor %}
          
          {{ vars.lowest_price_details }}

# Lowest price for all gas stations in Pittsboro.
- trigger:
    
    # Trigger on the REST sensor changing.
    - platform: state
      entity_id: sensor.gas_search_pittsboro
    
    # Trigger every hour.
    - platform: time_pattern
      minutes: 0
  
  sensor:
    - name: Best Price Gas Pittsboro
      unique_id: best_price_gas_pittsboro
      icon: mdi:gas-station
      unit_of_measurement: USD
      state_class: measurement
      
      # The state is the lowest cash or credit price among all the stations returned via the REST sensor.
      state: >
        {% set vars = namespace(price = None) %}
        
        {% for price_details in this.attributes.prices %}
          {% set cash_price = price_details.get('cash') %}
          {% set credit_price = price_details.get('credit') %}
          
          {% if cash_price != None and (vars.price == None or cash_price | float(0) < vars.price | float(0)) %}
            {% set vars.price = cash_price %}
          {% endif %}
          {% if credit_price != None and (vars.price == None or credit_price | float(0) < vars.price | float(0)) %}
            {% set vars.price = credit_price %}
          {% endif %}
        {% endfor %}
        
        {{ vars.price | float(0) }}
      
      attributes:
        
        # This is all the stations with a non-zero cash and/or credit price. We only care about regular gas.
        prices: >
          {% set vars = namespace(prices = []) %}
          {% set stations = state_attr('sensor.gas_search_pittsboro', 'stations') %}
          
          {% if stations != None and stations.results != None %}
            {% for result in stations.results %}
              {% for fuel in result.fuels %}
                {% if fuel == "regular_gas" %}
                  {% set fuel_vars = namespace(index = loop.index - 1, details = '') %}
                  
                  {% if fuel_vars.index < result.prices | length %}
                    {% set fuel_price = result.prices[fuel_vars.index] %}
                    
                    {% if fuel_price.cash != None and fuel_price.cash.price > 0 %}
                      {% set fuel_vars.details = fuel_vars.details + "\"cash\" : " + fuel_price.cash.price | string  %}
                    {% endif %}
                    {% if fuel_price.credit != None and fuel_price.credit.price > 0 %}
                      {% if fuel_vars.details | length > 0 %}
                        {% set fuel_vars.details = fuel_vars.details + "," %}
                      {% endif %}
                      {% set fuel_vars.details = fuel_vars.details + "\"credit\" : " + fuel_price.credit.price | string %}
                    {% endif %}
                    {% if fuel_vars.details | length > 0 %}
                      {% set additional_details =
                        "\"station\" : {" + 
                          "\"id\" : " + result.id|string + "," + 
                          "\"name\" : \"" + result.name + "\""
                        "}," + 
                        "\"address\" : {" + 
                          "\"line1\" : \"" + result.address.line1 + "\"," + 
                          "\"line2\" : \"" + result.address.line2 + "\"," + 
                          "\"locality\" : \"" + result.address.locality + "\"," + 
                          "\"postal_code\" : \"" + result.address.postalCode + "\"," +
                          "\"region\" : \"" + result.address.region + "\"" +
                        "}" %}
                      {% set fuel_vars.details = additional_details + "," + fuel_vars.details %}
                    {% endif %}
                  {% endif %}
                  {% if fuel_vars.details | length > 0 %}
                    {% set vars.prices = vars.prices + [ ('{' + fuel_vars.details + '}') | from_json ]  %}
                  {% endif %}
                {% endif %}
              {%endfor%}
            {% endfor %}
          {% endif %}
          
          {{ vars.prices }}
        
        # This is the station details for the lowest price found.
        lowest_price_details: >
          {% set vars = namespace(price = None, lowest_price_details = None) %}
          
          {% for price_details in this.attributes.prices %}
            {% set cash_price = price_details.get('cash') %}
            {% set credit_price = price_details.get('credit') %}
            
            {% if vars.lowest_price_details == None %}
              {% set vars.lowest_price_details = price_details %}
            {% endif %}
            {% if cash_price != None and (vars.price == None or cash_price < vars.price) %}
              {% set vars.price = cash_price %}
              {% set vars.lowest_price_details = price_details %}
            {% endif %}
            {% if credit_price != None and (vars.price == None or credit_price < vars.price) %}
              {% set vars.price = credit_price %}
              {% set vars.lowest_price_details = price_details %}
            {% endif %}
          {% endfor %}
          
          {{ vars.lowest_price_details }}

#--------------------------#
#   -- Mini ToDo List --   #
#--------------------------#

# Mini todo list. This contains a daily suggested list of items to work on, including calendar events, cleaning, yard work,
# exercise, office tasks, major/minor projects, etc. Basically everything I need to help organize my life.
- trigger:
    - platform: event
      event_type: add_mini_todo_item
    
    - platform: event
      event_type: remove_mini_todo_item
    
    - platform: event
      event_type: reset_mini_todo_items
  
  sensor:
    - name: Daily Mini ToDo List
      unique_id: daily_mini_todo_list
      state: Mini ToDo
      
      attributes:
        items: >
          {% set var1 = namespace(current = this.attributes.get('items', [])) %}
          {% if trigger.event.event_type == 'add_mini_todo_item' %}
            {% set var1.current = var1.current + [trigger.event.data.value] %}
          {% elif trigger.event.event_type == 'remove_mini_todo_item' %}
            {% set idx = var1.current.index(trigger.event.data.value) %}
            {% set var2 = namespace(new = []) %}
            {% for item in var1.current %}
              {% if loop.index0 != idx %}
                {% set var2.new = var2.new + [item] %}
              {% endif %}
            {% endfor %}
            {% set var1.current = var2.new %}
          {% elif trigger.event.event_type == 'reset_mini_todo_items' %}
            {% set var1.current = [] %}
          {% endif %}
          
          {{ var1.current }}

# These are inputs to the daily mini-todo list logic, consisting of a short list of items to be worked on.
# They are run once a week to generate the lists for the coming week. Items are then picked as needed by the
# mini-todo list automation throughout the week.

# Weekly cleaning list
- trigger:
    - platform: event
      event_type: add_cleaning_item
    
    - platform: event
      event_type: remove_cleaning_item
    
    - platform: event
      event_type: reset_cleaning_items
  
  sensor:
    - name: Mini ToDo Weekly Cleaning List
      unique_id: mini_todo_weekly_cleaning_list
      state: Cleaning
      
      attributes:
        items: >
          {% set var1 = namespace(current = this.attributes.get('items', [])) %}
          {% if trigger.event.event_type == 'add_cleaning_item' %}
            {% set var1.current = var1.current + [trigger.event.data.value] %}
          {% elif trigger.event.event_type == 'remove_cleaning_item' %}
            {% set idx = var1.current.index(trigger.event.data.value) %}
            {% set var2 = namespace(new = []) %}
            {% for item in var1.current %}
              {% if loop.index0 != idx %}
                {% set var2.new = var2.new + [item] %}
              {% endif %}
            {% endfor %}
            {% set var1.current = var2.new %}
          {% elif trigger.event.event_type == 'reset_cleaning_items' %}
            {% set var1.current = [] %}
          {% endif %}
          
          {{ var1.current }}

# Weekly yard work list
- trigger:
    - platform: event
      event_type: add_yard_work_item
    
    - platform: event
      event_type: remove_yard_work_item
    
    - platform: event
      event_type: reset_yard_work_items
  
  sensor:
    - name: Mini ToDo Weekly Yard Work List
      unique_id: mini_todo_weekly_yard_work_list
      state: Yard Work
      
      attributes:
        items: >
          {% set var1 = namespace(current = this.attributes.get('items', [])) %}
          {% if trigger.event.event_type == 'add_yard_work_item' %}
            {% set var1.current = var1.current + [trigger.event.data.value] %}
          {% elif trigger.event.event_type == 'remove_yard_work_item' %}
            {% set idx = var1.current.index(trigger.event.data.value) %}
            {% set var2 = namespace(new = []) %}
            {% for item in var1.current %}
              {% if loop.index0 != idx %}
                {% set var2.new = var2.new + [item] %}
              {% endif %}
            {% endfor %}
            {% set var1.current = var2.new %}
          {% elif trigger.event.event_type == 'reset_yard_work_items' %}
            {% set var1.current = [] %}
          {% endif %}
          
          {{ var1.current }}

# Weekly other list
- trigger:
    - platform: event
      event_type: add_other_item
    
    - platform: event
      event_type: remove_other_item
    
    - platform: event
      event_type: reset_other_items
  
  sensor:
    - name: Mini ToDo Weekly Other List
      unique_id: mini_todo_weekly_other_list
      state: Other
      
      attributes:
        items: >
          {% set var1 = namespace(current = this.attributes.get('items', [])) %}
          {% if trigger.event.event_type == 'add_other_item' %}
            {% set var1.current = var1.current + [trigger.event.data.value] %}
          {% elif trigger.event.event_type == 'remove_other_item' %}
            {% set idx = var1.current.index(trigger.event.data.value) %}
            {% set var2 = namespace(new = []) %}
            {% for item in var1.current %}
              {% if loop.index0 != idx %}
                {% set var2.new = var2.new + [item] %}
              {% endif %}
            {% endfor %}
            {% set var1.current = var2.new %}
          {% elif trigger.event.event_type == 'reset_other_items' %}
            {% set var1.current = [] %}
          {% endif %}
          
          {{ var1.current }}

#---------- Normal Sensors ----------#

- sensor:

    #----------------#
    #   -- Misc --   #
    #----------------#

    - name: 'Canes Game Status'
      unique_id: canes_game_status
      state: >
        {% if states.sensor.next_canes_game is defined and states.sensor.next_canes_game.attributes is defined and states.sensor.next_canes_game.attributes.homeTeam is defined %}
          {{ iif(state_attr('sensor.next_canes_game', 'homeTeam')['abbrev'] == 'CAR', 'Home', 'Away') }}
        {% else %}
          Unknown
        {% endif %}

    - name: 'Canes Opponent'
      unique_id: canes_opponent
      state: >
        {% if states('sensor.canes_game_status') == 'Home' %}
          {{ state_attr('sensor.next_canes_game', 'awayTeam')['abbrev'] }}
        {% elif states('sensor.canes_game_status') == 'Away' %}
          {{ state_attr('sensor.next_canes_game', 'homeTeam')['abbrev'] }}
        {% else %}
          Unknown
        {% endif %}
      
      attributes:
        friendly_opponent: >
          {% set vars = namespace(name = 'Unknown') %}
          
          {% set abbrev = this.state %}
          {% if state_attr('sensor.variables', 'variables') != None %}
            {% for team in state_attr('sensor.variables', 'variables').hockey_teams %}
              {% if team[0] == abbrev %}
                {% set vars.name = team[1] %}
                {% break %}
              {% endif %}
            {% endfor %}
          {% endif %}
          
          {{ vars.name }}

    - name: 'Flyers Game Status'
      unique_id: flyers_game_status
      state: >
        {% if states.sensor.next_flyers_game is defined and states.sensor.next_flyers_game.attributes is defined and states.sensor.next_flyers_game.attributes.homeTeam is defined %}
          {{ iif(state_attr('sensor.next_flyers_game', 'homeTeam')['abbrev'] == 'PHI', 'Home', 'Away') }}
        {% else %}
          Unknown
        {% endif %}

    - name: 'Flyers Opponent'
      unique_id: flyers_opponent
      state: >
        {% if states('sensor.flyers_game_status') == 'Home' %}
          {{ state_attr('sensor.next_flyers_game', 'awayTeam')['abbrev'] }}
        {% elif states('sensor.flyers_game_status') == 'Away' %}
          {{ state_attr('sensor.next_flyers_game', 'homeTeam')['abbrev'] }}
        {% else %}
          Unknown
        {% endif %}
      
      attributes:
        friendly_opponent: >
          {% set vars = namespace(name = 'Unknown') %}
          
          {% set abbrev = this.state %}
          {% if state_attr('sensor.variables', 'variables') != None %}
            {% for team in state_attr('sensor.variables', 'variables').hockey_teams %}
              {% if team[0] == abbrev %}
                {% set vars.name = team[1] %}
                {% break %}
              {% endif %}
            {% endfor %}
          {% endif %}
          
          {{ vars.name }}

#---------- Miscellaneous ----------#

# Template select that is used on the UI, containing the current mobile tag registry keys. When an option is selected,
# that tag is removed from my phome and the tag registry. This is only used if a non-manual tag somehow gets stuck, as
# there is no other easy way to remove such a thing.
- select:
    - name: Mobile Tag Keys
      unique_id: mobile_tag_keys
      state: Select
      options: "{{ state_attr('sensor.mobile_tag_registry_keys', 'tags') }}"
      select_option:
        - service: script.remove_mobile_notification
          data:
            tag:  "{{ option }}"
