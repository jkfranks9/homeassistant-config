#================================#
#     Home Assistant Sensors     #
#================================#

#---------------------------------#
#   -- Global Variables Hack --   #
#---------------------------------#

- trigger:
    - platform: event
      event_type: set_variable
  
    - platform: event
      event_type: remove_variable
  
  sensor:
    - name: Variables
      unique_id: variables
      state: Variables
      
      attributes:
        variables: >
          {% set current = this.attributes.get('variables', {}) %}
          {% if trigger.event.event_type == 'set_variable' %}
            {% set new = {trigger.event.data.key: trigger.event.data.value} %}
            {{ dict(current, **new) }}
          {% elif trigger.event.event_type == 'remove_variable' %}
            {{ dict(current.items() | rejectattr('0', 'eq', trigger.event.data.key)) }}
          {% endif %}

#----------------------#
#   -- Gas Prices --   #
#----------------------#

# Lowest price for all gas stations in Siler City.
- trigger:
    
    # Trigger on the REST sensor changing.
    - platform: state
      entity_id: sensor.gas_search_siler_city
    
    # Trigger every hour.
    - platform: time_pattern
      minutes: 0
  
  sensor:
    - name: Best Price Gas Siler City
      unique_id: best_price_gas_siler_city
      icon: mdi:gas-station
      unit_of_measurement: USD
      state_class: measurement
      
      # The state is the lowest cash or credit price among all the stations returned via the REST sensor.
      state: >
        {% set vars = namespace(price = None) %}
        
        {% for price_details in this.attributes.prices %}
          {% set cash_price = price_details.get('cash') %}
          {% set credit_price = price_details.get('credit') %}
          
          {% if cash_price != None and (vars.price == None or cash_price | float(0) < vars.price | float(0)) %}
            {% set vars.price = cash_price %}
          {% endif %}
          {% if credit_price != None and (vars.price == None or credit_price | float(0) < vars.price | float(0)) %}
            {% set vars.price = credit_price %}
          {% endif %}
        {% endfor %}
        
        {{ vars.price | float(0) }}
      
      attributes:
        
        # This is all the stations with a non-zero cash and/or credit price. We only care about regular gas.
        prices: >
          {% set vars = namespace(prices = []) %}
          {% set stations = state_attr('sensor.gas_search_siler_city', 'stations') %}
          
          {% if stations != None and stations.results != None %}
            {% for result in stations.results %}
              {% for fuel in result.fuels %}
                {% if fuel == "regular_gas" %}
                  {% set fuel_vars = namespace(index = loop.index - 1, details = '') %}
                  
                  {% if fuel_vars.index < result.prices | length %}
                    {% set fuel_price = result.prices[fuel_vars.index] %}
                    
                    {% if fuel_price.cash != None and fuel_price.cash.price > 0 %}
                      {% set fuel_vars.details = fuel_vars.details + "\"cash\" : " + fuel_price.cash.price | string  %}
                    {% endif %}
                    {% if fuel_price.credit != None and fuel_price.credit.price > 0 %}
                      {% if fuel_vars.details | length > 0 %}
                        {% set fuel_vars.details = fuel_vars.details + "," %}
                      {% endif %}
                      {% set fuel_vars.details = fuel_vars.details + "\"credit\" : " + fuel_price.credit.price | string %}
                    {% endif %}
                    {% if fuel_vars.details | length > 0 %}
                      {% set additional_details =
                        "\"station\" : {" + 
                          "\"id\" : " + result.id|string + "," + 
                          "\"name\" : \"" + result.name + "\""
                        "}," + 
                        "\"address\" : {" + 
                          "\"line1\" : \"" + result.address.line1 + "\"," + 
                          "\"line2\" : \"" + result.address.line2 + "\"," + 
                          "\"locality\" : \"" + result.address.locality + "\"," + 
                          "\"postal_code\" : \"" + result.address.postalCode + "\"," +
                          "\"region\" : \"" + result.address.region + "\"" +
                        "}" %}
                      {% set fuel_vars.details = additional_details + "," + fuel_vars.details %}
                    {% endif %}
                  {% endif %}
                  {% if fuel_vars.details | length > 0 %}
                    {% set vars.prices = vars.prices + [ ('{' + fuel_vars.details + '}') | from_json ]  %}
                  {% endif %}
                {% endif %}
              {%endfor%}
            {% endfor %}
          {% endif %}
          
          {{ vars.prices }}
        
        # This is the station details for the lowest price found.
        lowest_price_details: >
          {% set vars = namespace(price = None, lowest_price_details = None) %}
          
          {% for price_details in this.attributes.prices %}
            {% set cash_price = price_details.get('cash') %}
            {% set credit_price = price_details.get('credit') %}
            
            {% if vars.lowest_price_details == None %}
              {% set vars.lowest_price_details = price_details %}
            {% endif %}
            {% if cash_price != None and (vars.price == None or cash_price < vars.price) %}
              {% set vars.price = cash_price %}
              {% set vars.lowest_price_details = price_details %}
            {% endif %}
            {% if credit_price != None and (vars.price == None or credit_price < vars.price) %}
              {% set vars.price = credit_price %}
              {% set vars.lowest_price_details = price_details %}
            {% endif %}
          {% endfor %}
          
          {{ vars.lowest_price_details }}

# Lowest price for all gas stations in Pittsboro.
- trigger:
    
    # Trigger on the REST sensor changing.
    - platform: state
      entity_id: sensor.gas_search_pittsboro
    
    # Trigger every hour.
    - platform: time_pattern
      minutes: 0
  
  sensor:
    - name: Best Price Gas Pittsboro
      unique_id: best_price_gas_pittsboro
      icon: mdi:gas-station
      unit_of_measurement: USD
      state_class: measurement
      
      # The state is the lowest cash or credit price among all the stations returned via the REST sensor.
      state: >
        {% set vars = namespace(price = None) %}
        
        {% for price_details in this.attributes.prices %}
          {% set cash_price = price_details.get('cash') %}
          {% set credit_price = price_details.get('credit') %}
          
          {% if cash_price != None and (vars.price == None or cash_price | float(0) < vars.price | float(0)) %}
            {% set vars.price = cash_price %}
          {% endif %}
          {% if credit_price != None and (vars.price == None or credit_price | float(0) < vars.price | float(0)) %}
            {% set vars.price = credit_price %}
          {% endif %}
        {% endfor %}
        
        {{ vars.price | float(0) }}
      
      attributes:
        
        # This is all the stations with a non-zero cash and/or credit price. We only care about regular gas.
        prices: >
          {% set vars = namespace(prices = []) %}
          {% set stations = state_attr('sensor.gas_search_pittsboro', 'stations') %}
          
          {% if stations != None and stations.results != None %}
            {% for result in stations.results %}
              {% for fuel in result.fuels %}
                {% if fuel == "regular_gas" %}
                  {% set fuel_vars = namespace(index = loop.index - 1, details = '') %}
                  
                  {% if fuel_vars.index < result.prices | length %}
                    {% set fuel_price = result.prices[fuel_vars.index] %}
                    
                    {% if fuel_price.cash != None and fuel_price.cash.price > 0 %}
                      {% set fuel_vars.details = fuel_vars.details + "\"cash\" : " + fuel_price.cash.price | string  %}
                    {% endif %}
                    {% if fuel_price.credit != None and fuel_price.credit.price > 0 %}
                      {% if fuel_vars.details | length > 0 %}
                        {% set fuel_vars.details = fuel_vars.details + "," %}
                      {% endif %}
                      {% set fuel_vars.details = fuel_vars.details + "\"credit\" : " + fuel_price.credit.price | string %}
                    {% endif %}
                    {% if fuel_vars.details | length > 0 %}
                      {% set additional_details =
                        "\"station\" : {" + 
                          "\"id\" : " + result.id|string + "," + 
                          "\"name\" : \"" + result.name + "\""
                        "}," + 
                        "\"address\" : {" + 
                          "\"line1\" : \"" + result.address.line1 + "\"," + 
                          "\"line2\" : \"" + result.address.line2 + "\"," + 
                          "\"locality\" : \"" + result.address.locality + "\"," + 
                          "\"postal_code\" : \"" + result.address.postalCode + "\"," +
                          "\"region\" : \"" + result.address.region + "\"" +
                        "}" %}
                      {% set fuel_vars.details = additional_details + "," + fuel_vars.details %}
                    {% endif %}
                  {% endif %}
                  {% if fuel_vars.details | length > 0 %}
                    {% set vars.prices = vars.prices + [ ('{' + fuel_vars.details + '}') | from_json ]  %}
                  {% endif %}
                {% endif %}
              {%endfor%}
            {% endfor %}
          {% endif %}
          
          {{ vars.prices }}
        
        # This is the station details for the lowest price found.
        lowest_price_details: >
          {% set vars = namespace(price = None, lowest_price_details = None) %}
          
          {% for price_details in this.attributes.prices %}
            {% set cash_price = price_details.get('cash') %}
            {% set credit_price = price_details.get('credit') %}
            
            {% if vars.lowest_price_details == None %}
              {% set vars.lowest_price_details = price_details %}
            {% endif %}
            {% if cash_price != None and (vars.price == None or cash_price < vars.price) %}
              {% set vars.price = cash_price %}
              {% set vars.lowest_price_details = price_details %}
            {% endif %}
            {% if credit_price != None and (vars.price == None or credit_price < vars.price) %}
              {% set vars.price = credit_price %}
              {% set vars.lowest_price_details = price_details %}
            {% endif %}
          {% endfor %}
          
          {{ vars.lowest_price_details }}

- sensor:

    #----------------------#
    #   -- Gas Prices --   #
    #----------------------#
    
    - name: Gas Station Name Siler City
      unique_id: gas_station_name_siler_city
      state: >
        {% set details = state_attr('sensor.best_price_gas_siler_city', 'lowest_price_details') %}
        {% set station = details.get('station') %}
        {% set name = station.get('name') %}
          
        {{ name }}
    
    - name: Gas Station Name Pittsboro
      unique_id: gas_station_name_pittsboro
      state: >
        {% set details = state_attr('sensor.best_price_gas_pittsboro', 'lowest_price_details') %}
        {% set station = details.get('station') %}
        {% set name = station.get('name') %}
          
        {{ name }}

    #---------------------------#
    #   -- History Linking --   #
    #---------------------------#
    
    # List of washer start/stop datetimes for history purposes. The state is a count of all history sets.
    - name: History Washer Debug Ranges
      unique_id: history_washer_debug_ranges
      state: "{{ this.attributes.time_ranges | length }}"
      
      attributes:
        time_ranges: >
          {% set time_ranges = [
                                ['input_datetime.history_washer_start_1', 'input_datetime.history_washer_stop_1'],
                                ['input_datetime.history_washer_start_2', 'input_datetime.history_washer_stop_2'],
                                ['input_datetime.history_washer_start_3', 'input_datetime.history_washer_stop_3'],
                                ['input_datetime.history_washer_start_4', 'input_datetime.history_washer_stop_4'],
                                ['input_datetime.history_washer_start_5', 'input_datetime.history_washer_stop_5']
                               ] %}
          
          {{ time_ranges }}
    
    - name: History Washer Debug Current Index
      unique_id: history_washer_debug_current_index
      state: >
        {# --Create null (zero) current index and timestamp-- #}
        {% set curr = namespace(index = 0, timestamp = 0) %}
          
        {# --Loop through all sets of timestamps-- #}
        {% for time_range in state_attr('sensor.history_washer_debug_ranges', 'time_ranges') %}
            
          {# --We only need to check one value, so we choose the start-- #}
          {% set start = state_attr(time_range[0], 'timestamp') | int(0) %}
            
          {# --Update the current index and timestamp if this is the most recent-- #}
          {% if start > curr.timestamp %}
            {% set curr.timestamp = start %}
            {% set curr.index = loop.index0 %}
          {% endif %}
        {% endfor %}
          
        {{ curr.index }}
    
    # List of dryer start/stop timestamps for history purposes. The state is a count of all history sets.
    - name: History Dryer Debug Ranges
      unique_id: history_dryer_debug_ranges
      state: "{{ this.attributes.time_ranges | length }}"
      
      attributes:
        time_ranges: >
          {% set time_ranges = [
                                ['input_datetime.history_dryer_start_1', 'input_datetime.history_dryer_stop_1'],
                                ['input_datetime.history_dryer_start_2', 'input_datetime.history_dryer_stop_2'],
                                ['input_datetime.history_dryer_start_3', 'input_datetime.history_dryer_stop_3'],
                                ['input_datetime.history_dryer_start_4', 'input_datetime.history_dryer_stop_4'],
                                ['input_datetime.history_dryer_start_5', 'input_datetime.history_dryer_stop_5']
                               ] %}
          
          {{ time_ranges }}
    
    - name: History Dryer Debug Current Index
      unique_id: history_dryer_debug_current_index
      state: >
        {# --Create null (zero) current index and timestamp-- #}
        {% set curr = namespace(index = 0, timestamp = 0) %}
          
        {# --Loop through all sets of timestamps-- #}
        {% for time_range in state_attr('sensor.history_dryer_debug_ranges', 'time_ranges') %}
            
          {# --We only need to check one value, so we choose the start-- #}
          {% set start = state_attr(time_range[0], 'timestamp') | int(0) %}
            
          {# --Update the current index and timestamp if this is the most recent-- #}
          {% if start > curr.timestamp %}
            {% set curr.timestamp = start %}
            {% set curr.index = loop.index0 %}
          {% endif %}
        {% endfor %}
          
        {{ curr.index }}

    #-----------------#
    #   -- Dates --   #
    #-----------------#
    
    - name: Credit Reports Due
      unique_id: credit_reports_due
      state: "{{ now().month == 1 and now().day == 15 }}"
    
    - name: First Of Month
      unique_id: first_of_month
      state: "{{ now().day == 1 }}"

    #--------------------------#
    #   -- Nighttime Mode --   #
    #--------------------------#
    
    # Convert nighttime boolean for dashboard
    - name: 'Nighttime'
      unique_id: nighttime
      state: "{{ iif(is_state('input_boolean.nighttime', 'on'), 1, 0) }}"

    #-------------------------#
    #   -- Effective Sun --   #
    #-------------------------#
    
    # This reflects either the real sun, or a virtual sun that can be used with the testing infrastructure.
    # Note that it only contains the state and a subset of the real sun attributes (only those attributes needed for testing).
    - name: Effective Sun
      unique_id: effective_sun
      state: >
        {% from 'testing.jinja' import get_testing_value %}
        {{ get_testing_value('input_select.virtual_sun_state', 'none', '') }}
      attributes:
        elevation: >
          {% from 'testing.jinja' import get_testing_value %}
          {{ get_testing_value('input_number.virtual_sun_elevation', 0, 'elevation') }}
        rising: >
          {% from 'testing.jinja' import get_testing_value %}
          {{ get_testing_value('input_select.virtual_sun_rising', 'none', 'rising') }}

    #-------------------#
    #   -- Backups --   #
    #-------------------#
    
    # Google Drive free percent
    - name: 'Google Drive Free Percent'
      unique_id: google_drive_free_percent
      unit_of_measurement: '%'
      state: "{{ ((1 - (state_attr('sensor.backup_state', 'free_space_in_google_drive') | replace(' GB', '') | float(0) / 15)) * 100) | round(2) }}"

    #----------------------#
    #   -- Statistics --   #
    #----------------------#
    
    - name: 'Count Automations'
      unique_id: count_automations
      state: "{{ states.automation | count }}"
    
    - name: 'Count Binary Sensors'
      unique_id: count_binary_sensors
      state: "{{ states.binary_sensor| count }}"
    
    - name: 'Count Device Trackers'
      unique_id: count_device_trackers
      state: "{{ states.device_tracker | count }}"
    
    - name: 'Count Media Players'
      unique_id: count_media_players
      state: "{{ states.media_player| count }}"
    
    - name: 'Count Input Booleans'
      unique_id: count_input_booleans
      state: "{{ states.input_boolean | count }}"
    
    - name: 'Count Input Datetimes'
      unique_id: count_input_datetimes
      state: "{{ states.input_datetime | count }}"
    
    - name: 'Count Input Numbers'
      unique_id: count_input_numbers
      state: "{{ states.input_number | count }}"
    
    - name: 'Count Lights'
      unique_id: count_lights
      state: "{{ states.light | count }}"
    
    - name: 'Count Scenes'
      unique_id: count_scenes
      state: "{{ states.scene| count }}"
    
    - name: 'Count Scripts'
      unique_id: count_scripts
      state: "{{ states.script| count }}"
    
    - name: 'Count Sensors'
      unique_id: count_sensors
      state: "{{ states.sensor | count }}"
    
    - name: 'Count Switches'
      unique_id: count_switches
      state: "{{ states.switch | count }}"
    
    - name: 'Count Timers'
      unique_id: count_timers
      state: "{{ states.timer | count }}"
    
    - name: 'Count Zones'
      unique_id: count_zones
      state: "{{ states.zone | count }}"

    #---------------------------#
    #   -- Boot / Up Times --   #
    #---------------------------#
    
    # Home Assistant uptime    
    - name: 'HA Uptime'
      unique_id: ha_uptime
      state: >
        {% from 'friendly_strings.jinja' import format_duration %}
        {{ format_duration(as_timestamp(states('sensor.uptime'))) }}

    # Raspberry Pi last boot date and time       
    - name: 'Last Boot Date Time'
      unique_id: last_boot_date_time
      state: >
        {% if states('sensor.last_boot') not in ['unknown', 'unavailable'] %}
          {% from 'friendly_strings.jinja' import format_time %}
          {{ format_time('sensor.last_boot') }}
        {% else %}
          {{ states('sensor.last_boot') }}
        {% endif %}

    # Raspberry Pi up time
    - name: 'RPi Uptime'
      unique_id: rpi_uptime
      state: >
        {% from 'friendly_strings.jinja' import format_duration %}
        {{ format_duration(as_timestamp(states('sensor.last_boot'))) }}

    # PC last boot date and time       
    - name: 'PC Boot Date Time'
      unique_id: pc_boot_date_time
      state: >
        {% if states('sensor.legion_t530_system_boot_time') not in ['unknown', 'unavailable'] %}
          {% from 'friendly_strings.jinja' import format_time %}
          {{ format_time('sensor.legion_t530_system_boot_time') }}
        {% else %}
          {{ states('sensor.legion_t530_system_boot_time') }}
        {% endif %}

    # PC up time
    - name: 'PC Uptime'
      unique_id: pc_uptime
      state: >
        {% if states('sensor.legion_t530_system_boot_time') not in ['unknown', 'unavailable'] %}
          {% from 'friendly_strings.jinja' import format_duration %}
          {{ format_duration(as_timestamp(states('sensor.legion_t530_system_boot_time'), now())) }}
        {% else %}
          {{ states('sensor.legion_t530_system_boot_time') }}
        {% endif %}

    #----------------#
    #   -- Misc --   #
    #----------------#
      
    - name: 'Warm Weather'
      unique_id: warm_weather
      state: >
        {% set n = now() %}
        {{ n.month > 2 and n.month < 11 }}

    - name: 'Canes Game Status'
      unique_id: canes_game_status
      state: >
        {% if states.sensor.next_canes_game is defined and states.sensor.next_canes_game.attributes is defined and states.sensor.next_canes_game.attributes.homeTeam is defined %}
          {{ iif(state_attr('sensor.next_canes_game', 'homeTeam')['abbrev'] == 'CAR', 'Home', 'Away') }}
        {% else %}
          Unknown
        {% endif %}

    - name: 'Canes Opponent'
      unique_id: canes_opponent
      state: >
        {% if states('sensor.canes_game_status') == 'Home' %}
          {{ state_attr('sensor.next_canes_game', 'awayTeam')['abbrev'] }}
        {% elif states('sensor.canes_game_status') == 'Away' %}
          {{ state_attr('sensor.next_canes_game', 'homeTeam')['abbrev'] }}
        {% else %}
          Unknown
        {% endif %}
      
      attributes:
        friendly_opponent: >
          {% set vars = namespace(name = 'Unknown') %}
          
          {% set abbrev = this.state %}
          {% for team in state_attr('sensor.variables', 'variables').hockey_teams %}
            {% if team[0] == abbrev %}
              {% set vars.name = team[1] %}
              {% break %}
            {% endif %}
          {% endfor %}
          
          {{ vars.name }}

    - name: 'Flyers Game Status'
      unique_id: flyers_game_status
      state: >
        {% if states.sensor.next_flyers_game is defined and states.sensor.next_flyers_game.attributes is defined and states.sensor.next_flyers_game.attributes.homeTeam is defined %}
          {{ iif(state_attr('sensor.next_flyers_game', 'homeTeam')['abbrev'] == 'PHI', 'Home', 'Away') }}
        {% else %}
          Unknown
        {% endif %}

    - name: 'Flyers Opponent'
      unique_id: flyers_opponent
      state: >
        {% if states('sensor.flyers_game_status') == 'Home' %}
          {{ state_attr('sensor.next_flyers_game', 'awayTeam')['abbrev'] }}
        {% elif states('sensor.flyers_game_status') == 'Away' %}
          {{ state_attr('sensor.next_flyers_game', 'homeTeam')['abbrev'] }}
        {% else %}
          Unknown
        {% endif %}
      
      attributes:
        friendly_opponent: >
          {% set vars = namespace(name = 'Unknown') %}
          
          {% set abbrev = this.state %}
          {% for team in state_attr('sensor.variables', 'variables').hockey_teams %}
            {% if team[0] == abbrev %}
              {% set vars.name = team[1] %}
              {% break %}
            {% endif %}
          {% endfor %}
          
          {{ vars.name }}
