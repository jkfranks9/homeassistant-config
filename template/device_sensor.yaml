#========================#
#     Device Sensors     #
#========================#

- sensor:

    #--------------------------#
    #   -- CP UPS Runtime --   #
    #--------------------------#
    
    - name: 'CP UPS Runtime Minutes'
      unique_id: cp_ups_runtime_minutes
      unit_of_measurement: 'm'
      state: "{{ '%.0f' | format(states('sensor.cyber1_battery_runtime') | float(0) / 60) }}"

    #-----------------------#
    #   -- Harmony Hub --   #
    #-----------------------#
    
    - name: 'Harmony Hub'
      unique_id: harmony_hub
      state: "{{ state_attr('remote.harmony_hub', 'current_activity') }}"

    #--------------------------#
    #   -- Ecovacs DEEBOT --   #
    #--------------------------#
    
    - name: 'Ecovacs Battery'
      unique_id: ecovacs_battery
      unit_of_measurement: '%'
      state: "{{ state_attr('vacuum.ecovacs_deebot', 'battery_level') }}"

    #---------------------------#
    #   -- Epson Projector --   #
    #---------------------------#
    
    - name: 'Epson Lamp Hours'
      unique_id: epson_lamp_hours
      state: "{{ state_attr('media_player.epson_projector', 'lamp_hours') }}"

    #------------------------------#
    #   -- MQTT Room Presence --   #
    #------------------------------#
    
    # This sensor uses the appropriate battery level sensor, based on the state of the beacon.
    - name: 'Blue Charm Battery Level'
      unique_id: blue_charm_battery_level
      state: >
        {% if states('sensor.blue_charm_beacon') == 'garage' %}
          {{ states('sensor.blue_charm_battery_level_garage') }}
        {% elif states('sensor.blue_charm_beacon') == 'house' %}
          {{ states('sensor.blue_charm_battery_level_house') }}
        {% else %}
          {{ 'unknown' }}
        {% endif %}

    #------------------------------#
    #   -- Washer Power State --   #
    #------------------------------#
    
    # Washer power states, determined via the power level:
    #
    # - stop        <-- stopped/off
    # - fill        <-- filling
    # - drop        <-- power dip
    # - raise       <-- power spike
    - name: 'Washer Power State'
      unique_id: washer_power_state
      state: >
        {# --Set variables-- #}
        {% set s = states('sensor.washer_power_state') %}
        {% set p = states('sensor.sonoff_washer_power') | float(0) %}
          
        {# --Power level indicates stopped-- #}
        {% if p < 3 %} stop
          
        {# --Power level indicates filling if the current state is stopped--  #}
        {% elif 7 <= p <= 13 %} fill
        
        {# --Power level indicates a drop to a lower level--  #}
        {% elif 20 <= p <= 80 %}
          {{ 'drop' if s in ['raise'] else s }}
          
        {# --Power level indicates a raise to a higher level-- #}
        {% elif p > 330 %} raise
          
        {# --Power level outside the above ranges, so keep the current state #}
        {% else %} {{ s }}
        {% endif %}

    #-------------------------------------#
    #   -- Zigbee Device Unavailable --   #
    #-------------------------------------#
    
    #
    - name: 'Zigbee Device Unavailable'
      unique_id: zigbee_device_unavailable
      state: >
        {# --List of device entities, associated last seen sensors, and friendly names-- #}
        {% set device_list = [
                              ['binary_sensor.back_door_sensor_contact', 'sensor.back_door_sensor_last_seen', 'Back Door Sensor'],
                              ['binary_sensor.guest_br_window_sensor_contact', 'sensor.guest_br_window_sensor_last_seen', 'Guest BR Window Sensor'],
                              ['binary_sensor.guest_bath_motion_detector_occupancy', 'sensor.guest_bath_motion_detector_last_seen', 'Guest Bath Motion Detector'],
                              ['binary_sensor.laundry_room_motion_detector_occupancy', 'sensor.laundry_room_motion_detector_last_seen', 'Laundry Room Motion Detector'],
                              ['binary_sensor.master_bath_motion_detector_occupancy', 'sensor.master_bath_motion_detector_last_seen', 'Master Bath Motion Detector'],
                              ['cover.upstairs_br_vent_1', 'sensor.upstairs_br_vent_1_last_seen', 'Upstairs BR Vent 1'],
                              ['cover.upstairs_br_vent_2', 'sensor.upstairs_br_vent_2_last_seen', 'Upstairs BR Vent 2']
                             ] %}
        
        {# --Create an empty list to start-- #}
        {% set unavail_device_list = namespace(list = []) %}
        
        {# --Walk through all devices-- #}
        {% for device in device_list %}
          
          {# --Set variables-- #}
          {% set device_entity = device[0] %}
          {% set sensor_entity = device[1] %}
          {% set device_name = device[2] %}
          
          {# --Add a device to the list if the device entity is unavailable, or hasn't been seen in the last 2 hours-- #}
          {% if states(device_entity) in ['unknown', 'unavailable']
                or as_timestamp(now(), 0) - as_timestamp(states(sensor_entity), 0) > (60 * 60 * 2) %}
            {% set unavail_device_list.list = unavail_device_list.list + [device_name] %}
          {% endif %}
        {% endfor %}
        
        {{ unavail_device_list.list }}
