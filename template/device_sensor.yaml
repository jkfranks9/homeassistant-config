#========================#
#     Device Sensors     #
#========================#

- sensor:

    #--------------------------#
    #   -- CP UPS Runtime --   #
    #--------------------------#
    
    - name: 'CP UPS Runtime Minutes'
      unique_id: cp_ups_runtime_minutes
      unit_of_measurement: 'm'
      state: "{{ '%.0f' | format(states('sensor.cyber1_battery_runtime') | float(0) / 60) }}"

    #----------------------------#
    #   -- CPAP Usage Hours --   #
    #----------------------------#
    
    - name: 'CPAP Usage Hours'
      unique_id: cpap_usage_hours
      #unit_of_measurement: 'h'
      state: "{{ '%.2f' | format(states('sensor.cpap_usage_minutes') | float(0) / 60) }}"

    #-----------------------#
    #   -- Harmony Hub --   #
    #-----------------------#
    
    - name: 'Harmony Hub'
      unique_id: harmony_hub
      state: "{{ state_attr('remote.harmony_hub', 'current_activity') }}"

    #--------------------------#
    #   -- Ecovacs DEEBOT --   #
    #--------------------------#
    
    - name: 'Ecovacs Battery'
      unique_id: ecovacs_battery
      unit_of_measurement: '%'
      state: "{{ state_attr('vacuum.ecovacs_deebot', 'battery_level') }}"

    #---------------------------#
    #   -- Epson Projector --   #
    #---------------------------#
    
    - name: 'Epson Lamp Hours'
      unique_id: epson_lamp_hours
      state: "{{ state_attr('media_player.epson_projector', 'lamp_hours') }}"

    #----------------------#
    #   -- Last Alexa --   #
    #----------------------#
    
    # The state of this sensor is the most recent Alexa device spoken to. Useful for room-awareness.
    - name: Last Alexa
      unique_id: last_alexa
      state: >
        {{ expand(integration_entities('alexa_media') | select('search', 'media_player'))
         | selectattr('attributes.last_called', 'eq', True) | map(attribute = 'entity_id') | first }}

    #-----------------------------#
    #   -- Treadmill Service --   #
    #-----------------------------#
    
    # Treadmill current hours ... we maintain the usage in minutes, but need hours for the reminder UI.
    - name: Treadmill Current Hours
      unique_id: treadmill_current_hours
      state: "{{ (states('input_number.treadmill_usage_minutes') | int(0) / 60) | round }}"

    #---------------------------#
    #   -- Beacon Presence --   #
    #---------------------------#
    
    # Blue charm beacon presence, based on scanner lowest distance.
    - name: 'Blue Charm Presence'
      unique_id: blue_charm_presence
      state: >
        {% set garage_dist = states('sensor.ble_garage_blue_charm_distance') %}
        {% set house_dist = states('sensor.ble_house_blue_charm_distance') %}
        {% set bad = ['unknown', 'unavailable'] %}
        
        {% if garage_dist not in bad and house_dist not in bad %}
          {{ iif(house_dist <= garage_dist, 'House', 'Garage') }}
        {% elif garage_dist in bad and house_dist not in bad %}
          House
        {% elif garage_dist not in bad and house_dist in bad %}
          Garage
        {% else %}
          Away
        {% endif %}

    #------------------------------#
    #   -- Washer Power State --   #
    #------------------------------#
    
    # Washer power states, determined via the power level:
    #
    # - stop        <-- stopped/off
    # - fill        <-- filling
    # - drop        <-- power dip
    # - raise       <-- power spike
    - name: 'Washer Power State'
      unique_id: washer_power_state
      state: >
        {# --Set variables-- #}
        {% set s = states('sensor.washer_power_state') %}
        {% set p = states('sensor.sonoff_washer_power') | float(0) %}
          
        {# --Power level indicates stopped-- #}
        {% if p < 3 %} stop
          
        {# --Power level indicates filling if the current state is stopped--  #}
        {% elif 7 <= p <= 13 %} fill
        
        {# --Power level indicates a drop to a lower level--  #}
        {% elif 20 <= p <= 80 %}
          {{ 'drop' if s in ['raise'] else s }}
          
        {# --Power level indicates a raise to a higher level-- #}
        {% elif p > 330 %} raise
          
        {# --Power level outside the above ranges, so keep the current state #}
        {% else %} {{ s }}
        {% endif %}

    #--------------------------------------#
    #   -- Zigbee Unavailable Devices --   #
    #--------------------------------------#
    
    # Current list of unavailable zigbee device friendly names. This is updated whenever a device becomes unavailable, or has not been heard
    # from in a while. The state is a count of all such devices.
    - name: 'Current Zigbee Unavailable Devices'
      unique_id: current_zigbee_unavailable_devices
      state: "{{ this.attributes.device_list | length }}"
      
      attributes:
        device_list: >
          {# --List of device entities, associated last seen sensors, and friendly names-- #}
          {% set device_list = [
                                ['binary_sensor.back_door_sensor_contact', 'sensor.back_door_sensor_last_seen', 'Back Door Sensor'],
                                ['binary_sensor.guest_br_window_sensor_contact', 'sensor.guest_br_window_sensor_last_seen', 'Guest BR Window Sensor'],
                                ['binary_sensor.dryer_vibration_sensor_vibration', 'sensor.dryer_vibration_sensor_last_seen', 'Dryer Vibration Sensor'],
                                ['binary_sensor.guest_bath_motion_detector_occupancy', 'sensor.guest_bath_motion_detector_last_seen', 'Guest Bath Motion Detector'],
                                ['binary_sensor.laundry_room_motion_detector_occupancy', 'sensor.laundry_room_motion_detector_last_seen', 'Laundry Room Motion Detector'],
                                ['binary_sensor.master_bath_motion_detector_occupancy', 'sensor.master_bath_motion_detector_last_seen', 'Master Bath Motion Detector'],
                                ['cover.upstairs_br_vent_1', 'sensor.upstairs_br_vent_1_last_seen', 'Upstairs BR Vent 1'],
                                ['cover.upstairs_br_vent_2', 'sensor.upstairs_br_vent_2_last_seen', 'Upstairs BR Vent 2']
                               ] %}
                               
          {# --Create an empty list to start-- #}
          {% set unavail_device_list = namespace(list = []) %}
          
          {# --Walk through all devices-- #}
          {% for device in device_list %}
          
            {# --Set variables-- #}
            {% set device_entity = device[0] %}
            {% set sensor_entity = device[1] %}
            {% set device_name = device[2] %}
            {% set timeout_minutes = 150 %}
          
            {# --Add a device to the list if the device entity is unavailable, or hasn't been seen in the timeout window-- #}
            {% if states(device_entity) in ['unknown', 'unavailable']
                  or as_timestamp(now(), 0) - as_timestamp(states(sensor_entity), 0) > (timeout_minutes * 60) %}
              {% set unavail_device_list.list = unavail_device_list.list + [device_name] %}
            {% endif %}
          {% endfor %}
          
          {{ unavail_device_list.list }}
    
    # Previous list of unavailable zigbee device friendly names. This allows us to detect which of a list of unavailable devices is new when the 
    # Notify Zigbee Device Unavailable automation runs. The state is a count of all such devices.
    - name: 'Previous Zigbee Unavailable Devices'
      unique_id: previous_zigbee_unavailable_devices
      state: "{{ this.attributes.device_list | length }}"
      
      attributes:
        device_list: >
          {# --List of timestamp entities and friendly names-- #}
          {% set device_list = [
                                ['input_number.back_door_sensor', 'Back Door Sensor'],
                                ['input_number.guest_br_window_sensor', 'Guest BR Window Sensor'],
                                ['input_number.dryer_vibration_sensor', 'Dryer Vibration Sensor'],
                                ['input_number.guest_bath_motion_detector', 'Guest Bath Motion Detector'],
                                ['input_number.laundry_room_motion_detector', 'Laundry Room Motion Detector'],
                                ['input_number.master_bath_motion_detector', 'Master Bath Motion Detector'],
                                ['input_number.upstairs_br_vent_1', 'Upstairs BR Vent 1'],
                                ['input_number.upstairs_br_vent_2', 'Upstairs BR Vent 2']
                               ] %}
                               
          {# --Create an empty list to start-- #}
          {% set unavail_device_list = namespace(list = []) %}
          
          {# --Walk through all devices-- #}
          {% for device in device_list %}
          
            {# --Set variables-- #}
            {% set timestamp_entity = device[0] %}
            {% set device_name = device[1] %}
          
            {# --Add a device to the list if the device timestamp is not 0-- #}
            {% if states(timestamp_entity) | int(0) > 0 %}
              {% set unavail_device_list.list = unavail_device_list.list + [device_name] %}
            {% endif %}
          {% endfor %}
          
          {{ unavail_device_list.list }}
