#========================#
#     Device Sensors     #
#========================#

- sensor:

    #----------------------#
    #   -- PC Metrics --   #
    #----------------------#
    
    - name: PC C Drive Label
      unique_id: pc_c_drive_label
      state: "{{ state_attr('sensor.legion_t530_storage_c', 'Label') }}"
    
    - name: PC E Drive Label
      unique_id: pc_e_drive_label
      state: "{{ state_attr('sensor.legion_t530_storage_e', 'Label') }}"
    
    - name: PC C Drive Used
      unique_id: pc_c_drive_used
      unit_of_measurement: '%'
      state: "{{ state_attr('sensor.legion_t530_storage_c', 'UsedSpacePercentage') }}"
    
    - name: PC E Drive Used
      unique_id: pc_e_drive_used
      unit_of_measurement: '%'
      state: "{{ state_attr('sensor.legion_t530_storage_e', 'UsedSpacePercentage') }}"
    
    - name: PC C Drive Total GB
      unique_id: pc_c_drive_total_gb
      unit_of_measurement: 'GB'
      state: "{{ '%.0f' | format(state_attr('sensor.legion_t530_storage_c', 'TotalSizeMB') | float(0) / 1024) }}"
    
    - name: PC C Drive Available GB
      unique_id: pc_c_drive_available_gb
      unit_of_measurement: 'GB'
      state: "{{ '%.0f' | format(state_attr('sensor.legion_t530_storage_c', 'AvailableSpaceMB') | float(0) / 1024) }}"
    
    - name: PC E Drive Total GB
      unique_id: pc_e_drive_total_gb
      unit_of_measurement: 'GB'
      state: "{{ '%.0f' | format(state_attr('sensor.legion_t530_storage_e', 'TotalSizeMB') | float(0) / 1024) }}"
    
    - name: PC E Drive Available GB
      unique_id: pc_e_drive_available_gb
      unit_of_measurement: 'GB'
      state: "{{ '%.0f' | format(state_attr('sensor.legion_t530_storage_e', 'AvailableSpaceMB') | float(0) / 1024) }}"

    #--------------------------#
    #   -- CP UPS Runtime --   #
    #--------------------------#
    
    - name: 'CP UPS Runtime Minutes'
      unique_id: cp_ups_runtime_minutes
      unit_of_measurement: 'm'
      state: "{{ '%.0f' | format(states('sensor.cyber1_battery_runtime') | float(0) / 60) }}"

    #----------------------------#
    #   -- CPAP Usage Hours --   #
    #----------------------------#
    
    - name: 'CPAP Usage Hours'
      unique_id: cpap_usage_hours
      #unit_of_measurement: 'h'
      state: "{{ '%.2f' | format(states('sensor.cpap_usage_minutes') | float(0) / 60) }}"

    #--------------------------#
    #   -- Ecovacs DEEBOT --   #
    #--------------------------#
    
    - name: Ecovacs Battery
      unique_id: ecovacs_battery
      unit_of_measurement: '%'
      state: "{{ state_attr('vacuum.ecovacs_deebot', 'battery_level') }}"
    
    - name: Ecovacs Filter Life
      unique_id: ecovacs_filter_life
      unit_of_measurement: '%'
      state: "{{ state_attr('vacuum.ecovacs_deebot', 'component_filter') | int(0) }}"
    
    - name: Ecovacs Main Brush Life
      unique_id: ecovacs_main_brush_life
      unit_of_measurement: '%'
      state: "{{ state_attr('vacuum.ecovacs_deebot', 'component_main_brush') | int(0) }}"
    
    - name: Ecovacs Side Brush Life
      unique_id: ecovacs_side_brush_life
      unit_of_measurement: '%'
      state: "{{ state_attr('vacuum.ecovacs_deebot', 'component_side_brush') | int(0) }}"

    #----------------------#
    #   -- Last Alexa --   #
    #----------------------#
    
    # The state of this sensor is the most recent Alexa device spoken to. Useful for room-awareness.
    - name: Last Alexa
      unique_id: last_alexa
      state: >
        {{ expand(integration_entities('alexa_media') | select('search', 'media_player'))
         | selectattr('attributes.last_called', 'eq', True) | map(attribute = 'entity_id') | list }}

    #-----------------------------#
    #   -- Treadmill Service --   #
    #-----------------------------#
    
    # Treadmill current hours ... we maintain the usage in minutes, but need hours for the reminder UI.
    - name: Treadmill Current Hours
      unique_id: treadmill_current_hours
      state: "{{ (states('input_number.treadmill_usage_minutes') | int(0) / 60) | round }}"

    #---------------------------#
    #   -- Beacon Presence --   #
    #---------------------------#
    
    # Blue charm beacon presence, based on scanner distance being a valid number.
    - name: 'Blue Charm Presence'
      unique_id: blue_charm_presence
      state: >
        {% set distance = states('sensor.ble_house_blue_charm_distance') %}
        {% if distance not in ['unknown', 'unavailable'] %}
          House
        {% else %}
          Away
        {% endif %}

    #------------------------------#
    #   -- Washer Power State --   #
    #------------------------------#
    
    # Washer power states, determined via the power level:
    #
    # - stop        <-- stopped/off
    # - fill        <-- filling
    # - drop        <-- power dip
    # - raise       <-- power spike
    - name: 'Washer Power State'
      unique_id: washer_power_state
      state: >
        {# --Set variables-- #}
        {% set s = states('sensor.washer_power_state') %}
        {% set p = states('sensor.washer_current_consumption') | float(0) %}
        {% set t1 = states('timer.washer_wash_blackout') %}
          
        {# --Power level indicates stopped-- #}
        {% if p < 3 %} stop
          
        {# --Power level indicates filling--  #}
        {% elif 7 <= p <= 13 %} fill
        
        {# --Power level indicates a drop to a lower level--  #}
        {% elif 20 <= p <= 80 %}
          {{ 'drop' if t1 != 'active' else s }}
          
        {# --Power level indicates a raise to a higher level-- #}
        {% elif p > 325 %} raise
          
        {# --Power level outside the above ranges, so keep the current state #}
        {% else %} {{ s }}
        {% endif %}

    #--------------------------------------#
    #   -- Zigbee Unavailable Devices --   #
    #--------------------------------------#
    
    # Current list of unavailable zigbee device friendly names. This is updated whenever a device becomes unavailable, or has not been heard
    # from in a while. The state is a count of all such devices.
    - name: 'Current Zigbee Unavailable Devices'
      unique_id: current_zigbee_unavailable_devices
      state: "{{ this.attributes.device_list | length }}"
      
      attributes:
        device_list: >
          {# --List of device entities, associated last seen sensors-- #}
          {% set device_list = [
                                ['binary_sensor.back_door_sensor_contact', 'sensor.back_door_sensor_last_seen'],
                                ['binary_sensor.guest_br_window_sensor_contact', 'sensor.guest_br_window_sensor_last_seen'],
                                ['binary_sensor.dryer_vibration_sensor_vibration', 'sensor.dryer_vibration_sensor_last_seen'],
                                ['binary_sensor.studio_motion_detector_occupancy', 'sensor.studio_motion_detector_last_seen'],
                                ['binary_sensor.laundry_room_motion_detector_occupancy', 'sensor.laundry_room_motion_detector_last_seen'],
                                ['binary_sensor.master_bath_motion_detector_occupancy', 'sensor.master_bath_motion_detector_last_seen'],
                                ['cover.master_br_vent_1', 'sensor.master_br_vent_1_last_seen'],
                                ['cover.master_br_vent_2', 'sensor.master_br_vent_2_last_seen'],
                                ['binary_sensor.cc2530_router_led', 'sensor.cc2530_router_last_seen'],
                                ['switch.sonoff_router', 'sensor.sonoff_router_last_seen']
                               ] %}
                               
          {# --Create an empty list to start-- #}
          {% set unavail_device_list = namespace(list = []) %}
          
          {# --Walk through all devices-- #}
          {% for device in device_list %}
          
            {# --Set variables-- #}
            {% set device_entity = device[0] %}
            {% set sensor_entity = device[1] %}
            {% set timeout_minutes = 150 %}
          
            {# --Add a device to the list if the device entity is unavailable, or hasn't been seen in the timeout window-- #}
            {% if states(device_entity) in ['unknown', 'unavailable']
                  or as_timestamp(now(), 0) - as_timestamp(states(sensor_entity), 0) > (timeout_minutes * 60) %}
              {% set unavail_device_list.list = unavail_device_list.list + [state_attr(device_entity, 'friendly_name')] %}
            {% endif %}
          {% endfor %}
          
          {{ unavail_device_list.list }}
    
    # Previous list of unavailable zigbee device friendly names. This allows us to detect which of a list of unavailable devices is new when the 
    # Notify Zigbee Device Unavailable automation runs. The state is a count of all such devices.
    - name: 'Previous Zigbee Unavailable Devices'
      unique_id: previous_zigbee_unavailable_devices
      state: "{{ this.attributes.device_list | length }}"
      
      attributes:
        device_list: >
          {# --List of timestamp entities-- #}
          {% set device_list = [
                                'input_number.back_door_sensor_door',
                                'input_number.guest_br_window_sensor',
                                'input_number.dryer_vibration_sensor',
                                'input_number.studio_motion_detector',
                                'input_number.laundry_room_motion_detector',
                                'input_number.master_bath_motion_detector',
                                'input_number.master_br_vent_1',
                                'input_number.master_br_vent_2',
                                'input_number.cc2530_router',
                                'input_number.sonoff_router'
                               ] %}
                               
          {# --Create an empty list to start-- #}
          {% set unavail_device_list = namespace(list = []) %}
          
          {# --Walk through all devices-- #}
          {% for timestamp_entity in device_list %}
          
            {# --Add a device to the list if the device timestamp is not 0-- #}
            {% if states(timestamp_entity) | int(0) > 0 %}
              {% set unavail_device_list.list = unavail_device_list.list + [state_attr(timestamp_entity, 'friendly_name')] %}
            {% endif %}
          {% endfor %}
          
          {{ unavail_device_list.list }}

    #------------------------------------#
    #   -- Echo Unavailable Devices --   #
    #------------------------------------#
    
    # Current list of unavailable echo device friendly names. This is updated whenever a device becomes unavailable. 
    # The state is a count of all such devices.
    - name: 'Current Echo Unavailable Devices'
      unique_id: current_echo_unavailable_devices
      state: "{{ this.attributes.device_list | length }}"
      
      attributes:
        device_list: >
          {# --List of device entities-- #}
          {% set device_list = [
                                'media_player.family_room_echo',
                                'media_player.master_bedroom_echo',
                                'media_player.office_echo',
                                'media_player.penthouse_echo',
                                'media_player.studio_echo',
                                'media_player.theater_echo'
                               ] %}
                               
          {# --Create an empty list to start-- #}
          {% set unavail_device_list = namespace(list = []) %}
              
          {# --Walk through all devices-- #}
          {% for device_entity in device_list %}
              
            {# --Add a device to the list if the device entity is unavailable-- #}
            {% if states(device_entity) in ['unknown', 'unavailable'] %}
              {% set unavail_device_list.list = unavail_device_list.list + [state_attr(device_entity, 'friendly_name')] %}
            {% endif %}
          {% endfor %}
              
          {{ unavail_device_list.list }}
    
    # Previous list of unavailable echo device friendly names. This allows us to detect which of a list of unavailable devices is new when the 
    # Notify Echo Device Unavailable automation runs. The state is a count of all such devices.
    - name: 'Previous Echo Unavailable Devices'
      unique_id: previous_echo_unavailable_devices
      state: "{{ this.attributes.device_list | length }}"
      
      attributes:
        device_list: >
          {# --List of timestamp entities-- #}
          {% set device_list = [
                                'input_number.family_room_echo',
                                'input_number.master_bedroom_echo',
                                'input_number.office_echo',
                                'input_number.penthouse_echo',
                                'input_number.studio_echo',
                                'input_number.theater_echo'
                               ] %}
                               
          {# --Create an empty list to start-- #}
          {% set unavail_device_list = namespace(list = []) %}
          
          {# --Walk through all devices-- #}
          {% for timestamp_entity in device_list %}
          
            {# --Add a device to the list if the device timestamp is not 0-- #}
            {% if states(timestamp_entity) | int(0) > 0 %}
              {% set unavail_device_list.list = unavail_device_list.list + [state_attr(timestamp_entity, 'friendly_name')] %}
            {% endif %}
          {% endfor %}
          
          {{ unavail_device_list.list }}
    
    # Downstairs motion device name.
    - name: Downstairs Motion Device Name
      unique_id: downstairs_motion_device_name
      
      state: >
        {% set vars = namespace(name = '', time = now() - timedelta(days = 1)) %}
        {% for device in state_attr('binary_sensor.downstairs_motion', 'devices') %}
          {% set device_updated = states[device].last_updated %}
          {% if device_updated > vars.time %}
            {% set vars.time = device_updated %}
            {% set vars.name = state_attr(device, 'friendly_name') %}
          {% endif %}
        {% endfor %}
          
        {{ vars.name }}
    
    # Upstairs motion device name.
    - name: Upstairs Motion Device Name
      unique_id: upstairs_motion_device_name
      
      state: >
        {% set vars = namespace(name = '', time = now() - timedelta(days = 1)) %}
        {% for device in state_attr('binary_sensor.upstairs_motion', 'devices') %}
          {% set device_updated = states[device].last_updated %}
          {% if device_updated > vars.time %}
            {% set vars.time = device_updated %}
            {% set vars.name = state_attr(device, 'friendly_name') %}
          {% endif %}
        {% endfor %}
          
        {{ vars.name }}
