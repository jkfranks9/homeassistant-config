#=========================#
#     Automations Log     #
#=========================#

# Record fired automations in a log file.
- alias: Log Automations
  id: log_automations
  mode: queued
  max: 200
  
  # We trigger on all state changes, then weed out unnecessary events in the condition.
  trigger:
    - platform: event
      event_type: state_changed
  
  # Weed out non-automations and some we want to skip (including this one!). Also, verify we have a 
  # valid old and new state to work with, and that the last triggered time has changed.
  condition:
    - condition: template
      value_template: >
        {% set skip_list = ['log_automations', 'backup_log_on_shutdown', 'backup_auto_log', 'log_notifications',
                             'set_maximum_attic_temperature', 'set_maximum_outdoor_temperature',
                             'set_minimum_attic_temperature', 'set_minimum_outdoor_temperature',
                             'update_openuv'] %}
        {{ trigger.event.data.entity_id.startswith('automation.') and
           trigger.event.data.entity_id.split('.')[1] not in skip_list and
           'old_state' in trigger.event.data and 'new_state' in trigger.event.data and
           'last_triggered' in trigger.event.data.new_state.attributes and 'last_triggered' in trigger.event.data.old_state.attributes and
           trigger.event.data.new_state.attributes.last_triggered != trigger.event.data.old_state.attributes.last_triggered }}
  
  action:
    
    # Log it.
    - service: notify.triggered_automations
      data_template:
        message: >
         {{ as_timestamp(trigger.event.data.new_state.last_updated) | timestamp_custom('%b %d: %X') }}: {{ trigger.event.data.new_state.name }}

#===================#
#     Log Files     #
#===================#

# Backup the current HA log file on shutdown, so we don't lose possible debugging information.
- alias: Backup Log On Shutdown
  id: backup_log_on_shutdown
  trigger:
    - platform: homeassistant
      event: shutdown
  action:
    - service: shell_command.backup_log

# Delete junk log files left over from the above automation.
- alias: Delete Junk Log Files
  id: delete_junk_log_files
  trigger:
    - platform: homeassistant
      event: start
  action:
    - delay: 
        seconds: "{{ range(2, 15) | random }}"
    - service: shell_command.delete_junk_log_files

# Backup the automations log file every day.
- alias: Backup Auto Log
  id: backup_auto_log
  trigger:
    - platform:  time
      at: '00:02:09'
  action:
    - service: shell_command.backup_auto_log

#===================================#
#     Kodi Media Player Logging     #
#===================================#
     
# The Kodi media player has a tendency to fill the log with useless error messages, because the player can't
# be contacted on an async_update(), which happens every 10 seconds. Count these events so we can restart HA if 
# the situation persists for ~5 minutes.
- alias: Detect Kodi Error Loop
  id: detect_kodi_error_loop
  trigger:
    - platform: event
      event_type: system_log_event
      event_data:
        name: 'homeassistant.components.kodi.media_player'
        level: 'ERROR'
  #condition:
  #  - condition: template
  #    value_template: "{{ 'Error calling async_update on entity media_player.kodi: TransportError' in trigger.event.data.message }}"
  action:
    - service: counter.increment
      data:
        entity_id: counter.kodi_errors

# Restart HA if the kodi error loop situation exists (see above).
- alias: Handle Kodi Error Loop
  id: handle_kodi_error_loop
  trigger:
    - platform: state
      entity_id: counter.kodi_errors
  condition:
    - condition: template
      value_template: "{{ trigger.to_state.state | int(0) >= 30 }}"
  action:
    - service: persistent_notification.create
      data:
        title: 'Home Assistant Restarted'
        notification_id: 'kodi_error_loop'
        message: 'Home Assistant was restarted due to excessive Kodi media player errors.'
    - service: homeassistant.restart

# Reset the counter after a few minutes since we're not interested in occasional sporadic errors.
- alias: Reset Kodi Error Counter
  id: reset_kodi_error_counter
  trigger:
    - platform: time_pattern
      minutes: '/7'
  condition:
    - condition: template
      value_template: "{{ states('counter.kodi_errors')|int(0) > 0 }}"      
  action:
    - service: counter.reset
      entity_id: counter.kodi_errors

#==================================#
#     Persistent Notifications     #
#==================================#

# NOTE: This was originally obtained as a package (I forget where). But I've had to debug it and
#       make changes, so it's now just included with all the other automations instead of a package.

# Save notifications to MQTT when they are created.
- alias: Save Notifications On Create
  id: save_notifications_on_create
  trigger:
    - platform: event
      event_type: call_service
      event_data:
        domain: persistent_notification
        service: create
  condition:
    - condition: template
      value_template: >-
        {{ trigger.event.data.service_data.notification_id != 'config_entry_discovery' }}
  action:
    - service: mqtt.publish
      data_template:
        topic: "home-assistant/notifications/{{ trigger.event.data.service_data.notification_id }}"
        payload: >-
          {
            'notification_id' : "{{ trigger.event.data.service_data.notification_id }}",
            'title' : "{{ trigger.event.data.service_data.title }}",
            'message' : "{{ trigger.event.data.service_data.message }}"
          }
        retain: true

# Remove saved notifications from MQTT when they are dismissed.
- alias: Remove Saved Notifications On Dismiss
  id: remove_saved_notifications_on_dismiss
  trigger:
    - platform: event
      event_type: call_service
      event_data:
        domain: persistent_notification
        service: dismiss
  condition:
    - condition: template
      value_template: >-
        {{ trigger.event.data.service_data.notification_id != 'config_entry_discovery' }}
  action:
    - service: mqtt.publish
      data_template:
        topic: "home-assistant/notifications/{{ trigger.event.data.service_data.notification_id }}"
        retain: true

# Restore persistent notifications (the whole point).
#
# This one is tricky:
#   - It's triggered by the above save_notifications_on_create automation, since that one publishes an MQTT message.
#   - The condition compares the triggered message with the entity ID 'persistent_notification.[notification ID]':
#       - This entity is created to represent the retained MQTT message
#       - This sometimes creates an error in the log indicating the MQTT message has no payload_json attribute.
#         I've used the log_notifications automation below to try and debug, but it shows the payload_json attribute is
#         present. Not really sure what is going on, since all this stuff does indeed work - I suspect some sort of timing
#         problem.
#   - If the comparison is true then the message has changed since it was originally issued, and the action then creates
#     a new persistent notification to replace the original, thus driving save_notifications_on_create, which in turn re-drives
#     this, but the condition should be false on the redrive.
#   - Note that dashes in the notification ID are changed to underscores, presumably to prevent some problem.
- alias: Restore Notifications
  id: restore_notifications
  trigger:
    - platform: mqtt
      topic: home-assistant/notifications/+
  condition:
    - condition: template
      value_template: >-
        {{ trigger.payload != '' and state_attr('persistent_notification.' + trigger.payload_json.notification_id | replace('-','_'),'message') != trigger.payload_json.message }}
  action:
    - service: persistent_notification.create
      data_template:
        title: >-
          {{ trigger.payload_json.title }}
        message: >-
          {{ trigger.payload_json.message }}
        notification_id: >-
          {{ trigger.payload_json.notification_id }}

# Log the published MQTT message for debugging purposes (normally turned off).
- id: log_notifications
  alias: Log Notifications
  trigger:
    - platform: mqtt
      topic: home-assistant/notifications/+
  action:
    - service: system_log.write
      data:
        message: "notification: '{{ trigger.payload }}'"
        level: info

#========================#
#     Christmas Mode     #
#========================#

# I want to only show certain elements on the floorplan at Christmas time. This requires two different
# floorplan image and dashboard files. When Christmas mode changes, copy the appropriate files.
- alias: Trigger Floorplan Christmas Elements
  id: 'trigger_floorplan_christmas_elements'
  trigger:
    - platform: state
      entity_id: input_boolean.christmas_mode
  action:
    - choose:
      - conditions: "{{ is_state('input_boolean.christmas_mode', 'on') }}"          
        sequence:
          - service: shell_command.copy_floorplan_christmas
      default:
        - service: shell_command.copy_floorplan_normal

#===============#
#     Theme     #
#===============#

# Set the theme from the front end.
# Also, the domains card has a label row that (annoyingly) flashes. So we set an input text to
# contain the background color from the theme, which is then used on the card, making the flashes
# invisible.
#
# The theme names and appropriate colors are hard coded, since I can't find a way to get them dynamically.
- alias: Change Frontend Theme
  id: 'change_frontend_theme'
  trigger:
    - platform: state
      entity_id: input_select.theme_list
  action:
    - service: frontend.set_theme
      data_template:
        name: "{{ states('input_select.theme_list') }}"
        mode: dark
    - choose:
      - conditions: "{{ is_state('input_select.theme_list', 'Google Dark Theme') }}"          
        sequence:
          - service: input_text.set_value
            data:
              entity_id: input_text.theme_background_color
              value: 'rgb(32, 33, 36)'
      
      - conditions: "{{ is_state('input_select.theme_list', 'Midnight Teal') }}"          
        sequence:
          - service: input_text.set_value
            data:
              entity_id: input_text.theme_background_color
              value: 'rgb(13, 63, 70)'
            
      - conditions: "{{ is_state('input_select.theme_list', 'synthwave') }}"          
        sequence:
          - service: input_text.set_value
            data:
              entity_id: input_text.theme_background_color
              value: 'rgb(52, 41, 79)'
            
      - conditions: "{{ is_state('input_select.theme_list', 'sweetpink') }}"          
        sequence:
          - service: input_text.set_value
            data:
              entity_id: input_text.theme_background_color
              value: 'rgb(17, 17, 29)'
