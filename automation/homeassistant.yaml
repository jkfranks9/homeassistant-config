#========================#
#     Startup Chores     #
#========================#

- alias: Perform Startup Chores
  id: perform_startup_chores
  
  trigger:
    - platform: homeassistant
      event: start
  
  action:
    
    # For some reason, we need to recreate dynamic light groups. Without this, they still show up in the list of entities,
    # but don't show up in templates. Probably a bug, but for now make sure we do this as soon as possible.
    - service: group.set
      data:
        name: Family Room Lights
        object_id: family_room_lights
        entities:
          - light.family_room_lamp
          - light.stairway_light
          - light.family_room_fan
    
    - service: group.set
      data:
        name: Kitchen Lights
        object_id: kitchen_lights
        entities:
          - light.island_light
          - light.sink_light
          - light.kitchen_light
    
    - service: group.set
      data:
        name: Downstairs Common Lights
        object_id: downstairs_common_lights
        entities:
          - light.foyer_hutch
          - light.dining_room_hutch
          - light.dining_room_lamps
          - light.laundry_room_light
    
    - service: group.set
      data:
        name: Outdoor Lights
        object_id: outdoor_lights
        entities:
          - light.porch_light
          - light.front_floodlight
          - light.driveway_light
          - light.back_floodlight
          - light.back_yard_light
    
    # Delete junk log files left over from backing up the logs on shutdown.
    - service: shell_command.delete_junk_log_files  
    
    # Set up MQTT discovery sensors to keep track of the last changed time for interesting entities.
    - variables:
        suffix: 'last_changed'    
        items:
          - "{{ 'ups_' ~ suffix }}"
          - "{{ 'garage_door_north_' ~ suffix }}"
          - "{{ 'garage_door_south_' ~ suffix }}"
          - "{{ 'treadmill_' ~ suffix }}"
          - "{{ 'washer_' ~ suffix }}"
          - "{{ 'workout_' ~ suffix }}"
          - "{{ 'yard_work_' ~ suffix }}"
          - "{{ 'steps_' ~ suffix }}"
    
    - repeat:
        count: "{{ items | length }}"
        
        sequence:
          - service: script.set_up_mqtt_automated_config
            data:
              domain: sensor
              unique_id: "{{ items[repeat.index - 1] }}"
              device_class: timestamp
    
    # We have an input select that represents the list of Kodi movies. This is dynamically set using the 
    # Process All Kodi Movies Result script. However, when HA restarts, the input select gets restored to the yaml value
    # instead of the dynamically set value. So we restore the dynamic list on HA start.
    #
    # The actual list should exist in a file that was saved at Process All Kodi Movies Result time, and the feature
    # movie name (input select state value) exists in input_text.current_feature.
    
    # Turn on a flag to prevent any other automations or scripts mucking with the feature movie name until
    # restoration is complete.
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.kodi_movie_list_restoration
    
    # Call a pyscript module to restore the movie list.
    - service: pyscript.restore_input_select_options
      data:
        entity: input_select.kodi_movies
        file: '/config/all_movies_backup'
    
    # Wait until the list is restored (state not equal to the static yaml value).
    - wait_template: "{{ not is_state('input_select.kodi_movies', 'Select') }}"
      timeout: '00:00:10'
    
    # Set the current feature movie as the selected option in the list.
    - service: input_select.select_option
      data:
        entity_id: input_select.kodi_movies
        option: "{{ states('input_text.current_feature') }}"
    
    # Turn off the restoration flag.
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.kodi_movie_list_restoration

#=========================#
#     Shutdown Chores     #
#=========================#

- alias: Perform Shutdown Chores
  id: perform_shutdown_chores
  
  trigger:
    - platform: homeassistant
      event: shutdown
  
  action:
    
    # Backup the current HA log file on shutdown, so we don't lose possible debugging information.
    - service: shell_command.backup_log

#======================#
#     Daily Chores     #
#======================#

# Perform various daily chores.
- alias: Perform Daily Chores
  id: 'perform_daily_chores'
  
  trigger:
    - platform:  time
      at: '01:01:01'
  
  action:
    - variables:
        day_of_week: "{{ as_timestamp(now()) | timestamp_custom('%w') | int(0) }}"
        day_of_month: "{{ now().day }}"
    
    # Reset daily exercise values.
    - service: input_number.set_value
      target:
        entity_id:
          - input_number.treadmill_daily_time
          - input_number.treadmill_daily_calories
          - input_number.workout_daily_time
          - input_number.workout_daily_calories
          - input_number.yard_work_daily_time
          - input_number.yard_work_daily_calories
          - input_number.steps_daily
          - input_number.steps_daily_calories
      data:
        value: 0
    
    # If it's the start of a new week (Sunday), reset weekly exercise values.
    - if:
        - "{{ day_of_week == 0 }}"
      
      then:
        - service: input_number.set_value
          target:
            entity_id:
              - input_number.treadmill_weekly_time
              - input_number.treadmill_weekly_calories
              - input_number.workout_weekly_time
              - input_number.workout_weekly_calories
              - input_number.yard_work_weekly_time
              - input_number.yard_work_weekly_calories
              - input_number.steps_weekly
              - input_number.steps_weekly_calories
          data:
            value: 0
    
    # If it's the start of a new month, reset monthly exercise values.
    - if:
        - "{{ day_of_month == 1 }}"
      
      then:
        - service: input_number.set_value
          target:
            entity_id:
              - input_number.treadmill_monthly_time
              - input_number.treadmill_monthly_calories
              - input_number.workout_monthly_time
              - input_number.workout_monthly_calories
              - input_number.yard_work_monthly_time
              - input_number.yard_work_monthly_calories
              - input_number.steps_monthly
              - input_number.steps_monthly_calories
          data:
            value: 0
    
    # Turn off washer plug.
    - service: switch.turn_off
      entity_id: switch.washer
    
    # Backup automations and scripts log files.
    - service: shell_command.backup_auto_scripts_log

    # Make sure the dryer isn't running, just in case.
    - service: input_boolean.turn_off
      entity_id: input_boolean.dryer_running
    
    # Backup the laundry events log file if indicated.
    - if:
        - condition: state
          entity_id: input_boolean.backup_laundry_log
          state: 'on'
      
      then:    
        - service: shell_command.backup_laundry_log
        
        - service: input_boolean.turn_off
          entity_id: input_boolean.backup_laundry_log
    
    # Reset the exercise flags for the current day, so we won't count this day if no exercise is done.    
    - service: script.modify_current_exercise_day
      data:
        exercise_types: ['treadmill', 'workout', 'yard_work', 'steps']
        operation: false
    
    # Turn on most automations that may have been turned off. This is normally not needed, but some can be left off
    # if certain automations or scripts do not finish normally.
    #
    # Don't touch the few that are turned off most of the time, or for extended periods.
    - service: automation.turn_on
      entity_id:
        - automation.close_house
        - automation.notify_zigbee_device_unavailable
        - automation.open_house
        - automation.run_studio_motion_based_light
        - automation.run_master_bath_motion_based_light
        - automation.turn_on_christmas_lights
        - automation.turn_on_guest_lights_sunset
        - automation.turn_on_office_light
    
    # Update the hockey Rest sensors during hockey season. The sensors have a very long scan interval so
    # they don't try to update when there's no hockey.
    - if:
        - condition: state
          entity_id: input_boolean.hockey_season
          state: 'on'
      
      then:    
        - service: homeassistant.update_entity
          target:
            entity_id:
              - sensor.next_canes_game
              - sensor.next_flyers_game
          continue_on_error: true
    
    # Bump the F150 mileage. We use this to notify when the next service is due.
    - service: input_number.set_value
      target:
        entity_id: input_number.f150_mileage
      data:
        value: "{{ states('input_number.f150_mileage') | int(0) + 32 }}"

#=========================#
#     Automations Log     #
#=========================#

# Record fired automations in a log file.
- alias: Log Automations
  id: log_automations
  mode: queued
  max: 200
  
  # We trigger on all state changes, then weed out unnecessary events in the condition.
  trigger:
    - platform: event
      event_type: state_changed
  
  # Weed out non-automations and some we want to skip (including this one!). Also, verify we have a 
  # valid old and new state to work with, and that the last triggered time has changed.
  condition:
    - condition: template
      value_template: >
        {% set skip_list = [
                            'backup_log_to_pc',
                            'initialize_turn_on_volume', 
                            'log_automations',
                            'log_blue_charm_debug',
                            'log_dryer_trend_sensors', 
                            'log_notifications', 
                            'log_scripts',
                            'log_unifi_changes',
                            'perform_daily_chores',
                            'remove_saved_notifications_on_dismiss',
                            'restore_notifications',
                            'resume_cinema', 
                            'save_notifications_on_create', 
                            'set_maximum_attic_temperature', 
                            'set_maximum_garage_temperature', 
                            'set_maximum_outdoor_temperature',
                            'set_minimum_attic_temperature', 
                            'set_minimum_garage_temperature', 
                            'set_minimum_outdoor_temperature',
                            'set_washer_operation'
                           ] %}
        {{ trigger.event.data.entity_id.startswith('automation.') and
           trigger.event.data.entity_id.split('.')[1] not in skip_list and
           trigger.event.data.old_state is not none and
           trigger.event.data.new_state is not none and
           'last_triggered' in trigger.event.data.old_state.attributes and 'last_triggered' in trigger.event.data.new_state.attributes and
           trigger.event.data.old_state.attributes.last_triggered != trigger.event.data.new_state.attributes.last_triggered }}
  
  action:
    
    # Log it.
    - service: notify.automations_scripts
      data_template:
        message: >
         {{ as_timestamp(trigger.event.data.new_state.last_updated) | timestamp_custom('%b %d: %X') }}: (A) {{ trigger.event.data.new_state.name }}

#=====================#
#     Scripts Log     #
#=====================#

# Record fired scripts in a log file.
- alias: Log Scripts
  id: log_scripts
  mode: queued
  max: 200
  
  # We trigger on all started scripts.
  trigger:
    - platform: event
      event_type: script_started
  
  # Weed out non-scripts and some we want to skip.
  condition:
    - condition: template
      value_template: >
        {% set skip_list = [
                            'concat_auto_scripts_log_files', 
                            'concat_log_files',
                            'evaluate_weather_condition', 
                            'log_laundry_event',
                            'mobile_notification_worker',
                            'restore_lighting_on_resume',
                            'resume_cinema',
                            'resume_worker', 
                            'send_notification',
                            'set_datetime_offset_days', 
                            'set_datetime_offset_months', 
                            'set_datetime_offset_weeks', 
                            'set_fan_to_speed', 
                            'set_theater_dark',
                            'set_theater_dark_delay',
                            'set_theater_dim',
                            'set_theater_idle',
                            'start_activity', 
                            'watch_app'
                           ] %}
        {{ trigger.event.data.entity_id.startswith('script.') and
           trigger.event.data.entity_id.split('.')[1] not in skip_list }}
  
  action:
    
    # Log it.
    - service: notify.automations_scripts
      data_template:
        message: >
         {{ as_timestamp(trigger.event.time_fired) | timestamp_custom('%b %d: %X') }}: (S) {{ trigger.event.data.name }}

#============================#
#     Backup To PC Share     #
#============================#

# Take a log snapshot every few minutes. Hopefully this will help narrow down the occasional HA meltdowns
# I've seen. When this happens I lose logs so can't see what was going on.
- alias: Backup Log To PC
  id: backup_log_to_pc
  
  trigger:
    - platform: time_pattern
      minutes: '/5'
  
  action:
    - service: shell_command.backup_log_to_pc

#==================================#
#     Persistent Notifications     #
#==================================#

# NOTE: This was originally obtained as a package (I forget where). But I've had to debug it and
#       make changes, so it's now just included with all the other automations instead of a package.

# Save notifications to MQTT when they are created.
- alias: Save Notifications On Create
  id: save_notifications_on_create
  
  trigger:
    - platform: event
      event_type: call_service
      event_data:
        domain: persistent_notification
        service: create
  
  condition: "{{ trigger.event.data.service_data.notification_id != 'config_entry_discovery' }}"
  
  action:
    - service: mqtt.publish
      data_template:
        topic: "home-assistant/notifications/{{ trigger.event.data.service_data.notification_id }}"
        payload: >-
          {
            'notification_id' : "{{ trigger.event.data.service_data.notification_id }}",
            'title' : "{{ trigger.event.data.service_data.title }}",
            'message' : "{{ trigger.event.data.service_data.message }}"
          }
        retain: true

# Remove saved notifications from MQTT when they are dismissed.
- alias: Remove Saved Notifications On Dismiss
  id: remove_saved_notifications_on_dismiss
  
  trigger:
    - platform: event
      event_type: call_service
      event_data:
        domain: persistent_notification
        service: dismiss
  
  condition: "{{ trigger.event.data.service_data.notification_id != 'config_entry_discovery' }}"
  
  action:
    - service: mqtt.publish
      data_template:
        topic: "home-assistant/notifications/{{ trigger.event.data.service_data.notification_id }}"
        retain: true

# Restore persistent notifications (the whole point).
#
# This one is tricky:
#   - It's triggered by the above save_notifications_on_create automation, since that one publishes an MQTT message.
#   - The condition compares the triggered message with the entity ID 'persistent_notification.[notification ID]':
#       - This entity is created to represent the retained MQTT message
#       - This sometimes creates an error in the log indicating the MQTT message has no payload_json attribute.
#         I've used the log_notifications automation below to try and debug, but it shows the payload_json attribute is
#         present. Not really sure what is going on, since all this stuff does indeed work - I suspect some sort of timing
#         problem.
#   - If the comparison is true then the message has changed since it was originally issued, and the action then creates
#     a new persistent notification to replace the original, thus driving save_notifications_on_create, which in turn re-drives
#     this, but the condition should be false on the redrive.
#   - Note that dashes in the notification ID are changed to underscores, presumably to prevent some problem.
- alias: Restore Notifications
  id: restore_notifications
  
  trigger:
    - platform: mqtt
      topic: home-assistant/notifications/+
  
  condition: "{{ trigger.payload != '' and state_attr('persistent_notification.' + trigger.payload_json.notification_id | replace('-','_'),'message') != trigger.payload_json.message }}"
  
  action:
    - service: persistent_notification.create
      data_template:
        title: >-
          {{ trigger.payload_json.title }}
        message: >-
          {{ trigger.payload_json.message }}
        notification_id: >-
          {{ trigger.payload_json.notification_id }}

# Log the published MQTT message for debugging purposes (normally turned off).
- id: log_notifications
  alias: Log Notifications
  trigger:
    - platform: mqtt
      topic: home-assistant/notifications/+
  action:
    - service: system_log.write
      data:
        message: "notification: '{{ trigger.payload }}'"
        level: info

#========================#
#     MQTT Discovery     #
#========================#

# Publish state & attributes for MQTT last changed sensors.
- alias: Publish MQTT Automated States
  id: publish_mqtt_automated_states
  mode: parallel
  
  trigger:
    
    # Device triggers
    - platform: state
      entity_id: sensor.cyber1_status_data
      to: 'OB DISCHRG'
      for: '00:01:00'
      id: ups
    
    - platform: state
      entity_id: cover.garage_door_north
      from: 'closed'
      to: 'open'
      id: garage_door_north
    
    - platform: state
      entity_id: cover.garage_door_south
      from: 'closed'
      to: 'open'
      id: garage_door_south
    
    - platform: state
      entity_id: input_select.washer_state
      from: 'Off'
      not_to:
        - 'Unknown'
        - 'unknown'
        - 'unavailable'
      id: washer
    
    # Exercise triggers
    - platform: state
      entity_id: input_boolean.treadmill_triggered
      from: 'off'
      to: 'on'
      id: treadmill
    
    - platform: numeric_state
      entity_id: input_number.workout_daily_time
      above: 0
      id: workout
    
    - platform: numeric_state
      entity_id: input_number.yard_work_daily_time
      above: 0
      id: yard_work
    
    - platform: template
      value_template: "{{ states('input_number.steps_daily') | int(0) >= state_attr('sensor.variables', 'variables').steps_daily_goal | int(0) }}"
      id: steps
  
  variables:
    valid: >
      {{ trigger | default(none) is not none and trigger.to_state is defined and trigger.from_state is defined }}
    
    timestamp: >
      {{ (datetime | default(now())).isoformat() }}
    
    unique_id: >
      {{ trigger.id }}_last_changed
  
  condition: "{{ valid }}"

  action:
    - service: script.publish_mqtt_automated_states
      data:
        domain: sensor
        unique_id: "{{ unique_id }}"
        state: "{{ timestamp }}"
        attributes: {}

#========================#
#     Zigbee Devices     #
#========================#

# The Zigbee device unavailable notification is triggered unintentionally when the Zigbee2MQTT add-on is updated.
# Detect that here and disable the notification automation; re-enable it after the update is complete.
- alias: Disable Zigbee Unavailable Notification
  id: 'disable_zigbee_unavailable_notification'
  
  trigger:
    - platform: state
      entity_id: update.zigbee2mqtt_update
      from: 'off'
      to: 'on'
  
  action:
    - service: automation.turn_off
      entity_id: automation.notify_zigbee_device_unavailable

- alias: Enable Zigbee Unavailable Notification
  id: 'enable_zigbee_unavailable_notification'
  
  trigger:
    - platform: state
      entity_id: update.zigbee2mqtt_update
      from: 'on'
      to: 'off'
  
  action:
    - service: automation.turn_on
      entity_id: automation.notify_zigbee_device_unavailable

#=======================#
#     Hockey Season     #
#=======================#

- alias: Enable Hockey Hobby
  id: enable_hockey_hobby
  
  trigger:
    - platform: state
      entity_id: input_boolean.hockey_season
      from: 'off'
      to: 'on'
  
  action:
    - service: automation.turn_on
      entity_id: automation.notify_next_canes_game

- alias: Disable Hockey Hobby
  id: disable_hockey_hobby
  
  trigger:
    - platform: state
      entity_id: input_boolean.hockey_season
      from: 'on'
      to: 'off'
  
  action:
    - service: automation.turn_off
      entity_id: automation.notify_next_canes_game

#==================================#
#     Riemann Sum Integrations     #
#==================================#

# Riemann sum integrations become unavailable if their source sensors are zero for long periods. This then causes
# the associated utility meter sensors to also become unavailable. This automation updates the Riemann sum integration
# when that happens, which restores the sensor to its previous value. And all is well again.
- alias: Restore Riemann Integration
  id: restore_riemann_integration
  
  # We want to catch all such events, and there are a lot. Update the max value as needed.
  mode: parallel
  max: 50
  
  trigger:
    - platform: state
      entity_id:
        - sensor.attic_light_energy
        - sensor.back_floodlight_energy
        - sensor.back_yard_light_energy
        - sensor.dining_room_hutch_energy
        - sensor.dining_room_lamps_energy
        - sensor.driveway_lights_energy
        - sensor.family_room_av_energy
        - sensor.family_room_fan_energy
        - sensor.family_room_lamp_energy
        - sensor.fire_tv_energy
        - sensor.foyer_hutch_energy
        - sensor.front_floodlight_energy
        - sensor.garage_lights_energy
        - sensor.hallway_lamp_energy
        - sensor.hallway_lights_energy
        - sensor.island_light_energy
        - sensor.kitchen_light_energy
        - sensor.laundry_room_light_energy
        - sensor.master_bath_fan_energy
        - sensor.master_bath_light_energy
        - sensor.master_bedroom_lamp_energy
        - sensor.microwave_energy
        - sensor.office_bookcase_light_energy
        - sensor.office_fan_energy
        - sensor.office_lamp_energy
        - sensor.penthouse_fan_energy
        - sensor.penthouse_lamp_energy
        - sensor.penthouse_light_energy
        - sensor.penthouse_tub_light_energy
        - sensor.penthouse_vanity_light_energy
        - sensor.porch_light_energy
        - sensor.projector_energy
        - sensor.refrigerator_energy
        - sensor.sink_light_energy
        - sensor.snack_light_energy
        - sensor.stairway_light_energy
        - sensor.studio_fan_energy
        - sensor.studio_lamp_1_energy
        - sensor.studio_lamp_2_energy
        - sensor.studio_light_energy
        - sensor.theater_av_energy
        - sensor.theater_ceiling_energy
        - sensor.theater_fan_energy
        - sensor.theater_sconces_energy
        - sensor.treadmill_energy
        - sensor.treadmill_fan_energy
        - sensor.utility_light_energy
        - sensor.washer_energy
      to: 'unavailable'
      for: '00:00:05'
  
  action:
    - service: homeassistant.update_entity
      target:
        entity_id: "{{ trigger.entity_id }}"

#======================#
#     Mobile Texts     #
#======================#

# I'm using the last notification sensor from the HA companion app on my phone. If I'm not available
# to respond (sleeping, on the treadmill, maybe driving), and the text is from a family member, I want
# to send a response indicating I can't respond right now.
- alias: Respond To Mobile Text
  id: respond_to_mobile_text
  
  # Trigger on any state change to the last notification sensor.
  trigger:
    - platform: state
      entity_id: sensor.jon_galaxy_last_notification
      to:
  
  variables:
    title: "{{ state_attr('sensor.jon_galaxy_last_notification', 'android.title') }}"
    text: "{{ state_attr('sensor.jon_galaxy_last_notification', 'android.text') }}"
    
    from_michael: "{{ iif ('Michael' in title or 'Michael' in text, true, false) }}"
    from_maryam: "{{ iif ('Maryam' in title or 'Maryam' in text, true, false) }}"
    from_sarah: "{{ iif ('Sarah' in title or 'Sarah' in text, true, false) }}"
    from_david: "{{ iif ('David' in title or 'David' in text, true, false) }}"
    
    on_treadmill: "{{ states('input_boolean.treadmill_triggered') == 'on' }}"
    sleeping: "{{ states('input_boolean.sleeptime') == 'on' }}"
    driving: "{{ states('binary_sensor.jon_driving') == 'on' }}"
  
  condition:
    - and:
    
      # Text must be from family member
      - "{{ from_michael or from_maryam or from_sarah or from_david }}"
      
      # And any of the following. These are all mutually exclusive.
      - or:
    
        # I'm on the treadmill.
        - "{{ on_treadmill }}"
    
        # I'm sleeping.
        - "{{ sleeping }}"
    
        # I'm driving.
        - "{{ driving }}"
  
  action:
    - variables:
        number: >
          {% if from_michael %}
            9199246845
          {% elif from_maryam %}
            9197571974
          {% elif from_sarah %}
            2522302146
          {% elif from_david %}
            2522991689
          {% else %}
            0000000000
          {% endif %}
        
        activity: >
          {% if on_treadmill %}
            'on the treadmill'
          {% elif sleeping %}
            'asleep, and dreaming of sugarplums'
          {% elif driving %}
            'driving, or at least in a vehicle'
          {% else %}
            'unavailable for some unknown reason'
          {% endif %}
    
    # Send the response via gmail to the mobile number.
    - service: notify.gmail
      data:
        title: ' '
        target: "{{ number ~ '@vtext.com' }}"
        message: "{{ 'Sorry, I am ' ~ activity ~ '. I will respond when available.' }}"

#=========================#
#     ESPHome Updates     #
#=========================#

# Assist an ESPHome update all operation by temporarily turning off deep sleep for a battery device so the new firmware
# can be uploaded. This must be done in advance, because deep sleep can only be turned off at the device when it wakes
# from the previous deep sleep. The deep sleep time is 10 minutes, so this automation is triggered when the update all 
# operation is 2 devices before the battery device.
#
# See the ESPHome Update Sensor List and ESPHome Update Deep Sleep Trigger template sensors for more information.
- alias: Assist ESPHome Update All
  id: assist_esphome_update_all
  
  trigger:
    - platform: numeric_state
      entity_id: sensor.esphome_update_deep_sleep_trigger
      below: 1
  
  condition: "{{ trigger.from_state and trigger.from_state.state != 'unavailable' }}"
  
  action:
    - service: script.suspend_deep_sleep
      data:
        topic: 'porch-sensor/ota_mode'
    
    - delay: '00:07:00'
    
    - service: script.resume_deep_sleep
      data:
        topic: 'porch-sensor/ota_mode'
