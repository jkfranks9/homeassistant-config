#===============================================#
#     Ecobee Thermostat Preset Mode Control     #
#===============================================#

# Ecobee climate/preset modes:
#
#   - climate_mode: This is the mode as determined by the schedule for the thermostat (first character always uppercase).
#                   For example
#                     - 'Sleep' 11:00 PM -  7:30 AM
#                     - 'Away'   7:30 AM -  5:00 PM
#                     - 'Home'   5:00 PM - 11:00 PM
#   - preset_mode:  This is normally the same value as climate_mode. But in Smart Home and Smart Away conditions,
#                   it changes to 'home' or 'away' (first character lowercase). Confusingly, it also can be 'Vacation' for
#                   a scheduled vacation, even though that value cannot be assigned as a climate or preset mode.

# Transition from Home to Sleep mode upstairs if the cinema is not in use, and extended away is not active
# (extended away controls the thermostats).
- alias: Transition To Sleep Mode
  id: transition_to_sleep_mode
  
  trigger:
    - platform: time
      at: '20:00:00'
  
  condition:
    - condition: state
      entity_id: sensor.harmony_hub
      state: 'PowerOff'
    
    - condition: state
      entity_id: input_boolean.extended_away_mode
      state: 'off'
  
  action:
    - service: script.set_thermostat_preset
      data:
        thermostat_entity: climate.upstairs
        preset: 'sleep'

# Catch an unexpected transition away from vacation mode. If the upstairs bedroom is occupied, this should not happen.
# So put the vacation hold back on, and log it.
- alias: Catch Vacation Drop
  id: catch_vacation_drop
  
  trigger:
    - platform: state
      entity_id: climate.upstairs
      attribute: preset_mode
      from:
        - 'temp'
        - 'vacation'
      not_to:
        - 'temp'
        - 'vacation'
  
  condition:
    - condition: state
      entity_id: binary_sensor.penthouse_occupied
      state: 'on'
  
  action:
    - service: script.set_temporary_thermostat_hold
      data:
        thermostat_entity: climate.upstairs
        heat_temp: "{{ state_attr('sensor.variables', 'variables').upstairs_home_heat_temp }}"
        cool_temp: "{{ state_attr('sensor.variables', 'variables').upstairs_home_cool_temp }}"
        days: 7
    
    - service: system_log.write
      data:
        message: "Upstairs thermostat unexpectedly transitioned from {{ trigger.from_state.attributes.preset_mode }} to {{ trigger.to_state.attributes.preset_mode }}; resetting back to vacation mode."
        level: error

#============================================#
#     Temperature High / Low Water Marks     #
#============================================#

# Attic temperatures.
- alias: Set Minimum Attic Temperature
  id: set_minimum_attic_temperature
  use_blueprint:
    path: climate/temp_extremes.yaml
    input:
      sensor_entity: sensor.attic_temp_min
      result_entity: input_number.min_attic_temp
      type: Min

- alias: Set Maximum Attic Temperature
  id: set_maximum_attic_temperature
  use_blueprint:
    path: climate/temp_extremes.yaml
    input:
      sensor_entity: sensor.attic_temp_max
      result_entity: input_number.max_attic_temp
      type: Max

# Garage temperatures.
- alias: Set Minimum Garage Temperature
  id: set_minimum_garage_temperature
  use_blueprint:
    path: climate/temp_extremes.yaml
    input:
      sensor_entity: sensor.garage_temp_min
      result_entity: input_number.min_garage_temp
      type: Min

- alias: Set Maximum Garage Temperature
  id: set_maximum_garage_temperature
  use_blueprint:
    path: climate/temp_extremes.yaml
    input:
      sensor_entity: sensor.garage_temp_max
      result_entity: input_number.max_garage_temp
      type: Max

# Outdoor temperatures.
- alias: Set Minimum Outdoor Temperature
  id: set_minimum_outdoor_temperature
  use_blueprint:
    path: climate/temp_extremes.yaml
    input:
      sensor_entity: sensor.porch_temp_min
      result_entity: input_number.min_outdoor_temp
      type: Min

- alias: Set Maximum Outdoor Temperature
  id: set_maximum_outdoor_temperature
  use_blueprint:
    path: climate/temp_extremes.yaml
    input:
      sensor_entity: sensor.porch_temp_max
      result_entity: input_number.max_outdoor_temp
      type: Max

#========================#
#     Door & Windows     #
#========================#

# Turn off the downstairs HVAC system when any downstairs doors or windows are opened.
- alias: Turn Off Downstairs HVAC
  id: turn_off_downstairs_hvac
  
  trigger:
    - platform: state
      entity_id: binary_sensor.downstairs_doors_windows
      from: 'off'
      to: 'on'
      for: '00:02:00'

  action:
    - service: climate.turn_off
      target:
        entity_id: climate.downstairs

# Turn on the downstairs HVAC system when all downstairs doors and windows are closed.
- alias: Turn On Downstairs HVAC
  id: turn_on_downstairs_hvac
  
  trigger:
    - platform: state
      entity_id: binary_sensor.downstairs_doors_windows
      from: 'on'
      to: 'off'

  condition:
    - condition: state
      entity_id: climate.downstairs
      state: 'off'
  
  action:
    - service: climate.turn_on
      target:
        entity_id: climate.downstairs

#================================#
#     Astronomical Condition     #
#================================#

# The astronomical condition is whether or not it's worthwhile to head outside for some stargazing.

# We want to calculate the astronomical condition an hour or two before the end of astronomical twilight, so I
# have time to prepare. Sunset is a reasonable offset.
- alias: Calculate Astronomical Condition
  id: calculate_astronomical_condition
  
  triggers:
    - trigger: sun
      event: sunset

  actions:   
    - variables:
        
        # The first hour of the target time span is the end of astronomical twilight. The last hour is hardcoded as 11 PM.
        first_hour: "{{ as_local(as_datetime(states('sensor.astroweather_white_rabbit_gardens_sun_next_setting_astronomical'))).hour }}"
    
    # Calculate the weather metrics for the target time span.
    - action: script.calculate_weather_metrics
      data:
        weather_entity: weather.astroweather_white_rabbit_gardens
        forecast_type: hourly
        first_hour: "{{ first_hour }}"
        last_hour: 23
        metrics_list:
          - ['input_number.average_astro_condition', 'condition', 50, 0]
          - ['input_number.average_astro_cloudless_percentage', 'cloudless_percentage', 50, 0]
          - ['input_number.average_astro_seeing_percentage', 'seeing_percentage', 50, 0]
          - ['input_number.average_astro_transparency_percentage', 'transparency_percentage', 50, 0]

#======================#
#     Temperatures     #
#======================#

# Check for freezing temperature, which can cause a water pipe to freeze. I want to be notified of such before it happens.
- alias: Check Freezing Temperature
  id: check_freezing_temperature
  
  triggers:
    
    # Trigger if the temperature falls below a threshold. Note that the threshold here is a bit above the 
    # value we actually check for freezing, just to have a little wiggle room. Also note that we honor this trigger
    # only when I'm awake, using the condition.
    - trigger: numeric_state
      entity_id:
        - sensor.openweathermap_temperature
        - sensor.porch_sensor_temperature
      below: 30
      id: awake
    
    # Trigger at bedtime.
    - trigger: state
      entity_id: input_boolean.nighttime
      from: 'off'
      to: 'on'
      id: asleep
  
  conditions: "{{ is_state('input_boolean.nighttime', 'off') or trigger.id == 'asleep' }}"
  
  actions:
    - variables:
        
        # Start with the next hour. However, if we're already close to the next hour skip 2 hours ahead
        # (for example it's 10:58, skip to midnight).
        next_hour: >
          {% set curr_hour = as_local(as_datetime(now())).hour %}
          {% set curr_minute = as_local(as_datetime(now())).minute %}
          {{ iif(curr_minute <= 55, curr_hour + 1, curr_hour + 2) }}
        
        # The last hour is either midnight (if we triggered while awake) or noon (if we triggered at bedtime).
        last_hour: "{{ iif(trigger.id == 'awake', 0, 12) }}"
    
    # Calculate the minimum outdoor temperature for the time span and set it in a number. The notification automation
    # triggers on the low temperature number being below a threshold.
    - action: script.calculate_weather_metrics
      data:
        weather_entity: weather.openweathermap
        forecast_type: hourly
        first_hour: "{{ next_hour }}"
        last_hour: "{{ last_hour }}"
        metrics_list:
          - ['input_number.minimum_outdoor_temperature', 'temperature', 33, 120]
    
    # Flip the freezing temperature toggle on if the minimum temperature we just calculated is below the threshold.
    - if:
        - condition: numeric_state
          entity_id: input_number.minimum_outdoor_temperature
          below: 25
      
      then:
        - action: input_boolean.turn_on
          target:
            entity_id: input_boolean.freezing_temperature

# Reset the freezing temperature toggle if the temp rises above a threshold, so it's guaranteed to trigger again if the temp falls.
- alias: Reset Freezing Temperature
  id: reset_freezing_temperature
  
  triggers:
    - trigger: numeric_state
      entity_id:
        - sensor.openweathermap_temperature
        - sensor.porch_sensor_temperature
      above: 33
  
  actions:
    - action: input_boolean.turn_off
      target:
        entity_id: input_boolean.freezing_temperature

# Check for temperatures too low for the pool salt system to function. I want to be notified of such before it happens so I can
# add chlorine tabs to the pool.
- alias: Check Salt System Low Temperature
  id: check_salt_system_low_temperature
  
  triggers:
    - trigger: time
      at: '06:00:00'
  
  actions:
    
    # Initialize the notification toggle.
    - action: input_boolean.turn_off
      target:
        entity_id: input_boolean.salt_system_low_temperature
    
    # Calculate the lowest low and highest high temperatures for the next 3 days.
    - action: script.calculate_weather_metrics
      data:
        weather_entity: weather.openweathermap
        forecast_type: daily
        num_days: 3
        metrics_list:
          - ['input_number.minimum_daily_temperature', 'templow', 60, 100]
          - ['input_number.maximum_daily_temperature', 'temperature', 60, 0]
    
    # If all such temps are below the threshold then set a toggle for the notification.
    - if:
        - condition: numeric_state
          entity_id:
            - input_number.minimum_daily_temperature
            - input_number.maximum_daily_temperature
          below: 55
      
      then:
        - action: input_boolean.turn_on
          target:
            entity_id: input_boolean.salt_system_low_temperature
