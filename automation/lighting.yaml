#=====================================#
#     Nighttime / Sleeptime Modes     #
#=====================================#

# The Nighttime flag indicates I've gone to bed. The main usage is to prevent certain automations 
# (like turning on lights) from running at an inappropriate time.
#
# The Sleeptime flag covers the period from going to bed and going to sleep. Normally I'm reading,
# so don't want the bedroom light turning off unexpectedly.
#
# These flags are usually managed by the bedtime, sleeptime, awake and wakeup scripts. But if those
# are not used for some reason, also manage the flags here using failsafe times.

# Set Nighttime true at a failsafe time (should be in bed).
- alias: Enable Nighttime Mode
  id: 'enable_nighttime_mode'
  trigger:
    - platform: time
      at: '00:30:00'
    - platform: homeassistant
      event: start
  condition:
    - condition: time
      after: '00:30:00'
      before: '07:30:00'
  action:
    - delay: 
        seconds: "{{ range(2, 15) | random }}"
    - service: input_boolean.turn_on
      entity_id: input_boolean.nighttime

# Set Sleeptime true at a failsafe time (should be asleep).
- alias: Enable Sleeptime Mode
  id: 'enable_sleeptime_mode'
  trigger:
    - platform: time
      at: '01:30:00'
    - platform: homeassistant
      event: start
  condition:
    - condition: time
      after: '01:30:00'
      before: '07:30:00'
  action:
    - delay: 
        seconds: "{{ range(2, 15) | random }}"
    - service: input_boolean.turn_on
      entity_id: input_boolean.sleeptime

# Set Nighttime and Sleeptime false at a failsafe time (should be out of bed).
- alias: Disable Nighttime & Sleeptime Modes
  id: 'disable_nighttime_sleeptime_modes'
  
  trigger:
    - platform: time
      at: '07:30:00'
    
    - platform: template
      value_template: "{{ state_attr('sun.sun', 'elevation') | float(0) >= states('sensor.min_elevation') | float(0) }}"
    
    - platform: homeassistant
      event: start
  
  condition:
    - or:
      - condition: time
        after: '07:30:00'
        before: '23:00:00'
      
      - "{{ state_attr('sun.sun', 'elevation') | float(0) >= states('sensor.min_elevation') | float(0) }}"
  
  action:
    - delay: 
        seconds: "{{ range(2, 15) | random }}"
    
    - service: input_boolean.turn_off
      entity_id: input_boolean.nighttime
    
    - service: input_boolean.turn_off
      entity_id: input_boolean.sleeptime

# Reset the bedtime environment when the nighttime flag turns off.
- alias: Reset Bedtime Environment
  id: 'reset_bedtime_environment'
  
  trigger:
    - platform: state
      entity_id: input_boolean.nighttime
      from: 'on'
      to: 'off'
  
  action:
    - service: script.reset_bedtime_environment

#======================#
#     Lux Sensors      #
#======================#

# Control the office lamp based on ambient lux level.
- alias: Control Office Lamp
  id: control_office_lamp

  use_blueprint:
    path: lighting/lux_light.yaml
    input:
      lux_sensor: sensor.office_sensor_ambient_light
      light_target: light.office_lamp
      min_lux_level: 150
      max_lux_level: 300
      check_theater: false

# Control the family room lamp based on ambient lux level.
- alias: Control Family Room Lamp
  id: control_family_room_lamp

  use_blueprint:
    path: lighting/lux_light.yaml
    input:
      lux_sensor: sensor.foyer_sensor_ambient_light
      light_target: light.family_room_lamp
      min_lux_level: 250
      max_lux_level: 650
      check_theater: true

# Control the hallway lamp based on ambient lux level.
- alias: Control Hallway Lamp
  id: control_hallway_lamp

  use_blueprint:
    path: lighting/lux_light.yaml
    input:
      lux_sensor: sensor.foyer_sensor_ambient_light
      light_target: light.hallway_lamp
      min_lux_level: 400
      max_lux_level: 900
      check_theater: true

#============================#
#     Extended Away Mode     #
#============================#

# Triggered on the start of an extended away period.
- alias: Enable Extended Away Mode
  id: enable_extended_away_mode
  
  trigger:
    - platform: time
      at: input_datetime.extended_away_start
  
  action:
    
    # Turn on extended away mode.
    - service: input_boolean.turn_on
      entity_id: input_boolean.extended_away_mode
    
    # Set thermostat holds.
    - service: script.set_extended_thermostat_holds
      data:
        heat_temp: "{{ state_attr('sensor.variables', 'variables').extended_hold_heat_temp }}"
        cool_temp: "{{ state_attr('sensor.variables', 'variables').extended_hold_cool_temp }}"

# Triggered on the end of an extended away period.
- alias: Disable Extended Away Mode
  id: disable_extended_away_mode
  
  trigger:
    - platform: time
      at: input_datetime.extended_away_end
  
  action:
    
    # Turn off extended away mode.
    - service: input_boolean.turn_off
      entity_id: input_boolean.extended_away_mode
    
    # Remove thermostat holds.
    - service: script.remove_thermostat_hold
      data:
        thermostat_entity: climate.downstairs
        extended: true
    
    - service: script.remove_thermostat_hold
      data:
        thermostat_entity: climate.upstairs
        extended: true

# Randomly turn certain lights on/off during extended away mode, between ~sunset and nighttime start, and
# between nighttime end and ~sunrise (only occurs during winter-ish months).

- alias: Run Extended Away Lights
  id: run_extended_away_lights
  
  trigger:
    - platform: state
      entity_id: input_boolean.extended_away_mode
      to: 'on'
    
    - platform: state
      entity_id: input_boolean.nighttime
      to: 'off'
    
    - platform: state
      entity_id: sun.sun
      to: below_horizon
    
    - platform: homeassistant
      event: start
  
  condition:
    - condition: state
      entity_id: input_boolean.extended_away_mode
      state: 'on'
    
    - condition: state
      entity_id: input_boolean.nighttime
      state: 'off'
    
    - condition: state
      entity_id: sun.sun
      state: below_horizon
  
  action:
    - delay: 
        seconds: "{{ range(2, 15) | random }}"
    
    # Set variables.
    - variables:
        group_id: 'light.away_lights'
        max_on: 3
        normal_lights: "{{ ['light.family_room_lamp', 'light.office_lamp'] }}"
        group_lights_entities: "{{ expand(group_id) | map(attribute = 'entity_id') | list }}"
        group_lights_filtered_entities: "{{ expand(group_id) | rejectattr('entity_id', 'in', normal_lights) | map(attribute = 'entity_id') | list }}"
              
    # Initialize the early return toggle.
    - service: input_boolean.turn_off
      entity_id: input_boolean.extended_away_early_return
    
    # Repeat until the conditions are no longer met.
    - repeat:
      
        sequence:
        
          - variables:
              lights_on_count: "{{ expand(group_id) | selectattr('state', 'eq', 'on') | list | length }}"
              lights_on_entities: "{{ expand(group_id) | selectattr('state', 'eq', 'on') | map(attribute = 'entity_id') | list }}"
              toggle_entity: >
                {% if lights_on_count > max_on %}
                  {{ lights_on_entities | random }}
                {% else %}
                  {{ group_lights_entities | random }}
                {% endif %}
        
          # Toggle a random light from the away group. We picked an entity above as follows:
          #
          # - If the number of lights currently on exceeds the maximum, pick an entity from those that are already on.
          # - Otherwise, pick any entity from the away group.
          - service: homeassistant.toggle
            data:
              entity_id: "{{ toggle_entity }}"
     
          # Delay for a random number of minutes. I want to exit early if I return home before the end of the
          # extended away period. In this case, the extended away flag is turned off due to proximity, or when 
          # the Open House automation runs (as a failsafe). This causes the wait_template to complete with the 
          # variable wait.completed set to true.
          - wait_template: "{{ is_state('input_boolean.extended_away_mode', 'off') }}"
            timeout:
              minutes: "{{ range(10, 60) | random }}"
          - if:
              - "{{ wait.completed }}"
            
            then:
              
              # Turn on the early return toggle. Due to local variable scope, I can't just use the wait.completed flag below.
              - service: input_boolean.turn_on
                entity_id: input_boolean.extended_away_early_return
      
        # Conditions that cause us to end the repeat sequence.
        until:        
          - condition: template
            value_template: >
              {{ is_state('input_boolean.extended_away_mode', 'off') or
                 is_state('input_boolean.nighttime', 'on') or
                 states('sun.sun') == 'above_horizon' }}
    
    # The conditions are no longer true, so turn off unneeded away lights. Normally, this is all away lights.
    # But if I returned home early, the early return toggle will be on. In this case I only want to turn off away lights
    # that are not normally on when I'm home (and make sure the normal lights are turned on).
    - if:
        - condition: state
          entity_id: input_boolean.extended_away_early_return
          state: 'off'
      
      then:
        - service: homeassistant.turn_off
          entity_id: light.away_lights
      
      else:
        - service: homeassistant.turn_on
          data:
            entity_id: "{{ normal_lights }}"
        
        - service: homeassistant.turn_off
          data:
            entity_id: "{{ group_lights_filtered_entities }}"

# Turn off extended away mode when Jon is nearing home (proximity is somewhat unreliable, so if this doesn't trigger we have a failsafe 
# below in Open House).
- alias: Turn Off Extended Away Mode
  id: 'turn_off_extended_away_mode'
  
  trigger:
    - platform: template
      value_template: "{{ states('sensor.home_jon_distance') | int(0) < 13000 }}"
      
  condition: "{{ is_state('sensor.home_jon_direction_of_travel', 'towards') }}"
  
  action:
    - service: script.turn_off_extended_away_mode

#=========================#
#     Motion Sensors      #
#=========================#

- alias: Run Studio Motion Based Light
  id: 'run_studio_motion_based_light'
  
  trace:
    stored_traces: 20

  use_blueprint:
    path: lighting/motion_light_with_fan.yaml
    input:
      motion_entity: binary_sensor.studio_motion_detector_occupancy
      light_entity: light.studio_light
      fan_entity: switch.studio_fan
      no_motion_wait_fan_off: 120
      no_motion_wait_fan_on:  420
      additional_fan_wait:    300
      windowed: false

- alias: Run Laundry Room Motion Based Light
  id: 'run_laundry_room_motion_based_light'
  
  trace:
    stored_traces: 20

  use_blueprint:
    path: lighting/motion_light.yaml
    input:
      motion_entity: binary_sensor.laundry_room_motion_detector_occupancy
      light_target: 
        entity_id: light.laundry_room_light
      no_motion_wait: 180

- alias: Run Master Bath Motion Based Light
  id: 'run_master_bath_motion_based_light'
  
  trace:
    stored_traces: 20

  use_blueprint:
    path: lighting/motion_light_with_fan.yaml
    input:
      motion_entity: binary_sensor.master_bath_motion_detector_occupancy
      light_entity: light.master_vanity_light
      fan_entity: switch.master_bath_fan
      no_motion_wait_fan_off: 240
      no_motion_wait_fan_on:  420
      additional_fan_wait:    300
      windowed: true

#===========================#
#     Guest Lights/Fans     #
#===========================#

# Turn on guest lights near sunset or in the evening when children are home.
- alias: Turn On Guest Lights Sunset
  id: 'turn_on_guest_lights_sunset'
  
  trigger:
    
    # Trigger near sunset.
    - platform: template
      value_template: "{{ state_attr('sun.sun', 'elevation') | float(0) <= states('sensor.min_elevation') | float(0) }}"
    
    - platform: time
      at: '19:30:00'
    
    - platform: homeassistant
      event: start
  
  condition:
    - condition: state
      entity_id: binary_sensor.children_home
      state: 'on'
    
    - "{{ state_attr('sun.sun', 'elevation') | float(0) <= states('sensor.min_elevation') | float(0) }}"
    
    - condition: time
      after: '19:30:00'
    
    - condition: state
      entity_id: input_boolean.nighttime
      state: 'off'
  
    - condition: state
      entity_id: person.jon
      state: 'home'
    
  action:
    - delay: 
        seconds: "{{ range(2, 15) | random }}"
    
    - service: script.set_up_children_only_bedtime_environment
      data:
        stage: 'pre'
    
    # Always turn on the downstairs bedroom light; that's home base.
    - service: light.turn_on
      entity_id: light.studio_lamp_2

# Turn off guest lights after bedtime when grandchildren are home.
- alias: Turn Off Guest Lights Bedtime
  id: 'turn_off_guest_lights_bedtime'
  
  trigger:
    - platform: time
      at: '22:30:00'
    
    - platform: homeassistant
      event: start
  
  condition:
    - condition: time
      after: '22:30:00'
    
    - "{{ states('input_select.occupied_bedrooms') in ['ChildDown', 'ChildDownPlus'] }}"
  
  action:
    - delay: 
        seconds: "{{ range(2, 15) | random }}"
    
    - service: script.set_up_children_only_bedtime_environment
      data:
        stage: 'post'

#==========================#
#     Christmas Lights     #
#==========================#

# Turn on Christmas lights in the morning on certain Christmas-y days.
- alias: Turn On Christmas Lights
  id: 'turn_on_christmas_lights'
  trigger:
    - platform: time
      at: '08:00:00'
    - platform: homeassistant
      event: start
  condition:
    - condition: time
      after: '08:00:00'
    - condition: time
      before: '22:30:00'
    - condition: state
      entity_id: person.jon
      state: 'home'
    - condition: template
      value_template: >
        {{ now().strftime('%m-%d') == '12-24' or
           now().strftime('%m-%d') == '12-25' or
           now().strftime('%m-%d') == '12-31' or
           now().strftime('%m-%d') == '01-01' }}
  action:
    - delay: 
        seconds: "{{ range(2, 15) | random }}"
    - service: script.turn_on_christmas_lights

# Turn off Christmas lights at night on certain Christmas-y days.
- alias: Turn Off Christmas Lights
  id: 'turn_off_christmas_lights'
  trigger:
    - platform: time
      at: '22:30:00'
    - platform: homeassistant
      event: start
  condition:
    - condition: time
      after: '22:30:00'
    - condition: time
      before: '08:00:00'
    - condition: template
      value_template: >
        {{ now().strftime('%m-%d') == '12-24' or
           now().strftime('%m-%d') == '12-25' or
           now().strftime('%m-%d') == '12-31' or
           now().strftime('%m-%d') == '01-01' }}
  action:
    - delay: 
        seconds: "{{ range(2, 15) | random }}"
    - service: script.turn_off_christmas_lights

#===================================#
#     Amazon Smart Plug Control     #
#===================================#

# See the alexa_ha_plug input boolean for more details. The media_content_id defines the voice command sent
# to Alexa, and must match the corresponding voice trigger defined in the Alexa routines.
- alias: Turn On Office Bookcase Via Alexa
  id: 'turn_on_office_bookcase_via_alexa'

  trigger:
  - platform: state
    entity_id: input_boolean.alexa_ha_plug
    to: 'on'

  action:
    - service: media_player.play_media
      target:
        entity_id: media_player.family_room_echo
      data:
        media_content_id: HA Office Bookcase On
        media_content_type: routine
      metadata: {}

- alias: Turn Off Office Bookcase Via Alexa
  id: 'turn_off_office_bookcase_via_alexa'

  trigger:
  - platform: state
    entity_id: input_boolean.alexa_ha_plug
    to: 'off'

  action:
    - service: media_player.play_media
      target:
        entity_id: media_player.family_room_echo
      data:
        media_content_id: HA Office Bookcase Off
        media_content_type: routine
      metadata: {}

#=====================#
#     Smart Bulbs     #
#=====================#
    
# We have power glitches occasionally, which cause all TP-Link smart bulbs to turn on. This sensor
# attempts to catch such a glitch by detecting when all bulbs turn on within a short time. This 
# should never happen normally. 
#
# Call the Reset Smart Bulbs script to reset all smart bulbs based on various conditions, so we don't turn 
# them off if they're supposed to be on at the moment.
- alias: Reset Smart Bulbs On Power Glitch
  id: 'reset_smart_bulbs_on_power_glitch'
  
  # Queue all potential triggers.
  mode: queued
  
  # The 'for' option in the triggers should eliminate very quick multiple glitches. But of course this isn't perfect.
  # Oh well.
  trigger:
    - platform: state
      entity_id: light.office_lamp
      from: 'off'
      to: 'on'
      for: '00:00:03'
      id: office
    
    - platform: state
      entity_id: light.master_bedroom_lamp
      from: 'off'
      to: 'on'
      for: '00:00:03'
      id: bedroom
  
  variables:
    
    # Get the last changed time of all smart bulbs as a UNIX timestamp, for easy arithmetic.
    office_last_changed: "{{ as_timestamp(as_datetime(states.light.office_lamp.last_changed.isoformat())) }}"
    bedroom_last_changed: "{{ as_timestamp(as_datetime(states.light.master_bedroom_lamp.last_changed.isoformat())) }}"
    
    # The number of seconds we consider 'recent'. Since this automation runs queued, this should be slightly greater than
    # the sum of the 'for' options in the triggers.
    recent_seconds: 7
  
  action:
    
    # Take action based on the trigger id. We then check if the last changed of all the other bulbs is within the recent seconds,
    # but not negative. Only one of these choices should ever be true. I hope.
    - choose:
      - conditions: "{{ trigger.id == 'office' }}"
        
        sequence:
          - if:
              - "{{ 0 < office_last_changed - bedroom_last_changed < recent_seconds }}"
            
            then:
              - service: script.reset_smart_bulbs
      
      - conditions: "{{ trigger.id == 'bedroom' }}"
        
        sequence:
          - if:
              - "{{ 0 < bedroom_last_changed - office_last_changed < recent_seconds }}"
            
            then:
              - service: script.reset_smart_bulbs

#===================#
#     Bath Time     #
#===================#

# Prevent the bath light turning off while taking a bath. Script by the same name kicks off the timer used here.
- alias: Stop Bath Time
  id: 'stop_bath_time'
  
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.bath_time
  
  action:
    - service: automation.turn_on
      entity_id: automation.run_studio_motion_based_light

#============================#
#     Ceiling Fan Lights     #
#============================#

# Turn off ceiling fan lights. This is triggered from scenes that turn off all/most lights.
# We can't put the fan lights in the scenes themselves, due to those lights operating in optimistic mode.
- alias: Turn Off Fan Lights
  id: turn_off_fan_lights
  
  # Trigger on a toggle that's turned on by various scenes.
  trigger:
    - platform: state
      entity_id: input_boolean.ceiling_fan_lights_off
      from: 'off'
      to: 'on'
  
  variables:
    
    # List of all ceiling fan light entities.
    fan_lights: "{{ expand(state_attr('light.ceiling_fan_lights', 'entity_id')) | map(attribute = 'entity_id') | list }}"
  
  action:
    
    - repeat:
        
        # Repeat for all ceiling fan lights.
        for_each: "{{ fan_lights }}"
        
        sequence:
          
          # Turn off the light if we think it's on.
          - if:
              - "{{ states(repeat.item) == 'on' }}"
            
            then:
              - service: light.turn_off
                target:
                  entity_id: "{{ repeat.item }}"
  
              - service: system_log.write
                data:
                  message: "Turned off {{ repeat.item }}"
                  level: info    
    
    # Reset the toggle.
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.ceiling_fan_lights_off
