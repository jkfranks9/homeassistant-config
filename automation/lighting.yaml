#=====================================#
#     Nighttime / Sleeptime Modes     #
#=====================================#

# Reset Nighttime and Sleeptime when I'm no longer sleeping, and the office becomes occupied (I always use the office
# in the morning). I don't want to use wait_for_trigger because I would need a long timeout, which could be lost if
# HA reboots (very unlikely since I'd need to be in the office to kick off a reboot, but still). So I'm using several
# triggers to accomplish the same thing in a terrible way.
#
# Without waiting for the office occupation, this automation conflicts with Reset Smart Bulb Nighttime, and the bedroom
# lamp won't stay on if I choose to stay in bed for a while in the morning. What a bother!
- alias: Handle Jon Awake
  id: 'handle_jon_awake'
  
  triggers:
    - trigger: state
      entity_id: binary_sensor.jon_sleeping
      from: 'on'
      to: 'off'
  
    - trigger: state
      entity_id: input_boolean.office_occupied
      from: 'off'
      to: 'on'
    
    - platform: homeassistant
      event: start
  
  conditions:
    - condition: state
      entity_id: binary_sensor.jon_sleeping
      state: 'off'
  
    - condition: state
      entity_id: input_boolean.office_occupied
      state: 'on'
  
  actions:
    - delay: 
        seconds: "{{ range(2, 15) | random }}"
    
    - service: input_boolean.turn_off
      entity_id:
        - input_boolean.nighttime
        - input_boolean.sleeptime

# Reset the bedtime environment when the nighttime flag turns off.
- alias: Reset Bedtime Environment
  id: 'reset_bedtime_environment'
  
  trigger:
    - platform: state
      entity_id: input_boolean.nighttime
      from: 'on'
      to: 'off'
  
  action:
    - service: script.reset_bedtime_environment

# Set the sleep start time.
- alias: Set Sleep Start
  id: set_sleep_start

  triggers:
    - trigger: state
      entity_id: binary_sensor.jon_sleeping
      to: 'on'
  
  actions:
    - action: input_datetime.set_datetime
      target:
        entity_id: input_datetime.sleep_start
      data:
        datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
    
    - action: notify.alexa_media
      data:
        message: 'Good night.'
        target: media_player.master_bedroom_echo
        data:
          type: tts

# Set the sleep duration in hours.
- alias: Set Sleep Duration
  id: set_sleep_duration

  triggers:
    - trigger: state
      entity_id: binary_sensor.jon_sleeping
      to: 'off'
  
  actions:
    - variables:
        duration: "{{ ((as_timestamp(now().strftime('%Y-%m-%d %H:%M:%S')) - as_timestamp(states('input_datetime.sleep_start'))) / 3600) | round(2) }}"
    
    - action: input_number.set_value
      target:
        entity_id: input_number.sleep_duration
      data:
        value: "{{ duration }}"
    
    - delay:
        milliseconds: 500
    
    - variables:
        hours: "{{ states('sensor.sleep_duration_display').split(' ')[0].replace('h', '') }}"
        minutes: "{{ states('sensor.sleep_duration_display').split(' ')[1].replace('m', '') }}"
    
    - action: notify.alexa_media
      data:
        message: "{{ 'Good morning. You slept ' ~ hours ~ ' hours' ~ iif(minutes | int(0) > 0, ' and ' ~ minutes ~ ' minutes.', '.') }}"
        target: media_player.master_bedroom_echo
        data:
          type: tts
    
    # Turn on voice assistant screens.
    - if:
        - condition: numeric_state
          entity_id: sensor.downstairs_sensor_ambient_light
          below: input_number.family_room_ambient_max
      
      then:    
        - scene: scene.voice_assistants_on_dim
      
      else:    
        - scene: scene.voice_assistants_on_bright

#======================#
#     Lux Sensors      #
#======================#

# We want to enable the correct automation to light up the family room, based on the Christmas Mode toggle.
#
# There are 2 automations:
# 1) Enable the second automation when Christmas mode is turned on; disable it when turned off.
# 2) Control the family room automations based on which quandrant of the sun is active (above|below horizon & rising|setting).
#
# Note that we only want Christmas lights in the evening; we always want to use the family room lamp in the morning.
#
# Also note that Christmas lights are on almost all day a few days around Christmas and New Year. See
# Control All Day Christmas Lights for how that affects these automations.

- alias: Toggle Control Automation
  id: toggle_control_automation

  triggers:
    - trigger: state
      entity_id: input_boolean.christmas_mode
      to:
  
  actions:
    - variables:
        toggle_operation: "{{ states('input_boolean.christmas_mode') }}"
    
    # Enable or disable Control Family Room Light Automations.
    - action: automation.turn_{{ toggle_operation }}
      entity_id: automation.control_family_room_light_automations
    
    # If we're currently after solar noon (not rising) and before sunset (above horizon) then we want to enable/disable the
    # family room automations here, because Control Family Room Light Automations won't be triggered today.
    - if:
        - "{{ is_state_attr('sun.sun', 'rising', false) and is_state('sun.sun', 'above_horizon') }}"
      
      then:
        - action: automation.turn_{{ iif(toggle_operation == 'on', 'off', 'on') }}
          entity_id: automation.control_family_room_lamp
        
        - action: automation.turn_{{ iif(toggle_operation == 'on', 'on', 'off') }}
          entity_id: automation.control_christmas_lights

- alias: Control Family Room Light Automations
  id: control_family_room_light_automations

  triggers:
    
    # Trigger on the sun state only, which happens at sunrise and sunset.
    - trigger: state
      entity_id: sun.sun
      to:
    
    # Trigger on the rising attribute, which happens at solar noon/midnight.
    - trigger: state
      entity_id: sun.sun
      attribute: rising
  
  actions:
    - if:
        - "{{ is_state_attr('sun.sun', 'rising', false) and is_state('sun.sun', 'above_horizon') }}"
      
      # If we're currently after solar noon and before sunset, select the Christmas lights automation.
      # However, don't enable the Christmas lights automation itself if the all day sensor is on, because then
      # the lights can turn off during the day based on the sensor. Complications! Devilish details!
      then:
        - action: automation.turn_off
          entity_id: automation.control_family_room_lamp
        
        - if:
            - condition: state
              entity_id: binary_sensor.all_day_christmas_lights
              state: 'off'
          
          then:        
            - action: automation.turn_on
              entity_id: automation.control_christmas_lights
      
      # Otherwise select the family room lamp automation.
      else:
        - action: automation.turn_on
          entity_id: automation.control_family_room_lamp
        
        - action: automation.turn_off
          entity_id: automation.control_christmas_lights

# Control the office lamp based on ambient lux level.
- alias: Control Office Lamp
  id: control_office_lamp

  use_blueprint:
    path: lighting/lux_light.yaml
    input:
      lux_sensor: sensor.office_sensor_ambient_light
      light_target: light.office_lamp
      min_lux_level: input_number.office_ambient_min
      max_lux_level: input_number.office_ambient_max
      check_theater: false
      check_christmas: false

# Control the hallway lamp based on ambient lux level.
- alias: Control Hallway Lamp
  id: control_hallway_lamp

  use_blueprint:
    path: lighting/lux_light.yaml
    input:
      lux_sensor: sensor.downstairs_sensor_ambient_light
      light_target: light.hallway_lamp
      min_lux_level: input_number.hallway_ambient_min
      max_lux_level: input_number.hallway_ambient_max
      check_theater: true
      check_christmas: false

# Control the family room lamp based on ambient lux level.
# NOTE: This is disabled when the Christmas Mode toggle is on.
- alias: Control Family Room Lamp
  id: control_family_room_lamp

  use_blueprint:
    path: lighting/lux_light.yaml
    input:
      lux_sensor: sensor.downstairs_sensor_ambient_light
      light_target: light.family_room_lamp
      min_lux_level: input_number.family_room_ambient_min
      max_lux_level: input_number.family_room_ambient_max
      check_theater: true
      check_christmas: false

# Control Christmas lights based on ambient lux level.
# NOTE: This is disabled when the Christmas Mode toggle is off.
- alias: Control Christmas Lights
  id: control_christmas_lights

  use_blueprint:
    path: lighting/lux_light.yaml
    input:
      lux_sensor: sensor.downstairs_sensor_ambient_light
      light_target: light.family_room_lamp
      min_lux_level: input_number.family_room_ambient_min
      max_lux_level: input_number.family_room_ambient_max
      check_theater: true
      check_christmas: true

# Control voice assistant screens based on ambient lux level.
- alias: Control Voice Assistant Screens
  id: control_voice_assistant_screens
  
  triggers:
    - trigger: numeric_state
      entity_id: sensor.downstairs_sensor_ambient_light
      below: input_number.family_room_ambient_min
      id: dim
  
    - trigger: numeric_state
      entity_id: sensor.downstairs_sensor_ambient_light
      above: input_number.family_room_ambient_max
      id: bright
    
  actions:
    - if:
        - "{{ trigger.id == 'dim' }}"
      
      then:    
        - scene: scene.voice_assistants_on_dim
      
      else:    
        - scene: scene.voice_assistants_on_bright

#============================#
#     Extended Away Mode     #
#============================#

# Triggered on the start of an extended away period.
- alias: Enable Extended Away Mode
  id: enable_extended_away_mode
  
  trigger:
    - platform: time
      at: input_datetime.extended_away_start
  
  action:
    
    # Turn on extended away mode.
    - service: input_boolean.turn_on
      entity_id: input_boolean.extended_away_mode
    
    # Set thermostat holds.
    - service: script.set_extended_thermostat_holds
      data:
        heat_temp: "{{ state_attr('sensor.variables', 'variables').extended_hold_heat_temp }}"
        cool_temp: "{{ state_attr('sensor.variables', 'variables').extended_hold_cool_temp }}"

# Triggered on the end of an extended away period.
- alias: Disable Extended Away Mode
  id: disable_extended_away_mode
  
  trigger:
    - platform: time
      at: input_datetime.extended_away_end
  
  action:
    
    # Turn off extended away mode.
    - service: input_boolean.turn_off
      entity_id: input_boolean.extended_away_mode
    
    # Remove thermostat holds.
    - service: script.remove_thermostat_hold
      data:
        thermostat_entity: climate.downstairs
        extended: true
    
    - service: script.remove_thermostat_hold
      data:
        thermostat_entity: climate.upstairs
        extended: true

# Randomly turn certain lights on/off during extended away mode, between ~sunset and nighttime start, and
# between nighttime end and ~sunrise (only occurs during winter-ish months).

- alias: Run Extended Away Lights
  id: run_extended_away_lights
  
  trigger:
    - platform: state
      entity_id: input_boolean.extended_away_mode
      to: 'on'
    
    - platform: state
      entity_id: input_boolean.nighttime
      to: 'off'
    
    - platform: state
      entity_id: sun.sun
      to: below_horizon
    
    - platform: homeassistant
      event: start
  
  condition:
    - condition: state
      entity_id: input_boolean.extended_away_mode
      state: 'on'
    
    - condition: state
      entity_id: input_boolean.nighttime
      state: 'off'
    
    - condition: state
      entity_id: sun.sun
      state: below_horizon
  
  action:
    - delay: 
        seconds: "{{ range(2, 15) | random }}"
    
    # Set variables.
    - variables:
        group_id: 'light.away_lights'
        max_on: 3
        normal_lights: "{{ ['light.family_room_lamp', 'light.office_lamp'] }}"
        group_lights_entities: "{{ expand(group_id) | map(attribute = 'entity_id') | list }}"
        group_lights_filtered_entities: "{{ expand(group_id) | rejectattr('entity_id', 'in', normal_lights) | map(attribute = 'entity_id') | list }}"
              
    # Initialize the early return toggle.
    - service: input_boolean.turn_off
      entity_id: input_boolean.extended_away_early_return
    
    # Repeat until the conditions are no longer met.
    - repeat:
      
        sequence:
        
          - variables:
              lights_on_count: "{{ expand(group_id) | selectattr('state', 'eq', 'on') | list | length }}"
              lights_on_entities: "{{ expand(group_id) | selectattr('state', 'eq', 'on') | map(attribute = 'entity_id') | list }}"
              toggle_entity: >
                {% if lights_on_count > max_on %}
                  {{ lights_on_entities | random }}
                {% else %}
                  {{ group_lights_entities | random }}
                {% endif %}
        
          # Toggle a random light from the away group. We picked an entity above as follows:
          #
          # - If the number of lights currently on exceeds the maximum, pick an entity from those that are already on.
          # - Otherwise, pick any entity from the away group.
          - service: homeassistant.toggle
            data:
              entity_id: "{{ toggle_entity }}"
     
          # Delay for a random number of minutes. I want to exit early if I return home before the end of the
          # extended away period. In this case, the extended away flag is turned off due to proximity, or when 
          # the Open House automation runs (as a failsafe). This causes the wait_template to complete with the 
          # variable wait.completed set to true.
          - wait_template: "{{ is_state('input_boolean.extended_away_mode', 'off') }}"
            timeout:
              minutes: "{{ range(10, 60) | random }}"
          - if:
              - "{{ wait.completed }}"
            
            then:
              
              # Turn on the early return toggle. Due to local variable scope, I can't just use the wait.completed flag below.
              - service: input_boolean.turn_on
                entity_id: input_boolean.extended_away_early_return
      
        # Conditions that cause us to end the repeat sequence.
        until:        
          - condition: template
            value_template: >
              {{ is_state('input_boolean.extended_away_mode', 'off') or
                 is_state('input_boolean.nighttime', 'on') or
                 states('sun.sun') == 'above_horizon' }}
    
    # The conditions are no longer true, so turn off unneeded away lights. Normally, this is all away lights.
    # But if I returned home early, the early return toggle will be on. In this case I only want to turn off away lights
    # that are not normally on when I'm home (and make sure the normal lights are turned on).
    - if:
        - condition: state
          entity_id: input_boolean.extended_away_early_return
          state: 'off'
      
      then:
        - service: homeassistant.turn_off
          entity_id: light.away_lights
      
      else:
        - service: homeassistant.turn_on
          data:
            entity_id: "{{ normal_lights }}"
        
        - service: homeassistant.turn_off
          data:
            entity_id: "{{ group_lights_filtered_entities }}"

# Turn off extended away mode when Jon is nearing home (proximity is somewhat unreliable, so if this doesn't trigger we have a failsafe 
# below in Open House).
- alias: Turn Off Extended Away Mode
  id: 'turn_off_extended_away_mode'
  
  trigger:
    - platform: template
      value_template: "{{ states('sensor.home_jon_distance') | int(0) < 13000 }}"
      
  condition: "{{ is_state('sensor.home_jon_direction_of_travel', 'towards') }}"
  
  action:
    - service: script.turn_off_extended_away_mode

#=========================#
#     Motion Sensors      #
#=========================#

- alias: Run Studio Motion Based Light
  id: 'run_studio_motion_based_light'
  
  trace:
    stored_traces: 20

  use_blueprint:
    path: lighting/motion_light_with_fan.yaml
    input:
      motion_entity: binary_sensor.studio_motion_detector_occupancy
      light_entity: light.studio_light
      fan_entity: switch.studio_fan
      no_motion_wait_fan_off: 120
      no_motion_wait_fan_on:  420
      additional_fan_wait:    300

- alias: Run Laundry Room Motion Based Light
  id: 'run_laundry_room_motion_based_light'
  
  trace:
    stored_traces: 20

  use_blueprint:
    path: lighting/motion_light.yaml
    input:
      motion_entity: binary_sensor.laundry_room_motion_detector_occupancy
      light_target: 
        entity_id: light.laundry_room_light
      no_motion_wait: 180

- alias: Run Master Bath Motion Based Light
  id: 'run_master_bath_motion_based_light'
  
  trace:
    stored_traces: 20

  use_blueprint:
    path: lighting/motion_light_with_fan.yaml
    input:
      motion_entity: binary_sensor.master_bath_motion_detector_occupancy
      light_entity: light.master_vanity_light
      fan_entity: switch.master_bath_fan
      no_motion_wait_fan_off: 240
      no_motion_wait_fan_on:  420
      additional_fan_wait:    300
      lux_entity: sensor.downstairs_sensor_ambient_light
      min_lux_value: "{{ states('input_number.master_suite_ambient_min') | float(0) }}"

#=======================#
#     Door Sensors      #
#=======================#

# Turn lights on/off based on a door sensor.
- alias: Control Attic Light
  id: control_attic_light

  use_blueprint:
    path: lighting/sensor_light.yaml
    input:
      sensor_entity: binary_sensor.attic_door_sensor_contact
      light_target: light.attic_light
      close_toggle: input_boolean.attic_door_close_toggle

- alias: Control Upstairs Entry Light
  id: control_upstairs_entry_light

  use_blueprint:
    path: lighting/sensor_light.yaml
    input:
      sensor_entity: binary_sensor.upstairs_entry_sensor_contact
      light_target: light.hallway_light
      close_toggle: input_boolean.upstairs_entry_close_toggle

- alias: Control Master Closet Light
  id: control_master_closet_light

  use_blueprint:
    path: lighting/sensor_light.yaml
    input:
      sensor_entity: binary_sensor.master_closet_sensor_contact
      light_target: light.master_closet_light

# For lights above that use the close toggle, turn the toggle off when the light turns off. This allows a case where the user
# opens the door (light turns on) but manually turns the light off before closing the door. For example a quick trip in and out
# of the attic. We need to reset the toggle so the normal case (open/close, light still on, open/close, light now off) will work
# in the future. Note that the control automations above also have the same trigger, and test the close toggle. So we need to 
# delay turning off the toggle to prevent a race condition.
- alias: Reset Attic Door Close Toggle
  id: reset_attic_door_close_toggle
  
  triggers:
    - trigger: state
      entity_id: light.attic_light
      from: 'on'
      to: 'off'
  
  actions:
    - delay: '00:00:01'
    
    - action: input_boolean.turn_off
      target:
        entity_id: input_boolean.attic_door_close_toggle

- alias: Reset Upstairs Entry Close Toggle
  id: reset_upstairs_entry_close_toggle
  
  triggers:
    - trigger: state
      entity_id: light.hallway_light
      from: 'on'
      to: 'off'
  
  actions:
    - delay: '00:00:01'
    
    - action: input_boolean.turn_off
      target:
        entity_id: input_boolean.upstairs_entry_close_toggle

#======================#
#     Guest Lights     #
#======================#

# Turn on guest lights near sunset or in the evening when children are home.
- alias: Turn On Guest Lights Sunset
  id: 'turn_on_guest_lights_sunset'
  
  trigger:
    
    # Trigger near dusk.
    - platform: template
      value_template: >
        {% set dusk = as_timestamp(state_attr('sun.sun', 'next_dusk')) %}
        {% set now = as_timestamp(now()) %}
        {{ (dusk - now) / 60 <= 60 }}
    
    - platform: homeassistant
      event: start
  
  condition:
    - condition: state
      entity_id: binary_sensor.children_home
      state: 'on'
  
    - condition: state
      entity_id: person.jon
      state: 'home'
    
    - condition: state
      entity_id: input_boolean.nighttime
      state: 'off'
    
    - condition: template
      value_template: >
        {% set dusk = as_timestamp(state_attr('sun.sun', 'next_dusk')) %}
        {% set now = as_timestamp(now()) %}
        {{ (dusk - now) / 60 <= 60 }}
    
  action:
    - delay: 
        seconds: "{{ range(2, 15) | random }}"
    
    - service: script.set_up_children_only_bedtime_environment
      data:
        stage: 'pre'
    
    # Always turn on the downstairs bedroom light; that's home base.
    - service: light.turn_on
      entity_id: light.studio_lamp_2

# Turn off guest lights after bedtime when grandchildren are home.
- alias: Turn Off Guest Lights Bedtime
  id: 'turn_off_guest_lights_bedtime'
  
  trigger:
    - platform: time
      at: '22:30:00'
    
    - platform: homeassistant
      event: start
  
  condition:
    - condition: time
      after: '22:30:00'
    
    - "{{ states('input_select.occupied_bedrooms') in ['ChildDown', 'ChildDownPlus'] }}"
  
  action:
    - delay: 
        seconds: "{{ range(2, 15) | random }}"
    
    - service: script.set_up_children_only_bedtime_environment
      data:
        stage: 'post'

#==========================#
#     Christmas Lights     #
#==========================#

# Turn on outdoor Christmas lights. We don't need a turn off automation; they are turned off at bedtime.
- alias: Turn On Outdoor Christmas Lights
  id: 'turn_on_outdoor_christmas_lights'
  
  triggers:
    - trigger: template
      value_template: "{{ states('input_boolean.christmas_mode') == 'on' and states('input_boolean.christmas_outdoor') == 'on' and states('sun.sun') == 'below_horizon' }}"
    
  actions:
    - action: light.turn_on
      target:
        entity_id: light.christmas_outdoor

# Control all day Christmas lights on certain Christmas-y days.
# NOTE: We know Christmas mode is always active on these days, so no need to check it anywhere.
- alias: Control All Day Christmas Lights
  id: 'control_all_day_christmas_lights'
  
  triggers:
    
    # Trigger in the morning.
    - trigger: time
      at: '07:30:00'
      id: morning
    
    # Trigger at night.
    - trigger: time
      at: '22:30:00'
      id: night
    
    # Handle rebooting during either of the above times.
    - trigger: homeassistant
      event: start
      id: start
  
  conditions:
    
    # We have 2 different condition sets.
    - or:
      
      # Conditions to turn on lights. This includes Jon being home.
      - and:
        - condition: state
          entity_id: person.jon
          state: 'home'
        
        - condition: template
          value_template: "{{ trigger.id != 'night' }}"
        
        - condition: time
          after: '07:30:00'
          before: '22:29:59'
        
        - condition: state
          entity_id: binary_sensor.all_day_christmas_lights
          state: 'on'
      
      # Conditions to turn off lights. This does not include Jon being home; don't want lights to stay on past this time.
      - and:
        - condition: template
          value_template: "{{ trigger.id != 'morning' }}"
        
        - condition: time
          after: '22:30:00'
          before: '07:29:59'
        
        - condition: state
          entity_id: binary_sensor.all_day_christmas_lights
          state: 'on'
  
  actions:
    - delay: 
        seconds: "{{ range(2, 15) | random }}"
    
    - if:
        - condition: time
          after: '07:30:00'
          before: '22:29:59'
      
      # Turn on Christmas lights, and turn off the family room lamp just in case. Also, deactivate the
      # automation that controls Christmas lights, so they don't turn off based on the foyer light sensor.
      then:
        - action: automation.turn_off
          entity_id: automation.control_christmas_lights
        
        - action: script.turn_on_christmas_lights
        
        - action: light.turn_off
          target:
            entity_id: light.family_room_lamp
      
      # Turn off Christmas lights and reactivate the Christmas lights automation.
      else:
        - action: script.turn_off_christmas_lights

        - action: automation.turn_on
          entity_id: automation.control_christmas_lights

# Reset all Christmas plugs to off when Christmas mode is turned off.
- alias: Reset Christmas Plugs
  id: 'reset_christmas_plugs'
  
  triggers:
    - trigger: state
      entity_id: input_boolean.christmas_mode
      to: 'off'
  
  actions:
    - variables:
        christmas_plugs: "{{ expand(state_attr('group.christmas_plugs', 'entity_id')) | map(attribute = 'entity_id') | list }}"
    
    - repeat:
        for_each: "{{ christmas_plugs }}"
        
        sequence:
          - action: input_boolean.turn_off
            target:
              entity_id: "{{ repeat.item }}"
        
#===================================#
#     Amazon Smart Plug Control     #
#===================================#

# See the alexa_ha_plug input boolean for more details. The media_content_id defines the voice command sent
# to Alexa, and must match the corresponding voice trigger defined in the Alexa routines.
- alias: Turn On Office Bookcase Via Alexa
  id: 'turn_on_office_bookcase_via_alexa'

  trigger:
  - platform: state
    entity_id: input_boolean.alexa_ha_plug
    to: 'on'

  action:
    - service: media_player.play_media
      target:
        entity_id: media_player.family_room_echo
      data:
        media_content_id: HA Office Bookcase On
        media_content_type: routine
      metadata: {}

- alias: Turn Off Office Bookcase Via Alexa
  id: 'turn_off_office_bookcase_via_alexa'

  trigger:
  - platform: state
    entity_id: input_boolean.alexa_ha_plug
    to: 'off'

  action:
    - service: media_player.play_media
      target:
        entity_id: media_player.family_room_echo
      data:
        media_content_id: HA Office Bookcase Off
        media_content_type: routine
      metadata: {}

#===================#
#     Bath Time     #
#===================#

# Prevent the bath light turning off while taking a bath. Script by the same name kicks off the timer used here.
- alias: Stop Bath Time
  id: 'stop_bath_time'
  
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.bath_time
  
  action:
    - service: automation.turn_on
      entity_id: automation.run_studio_motion_based_light

#============================#
#     Ceiling Fan Lights     #
#============================#

# Turn off ceiling fan lights. This is triggered from scenes that turn off all/most lights.
# We can't put the fan lights in the scenes themselves, due to those lights operating in optimistic mode.
- alias: Turn Off Fan Lights
  id: turn_off_fan_lights
  
  # Trigger on a toggle that's turned on by various scenes.
  trigger:
    - platform: state
      entity_id: input_boolean.ceiling_fan_lights_off
      from: 'off'
      to: 'on'
  
  variables:
    
    # List of all ceiling fan light entities.
    fan_lights: "{{ expand(state_attr('light.ceiling_fan_lights', 'entity_id')) | map(attribute = 'entity_id') | list }}"
  
  action:
    
    - repeat:
        
        # Repeat for all ceiling fan lights.
        for_each: "{{ fan_lights }}"
        
        sequence:
          
          # Turn off the light if we think it's on.
          - if:
              - "{{ states(repeat.item) == 'on' }}"
            
            then:
              - service: light.turn_off
                target:
                  entity_id: "{{ repeat.item }}"
  
              - service: system_log.write
                data:
                  message: "Turned off {{ repeat.item }}"
                  level: info    
    
    # Reset the toggle.
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.ceiling_fan_lights_off
