#================================#
#     Testing Infrastructure     #
#================================#

# The idea here is to be able to simulate various states, events and what-not so I can test
# new automations/scripts that require things I can't force to happen. For example, I can't change a 
# normal device tracker to force a person to change from away to home. But I can create a test device tracker
# using MQTT, and use a UI button to control it. 
#
# We use virtual variables, such as the sun, during testing scenarios to avoid making frequent 
# changes to the HVAC system, garage door, or other components that shouldn't be jerked around.

#======================#
#     Testing Mode     #
#======================#

# Log the start of a scenario when testing mode is turned on.
- alias: Log Scenario Start
  id: log_scenario_start
  
  trigger:
    - platform: state
      entity_id: input_boolean.testing_mode
      from: 'off'
      to: 'on'
      
  action:
    - service: script.log_testing_simulation
      data:
        category: start
        message: "{{ states('input_text.testing_mode_scenario') }}"
    
    # Remember to backup the log tomorrow morning.
    - service: input_boolean.turn_on
      entity_id: input_boolean.backup_testing_log

# Control the global testing mode based on changing any virtual variables, as an alternative to
# manually turning it on or off.
- alias: Toggle Testing Mode
  id: toggle_testing_mode
  mode: queued
  
  trigger:
    
    # Trigger on any virtual variables changing.
    - platform: state
      entity_id:
        - input_boolean.virtual_david
        - input_boolean.virtual_maryam
        - input_boolean.virtual_mike
        - input_boolean.virtual_sarah
        - input_boolean.virtual_skylar
      to:
    
    - platform: state
      entity_id: input_select.virtual_sun_state
      to:
    
    - platform: state
      entity_id: input_number.virtual_sun_elevation
      to:
    
    - platform: state
      entity_id: input_select.virtual_sun_rising
      to:
  
  action:
    - variables:
        all_virtual_people_off: "{{ is_state('input_boolean.virtual_david', 'off') and
                                    is_state('input_boolean.virtual_maryam', 'off') and
                                    is_state('input_boolean.virtual_mike', 'off') and
                                    is_state('input_boolean.virtual_sarah', 'off') and
                                    is_state('input_boolean.virtual_skylar', 'off') }}"
        
        virtual_sun_off: "{{ is_state('input_select.virtual_sun_state', 'none') and 
                             states('input_number.virtual_sun_elevation') | float(0) == 0 and 
                             is_state('input_select.virtual_sun_rising', 'none') }}"
    
    - if:
        - "{{ all_virtual_people_off and virtual_sun_off }}"
      
      then:
        - service: input_boolean.turn_off
          entity_id: input_boolean.testing_mode
      
      else:
        - service: input_boolean.turn_on
          entity_id: input_boolean.testing_mode

#===========================#
#     Virtual Variables     #
#===========================#

# Reset virtual variables when testing mode is turned off.
- alias: Reset Virtual Variables
  id: reset_virtual_variables
  
  trigger:
    - platform: state
      entity_id: input_boolean.testing_mode
      from: 'on'
      to: 'off'
      
  action:
    - service: script.reset_virtual_variables
    
    # Log the scenario stop.
    - service: script.log_testing_simulation
      data:
        category: stop
        message: "{{ states('input_text.testing_mode_scenario') }}"

# Reset testing mode, and thus virtual variables, before sunrise or sunset, so the virtual sun doesn't interfere with real work.
# This is a failsafe in case testing mode is left on by mistake.
- alias: Reset Testing Mode Failsafe
  id: reset_testing_mode_failsafe
  
  trigger:
    - platform: template
      value_template: "{{    states('sun.sun') == 'below_horizon' and state_attr('sun.sun', 'elevation') | float(0) >= -1 
                          or states('sun.sun') == 'above_horizon' and state_attr('sun.sun', 'elevation') | float(0) <= state_attr('sensor.variables', 'variables').min_elevation | float(0) and state_attr('sun.sun', 'rising') == false }}"
    
  action:
          
    # Note that I could test if it's on first, but that doesn't mean any virtual variables are set.
    # So I could test if virtual sun variables are set, but that seems too specific for a general reset
    # process. It doesn't hurt to turn it off if it's already off.
    - service: input_boolean.turn_off
      entity_id: input_boolean.testing_mode

#=========================#
#     Device Trackers     #
#=========================#

# Toggle virtual device trackers.
- alias: Toggle Virtual Device Tracker
  id: 'toggle_virtual_device_tracker'
  mode: queued
  
  trigger:
    - platform: state
      entity_id:
        - input_boolean.virtual_david
        - input_boolean.virtual_maryam
        - input_boolean.virtual_mike
        - input_boolean.virtual_sarah
        - input_boolean.virtual_skylar
      to:
  
  action:
    - variables:
        new_state: >
          {% if trigger.to_state.state == 'on' %}
            home
          {% else %}
            not_home
          {% endif %}
        
        topic_suffix: "{{ trigger.to_state.entity_id | replace('input_boolean.', '') }}"
    
    - service: mqtt.publish
      data:
        topic: "{{ 'homeassistant/device_tracker/' ~ topic_suffix }}"
        payload: "{{ new_state }}"
