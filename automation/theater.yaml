#=======================#
#     Cinema Resume     #
#=======================#

# Make the theater dark when the Shield TV resumes.    
- alias: Resume Cinema
  id: resume_cinema
  
  trace:
    stored_traces: 20

  trigger:
    - platform: state
      entity_id: media_player.shield_tv
      from:
        - 'paused'
        - 'idle'
      to: 'playing'
      for: 00:00:02
  
  # Sanity check to prevent false triggers.
  condition:
    - condition: state
      entity_id: input_boolean.theater_open
      state: 'on'
  
  action:  
    
    # Restore theater lighting.
    - service: script.restore_lighting_on_resume

#======================#
#     Cinema Close     #
#======================#

# Close the cinema when the Harmony is powered off.   
- alias: Close Cinema
  id: close_cinema
  trigger:
    - platform: state
      entity_id: sensor.harmony_hub
      to: 'PowerOff'
  
  # Sanity check to prevent false triggers.
  condition:
    - condition: state
      entity_id: input_boolean.theater_open
      state: 'on'
  
  action:
    - service: script.close_cinema

#===================================#
#     Cinema Open/Close Control     #
#===================================#

# To prevent the projector and other components from frequent on/off cycles, the cinema can only be opened or closed
# about 10 minutes after being closed or opened. This is largely controlled by the Check Cinema Usage Control script,
# but it uses a timer to delay the actual open or close. We handle the timer expiration here.
- alias: Handle Cinema Usage Delay
  id: handle_cinema_usage_delay
  
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.cinema_usage_delay
  
  action:
    - if:
        - "{{ states('input_boolean.theater_open') == 'off' }}"
      
      then:
        - service: script.open_cinema
      
      else:
        - service: script.close_cinema

#==================================#
#     Projector Error Handling     #
#==================================#

# The projector sometimes encounters a (bogus) lamp error when powering on. We detect that here and try to
# automatically handle it.
- alias: Handle Projector Error
  id: handle_projector_error
  
  triggers:
    - trigger: event
      event_type: system_log_event
      event_data:
        name: 'custom_components.epson_projector_link.projector.projector'
        level: 'ERROR'
  
  conditions: "{{ 'Lamp ON failure' in trigger.event.data.message[0] }}"
  
  actions:
    
    - variables:
        delay_time: '00:02:30'
    
    # Indicate we're trying to handle the error. This prevents the Activate Cinema script from doing post-processing until
    # we reset the flag, which only happens if we're successful.
    - action: input_boolean.turn_on
      target:
        entity_id: input_boolean.projector_error_handling
          
    - action: script.send_notification
      data:
        destination:
          - voice_assistant
        message: "Projector lamp error detected. Please wait a few minutes while I try to fix it."
        room: ['family_room', 'theater']
        voice_type: announce
    
    # Wait a bit for the projector to turn itself off. We can't check the state to determine this because for this error
    # the state never changes from off.
    - delay: "{{ delay_time }}"
          
    - action: script.send_notification
      data:
        destination:
          - voice_assistant
        message: "I'm resetting the projector."
        room: ['family_room', 'theater']
        voice_type: tts
    
    # Set the expected powered off flag. This prevents the Check Projector Off automation from turning the plug
    # back on.
    - action: input_boolean.turn_on
      entity_id: input_boolean.projector_plug_powered_off
    
    # Turn off the power for a bit.
    - action: switch.turn_off
      entity_id: switch.projector
    
    - delay: '00:00:30'
    
    # Turn the power back on.
    - action: switch.turn_on
      entity_id: switch.projector
    
    # Reset the expected powered off flag.
    - delay: '00:00:01'
    - action: input_boolean.turn_off
      entity_id: input_boolean.projector_plug_powered_off
          
    - action: script.send_notification
      data:
        destination:
          - voice_assistant
        message: "I'm turning the projector back on. Keep your fingers crossed!"
        room: ['family_room', 'theater']
        voice_type: tts
    
    - delay: '00:00:05'
    
    # Finally, power on the projector.
    - action: remote.send_command
      entity_id: remote.harmony_hub
      data:
        command: 'PowerOn'
        device: Epson Projector
  
    # Delay for a bit to let the projector turn on.
    - wait_template: "{{ states('media_player.epson_projector') in ['warmup', 'on'] or is_state('input_boolean.projector_active', 'on') }}"
      timeout: "{{ delay_time }}"
        
    # If all is well, reset the projector error handling flag. This tells the Activate Cinema script that it's OK to perform
    # post-processing.
    - if:
        - "{{ states('media_player.epson_projector') in ['warmup', 'on'] or is_state('input_boolean.projector_active', 'on') }}"
      
      then:
        - action: input_boolean.turn_off
          target:
            entity_id: input_boolean.projector_error_handling

#=========================#
#     Projector State     #
#=========================#

# It seems we can't rely on the projector media player state - I've seen cases where the state is off but the projector is
# working fine. So here we turn a toggle on or off based on the amount of power being drawn. Just lovely.

- alias: Toggle Projector Active
  id: toggle_projector_active
  
  triggers:
    - trigger: numeric_state
      entity_id: sensor.projector_power
      above: 250
      for:
        seconds: 10
      id: 'on'
  
    - trigger: numeric_state
      entity_id: sensor.projector_power
      below: 250
      for:
        seconds: 10
      id: 'off'
  
  actions:
    
    # These are just for debugging  (they can be seen in the trace).
    - variables:
        projector_state1: "{{ states('media_player.epson_projector') }}"
        projector_error1: "{{ states('input_boolean.projector_error_handling') }}"
        projector_active1: "{{ states('input_boolean.projector_active') }}"
    
    - action: input_boolean.turn_{{ trigger.id }}
      target:
        entity_id: input_boolean.projector_active
    
    - delay: '00:00:01'
    
    # Debugging again.
    - variables:
        projector_state2: "{{ states('media_player.epson_projector') }}"
        projector_error2: "{{ states('input_boolean.projector_error_handling') }}"
        projector_active2: "{{ states('input_boolean.projector_active') }}"
    
    - action: system_log.write
      data:
        message: "{{ 'Projector active changed from ' ~ projector_active1 ~ ' to ' ~ projector_active2 }}"
        level: info

# When the cinema is activated, we need to know if the projector is functional. Sometimes it fails with a bogus error, which we try to
# fix using the Handle Projector Error automation. But that can also fail. So before doing cinema post-open processing, we need to know
# if the projector is functional. 
#
# The Activate Cinema script starts a long timer to allow time for a projector error to be fixed. Here we trigger on that timer expiration,
# which indicates failure, or on the projector being on/active, which indicates success.
- alias: Determine Projector State
  id: determine_projector_state
  
  triggers:
    - trigger: template
      value_template: "{{ (states('media_player.epson_projector') in ['warmup', 'on'] and is_state('input_boolean.projector_error_handling', 'off')) 
                          or is_state('input_boolean.projector_active', 'on') }}"
      id: success
  
    - trigger: event
      event_type: timer.finished
      event_data:
        entity_id: timer.projector_status
      id: failure
  
  actions:
    
    # Success trigger.
    - if:
        - "{{ trigger.id == 'success' }}"
      
      then:        
        
        # Cancel the projector status timer.
        - action: timer.cancel
          target:
            entity_id: timer.projector_status
        
        # Perform post-open tasks.
        - action: script.turn_on
          entity_id: script.perform_post_open_tasks
      
      # Failure trigger.
      else:
        
        # We could have a timing situation where the 2 triggers happen nearly simultaneously. In that case we want to ignore the timer
        # expiration.
        - if:
            - "{{ not (states('media_player.epson_projector') in ['warmup', 'on'] and is_state('input_boolean.projector_error_handling', 'off')) 
                          or is_state('input_boolean.projector_active', 'on') }}"
          
          then:        
            - action: script.send_notification
              data:
                destination:
                  - voice_assistant
                message: "I'm sorry, but I failed to fix a projector lamp error."
                room: ['family_room', 'theater']
                voice_type: announce

# Log the projector state for debugging.
- alias: Log Projector State
  id: log_projector_state
  
  triggers:
    - trigger: state
      entity_id: media_player.epson_projector
      to:
  
  actions:
    - action: system_log.write
      data:
        message: "{{ 'Projector state changed from ' ~ trigger.from_state.state ~ ' to ' ~ trigger.to_state.state }}"
        level: info

#==================================#
#     Automatic Volume Control     #
#==================================#

# Initialize the theater volume for Shield TV apps and other Harmony devices.
#
# NOTE: The initial volume levels are set by using the UI (App/Device card on the Theater tab on the Overview dashboard).
# Afterwards, they can be changed by using the UI, or by raising/lowering the volume for any app/device using voice control.
#
# Mapping of db levels to percentages. These are the min/max levels we support - if this ever changes, update all of the 
# volume number helpers as well, for example 'Youtube TV Volume'. Also update the generic number used by the UI:
# 'Selected App Volume'.
#
# -16 db = 64%
# -17 db = 63%
# -18 db = 62%
# -19 db = 61%
# -20 db = 60%
# -21 db = 59%
# -22 db = 58%
# -23 db = 57%
# -24 db = 56%
# -25 db = 55%
# -26 db = 54%
# -27 db = 53%
# -28 db = 52%
# -29 db = 51%
# -30 db = 50%
# -31 db = 49%
# -32 db = 48% 

# The Marantz receiver is set to turn on muted. This is because there are intermittent noise sounds at turn on.
# This automation sets the volume to a default level a short time after the receiver is powered on.
- alias: Initialize Turn On Volume
  id: initialize_turn_on_volume
  trigger:
    - platform: state
      entity_id: media_player.marantz_sr7012
      from: 'off'
      to: 'on'
  
  action:
    - delay: '00:00:30'
    - service: media_player.volume_set
      data:
        entity_id: media_player.marantz_sr7012
        volume_level: 0.60

# Initialize the volume for Shield TV applications and Harmony devices. This is triggered by UI changes to the
# 'Selected App Volume' number.
- alias: Initialize Application Volume
  id: initialize_application_volume
  
  # Trigger on the state only, not any attributes.
  trigger:
    - platform: state
      entity_id: input_number.selected_app_volume
      to:
  
  action:
    
    # Get the selected app/device volume.
    #
    # NOTE: The Shield TV app names for "plus" apps are named with a '+' for the Android Debug Bridge integration.
    # For example Disney Plus is named Disney+. But we can't use '+' in entity IDs, so the application volume number
    # entity is named input_number.disney_plus_volume. We're OK here, since the names in the UI select use 'Plus'.
    # But down the line we need to make sure to convert as needed to make sure everything works.
    - variables:
        selected_app: "{{ states('input_select.volume_application').replace(' ', '_') | lower }}"
        selected_app_volume_entity: "{{ 'input_number.' ~ selected_app ~ '_volume' }}"
    
    - service: script.set_application_volume
      data:
        volume_entity: "{{ selected_app_volume_entity }}"
        volume: "{{ trigger.to_state.state }}"

# Set the volume level for all Shield TV apps and Harmony devices.
#
# NOTES:
#   1) The Shield TV app names used here must match those defined for the Android TV Remote integration.
#   2) The Harmony activity names used here must match those defined in harmony_nnn.conf.

#   -- Shield TV Apps --   #

# Amazon Prime
- alias: Initialize Amazon Prime Volume
  id: initialize_amazon_prime_volume
  
  use_blueprint:
    path: theater/shield_app_volume.yaml
    input:
      appl_name: Amazon Prime

# AMC Plus
- alias: Initialize AMC Plus Volume
  id: initialize_amc_plus_volume
  
  use_blueprint:
    path: theater/shield_app_volume.yaml
    input:
      appl_name: AMC+

# Disney Plus
- alias: Initialize Disney Plus Volume
  id: initialize_disney_plus_volume
  
  use_blueprint:
    path: theater/shield_app_volume.yaml
    input:
      appl_name: Disney+

# ESPN
- alias: Initialize ESPN Volume
  id: initialize_espn_volume
  
  use_blueprint:
    path: theater/shield_app_volume.yaml
    input:
      appl_name: ESPN

# HBO Max
- alias: Initialize HBO Max Volume
  id: initialize_hbo_max_volume
  
  use_blueprint:
    path: theater/shield_app_volume.yaml
    input:
      appl_name: HBO Max

# Hulu
- alias: Initialize Hulu Volume
  id: initialize_hulu_volume
  
  use_blueprint:
    path: theater/shield_app_volume.yaml
    input:
      appl_name: Hulu

# Kodi
- alias: Initialize Kodi Volume
  id: initialize_kodi_volume
  
  use_blueprint:
    path: theater/shield_app_volume.yaml
    input:
      appl_name: Kodi

# Netflix
- alias: Initialize Netflix Volume
  id: initialize_netflix_volume
  
  use_blueprint:
    path: theater/shield_app_volume.yaml
    input:
      appl_name: Netflix

# Paramount Plus
- alias: Initialize Paramount Plus Volume
  id: initialize_paramount_plus_volume
  
  use_blueprint:
    path: theater/shield_app_volume.yaml
    input:
      appl_name: Paramount+

# Peacock
- alias: Initialize Peacock Volume
  id: initialize_peacock_volume
  
  use_blueprint:
    path: theater/shield_app_volume.yaml
    input:
      appl_name: Peacock

# Youtube TV
- alias: Initialize Youtube TV Volume
  id: initialize_youtube_tv_volume
  
  use_blueprint:
    path: theater/shield_app_volume.yaml
    input:
      appl_name: Youtube TV

#   -- Harmony Activities --   #

# Blu-ray Player
- alias: Initialize Bluray Volume
  id: initialize_bluray_volume
  
  use_blueprint:
    path: theater/harmony_device_volume.yaml
    input:
      device_name: BD Player

# Laserdisc Player
- alias: Initialize Laserdisc Volume
  id: initialize_laserdisc_volume
  
  use_blueprint:
    path: theater/harmony_device_volume.yaml
    input:
      device_name: LD Player
 
#=================================#
#     Kodi Feature Movie List     #
#=================================#
 
# We have an input select that represents the list of Kodi movies. This is dynamically set using the 
# Process All Kodi Movies Result script. However, when HA restarts, the input select gets restored to the yaml value
# instead of the dynamically set value. So the dynamic list is restored on HA start, by Perform Startup Chores.

# Save the feature movie name when a new movie is selected in the front end.
# This is needed to restore the selected value in the corresponding list of movies on HA restart, because on restart
# that gets restored to the single yaml value ('Select') instead of the list of movies that was dynamically set.
- alias: Save Feature Movie Name
  id: save_feature_movie_name
  
  trigger:
    - platform: state
      entity_id: input_select.kodi_movies
  
  condition:
    - condition: state
      entity_id: input_boolean.kodi_movie_list_restoration
      state: 'off'
    
    - "{{ ( trigger.to_state.state ) != ( 'Select' ) and ( trigger.to_state.state ) != ( 'unknown' ) }}"
  
  action:
    - service: system_log.write
      data:
        message: "feature movie name: '{{ trigger.to_state.state }}'"
        level: debug
    
    - service: input_text.set_value
      data_template:
        entity_id: input_text.current_feature
        value: "{{ ( trigger.to_state.state ) }}"

#==============================#
#     Kodi Process Results     #
#==============================#

# Process a result from any Kodi command call.
- alias: Process Kodi Command Result
  id: process_kodi_command_result
  
  mode: queued
  
  triggers:
    
    # Trigger on a successful GetMovies command result.    
    - trigger: event
      event_type: kodi_call_method_result
      event_data:
        result_ok: true
        input:
          method: VideoLibrary.GetMovies
      id: movies
    
    # Trigger on a successful GetMusicVideos command result.    
    - trigger: event
      event_type: kodi_call_method_result
      event_data:
        result_ok: true
        input:
          method: VideoLibrary.GetMusicVideos
      id: videos
    
    # Trigger on a successful GetMovieSets command result.
    # NOTE: This is only used by the Activate Kodi script to wait until Kodi accepts and responds to commands.
    - trigger: event
      event_type: kodi_call_method_result
      event_data:
        result_ok: true
        input:
          method: VideoLibrary.GetMovieSets
      id: sets
    
    # Trigger on an unsuccessful command result.    
    - trigger: event
      event_type: kodi_call_method_result
      event_data:
        result_ok: false
      id: bad
  
  actions:
    
    # Process the triggered event.
    - choose:
      
      # Successful GetMovies result.
      - conditions: "{{ trigger.id == 'movies' }}"
        
        sequence:
          
          # Process the type of GetMovies command.
          - choose:
            
            # Single movie (from Play Feature Movie script).
            - conditions: "{{ trigger.event.data.result.limits.total == 1 }}"
            
              sequence:
                - action: script.process_single_kodi_movie_result
                  data:
                    result: "{{ trigger.event.data.result }}"
            
            # All movies (from Get All Kodi Movies script).
            - conditions: "{{ trigger.event.data.result.limits.total > 1 }}"
            
              sequence:
                - action: script.process_all_kodi_movies_result
                  data:
                    result: "{{ trigger.event.data.result }}"
            
            # This should not happen.
            default:
              - action: system_log.write
                data:
                  message: "Kodi GetMovies command returned 0 results."
                  level: warning
      
      # Successful GetVideos result.
      - conditions: "{{ trigger.id == 'videos' }}"
        
        sequence:
          - action: script.process_kodi_videos_result
            data:
              result: "{{ trigger.event.data.result }}"
      
      # Successful GetMovieSets result.
      - conditions: "{{ trigger.id == 'sets' }}"
        
        sequence:
          - action: input_boolean.turn_on
            target:
              entity_id: input_boolean.kodi_activated
      
      # Unsuccessful result.
      default:
        - action: system_log.write
          data:
            message: "Kodi {{ trigger.event.data.input.method }} call failed."
            level: warning

# Catch an error resulting from a GetMusicVideos Kodi call. I'm assuming this is a timing issue, but hate guessing
# at delay times as a solution. So if we get a selected error set a toggle (the toggle is always reset before issuing
# the GetMusicVideos call to Kodi). The toggle is checked in the Get All Kodi Videos script, which then results in a
# retry of the Kodi call. Fingers crossed.
- alias: Handle Kodi Video Call Error
  id: handle_kodi_video_call_error
  
  triggers:
    - trigger: event
      event_type: system_log_event
      event_data:
        name: 'homeassistant.components.kodi.media_player'
        level: 'WARNING'
  
  # These are the errors that have been seen to occur.
  conditions:
    - "{{ 'TransportError trying to run API method media_player.kodi.VideoLibrary.GetMusicVideos' in trigger.event.data.message[0] }}"
  
  actions:
    - action: input_boolean.turn_on
      data:
        entity_id: input_boolean.kodi_video_call_error
