#=======================#
#     Cinema Resume     #
#=======================#

# Make the theater dark when the Shield TV resumes.    
- alias: Resume Cinema
  id: resume_cinema
  
  trace:
    stored_traces: 20

  trigger:
    - platform: state
      entity_id: media_player.shield_tv
      from:
        - 'paused'
        - 'standby'
      to: 'playing'
      for: 00:00:02
  
  action:  
    
    # Restore theater lighting.
    - service: script.restore_lighting_on_resume

#======================#
#     Cinema Close     #
#======================#

# Close the cinema when the Harmony is powered off.   
- alias: Close Cinema
  id: close_cinema
  trigger:
    - platform: state
      entity_id: remote.harmony_hub
      attribute: current_activity
      to:
        - 'power_off'
        - 'PowerOff'
  
  # Sanity check to prevent false triggers, which can happen if the network is twitchy.
  condition:
    - condition: state
      entity_id: input_boolean.theater_open
      state: 'on'
  
  action:
    - service: script.close_cinema 

#==================================#
#     Automatic Volume Control     #
#==================================#

# Initialize the theater volume for Shield TV apps and other input devices.
#
# NOTE: The volume levels in the map below must be coordinated with the *_volume blueprints.
#
# Mapping of db levels to percentages:
#
# -16 db = 64%
# -17 db = 63%
# -18 db = 62%
# -19 db = 61%
# -20 db = 60%
# -21 db = 59%
# -22 db = 58%
# -23 db = 57%
# -24 db = 56%
# -25 db = 55%
# -26 db = 54%
# -27 db = 53%
# -28 db = 52%
# -29 db = 51%
# -30 db = 50%
# -31 db = 49%
# -32 db = 48% 

# The Marantz receiver is set to turn on muted. This is because there are intermittent noise sounds at turn on.
# This automation sets the volume to a default level a short time after the receiver is powered on.
- alias: Initialize Turn On Volume
  id: initialize_turn_on_volume
  trigger:
    - platform: state
      entity_id: media_player.marantz_sr7012
      from: 'off'
      to: 'on'
  
  action:
    - delay: '00:00:30'
    - service: media_player.volume_set
      data:
        entity_id: media_player.marantz_sr7012
        volume_level: 0.60

# NOTES:
#   1) The Shield TV app names used here must match those defined for the androidtv integration.
#   2) The Harmony activity names used here must match those defined in harmony_nnn.conf.

#   -- Shield TV Apps --   #

# Amazon Prime
- alias: Initialize Amazon Prime Volume
  id: initialize_amazon_prime_volume
  use_blueprint:
    path: theater/shield_app_volume.yaml
    input:
      appl_name: Amazon Prime
      volume: 0.58

# Disney Plus
- alias: Initialize Disney Plus Volume
  id: initialize_disney_plus_volume
  use_blueprint:
    path: theater/shield_app_volume.yaml
    input:
      appl_name: Disney+
      volume: 0.64

# ESPN
- alias: Initialize ESPN Volume
  id: initialize_espn_volume
  use_blueprint:
    path: theater/shield_app_volume.yaml
    input:
      appl_name: ESPN
      volume: 0.57

# HBO Max
- alias: Initialize HBO Max Volume
  id: initialize_hbo_max_volume
  use_blueprint:
    path: theater/shield_app_volume.yaml
    input:
      appl_name: HBO Max
      volume: 0.62

# Hulu
- alias: Initialize Hulu Volume
  id: initialize_hulu_volume
  use_blueprint:
    path: theater/shield_app_volume.yaml
    input:
      appl_name: Hulu
      volume: 0.62

# Kodi
- alias: Initialize Kodi Volume
  id: initialize_kodi_volume
  use_blueprint:
    path: theater/shield_app_volume.yaml
    input:
      appl_name: Kodi
      volume: 0.63

# Netflix
- alias: Initialize Netflix Volume
  id: initialize_netflix_volume
  use_blueprint:
    path: theater/shield_app_volume.yaml
    input:
      appl_name: Netflix
      volume: 0.62

# Paramount Plus
- alias: Initialize Paramount Plus Volume
  id: initialize_paramount_plus_volume
  use_blueprint:
    path: theater/shield_app_volume.yaml
    input:
      appl_name: Paramount+
      volume: 0.61

# Peacock
- alias: Initialize Peacock Volume
  id: initialize_peacock_volume
  use_blueprint:
    path: theater/shield_app_volume.yaml
    input:
      appl_name: Peacock
      volume: 0.62

# Youtube TV
- alias: Initialize Youtube TV Volume
  id: initialize_youtube_tv_volume
  use_blueprint:
    path: theater/shield_app_volume.yaml
    input:
      appl_name: Youtube TV
      volume: 0.62

#   -- Harmony Activities --   #

# Blu-ray Player
- alias: Initialize Bluray Volume
  id: initialize_bluray_volume
  use_blueprint:
    path: theater/harmony_device_volume.yaml
    input:
      device_name: BD Player
      volume: 0.63

# Laserdisc Player
- alias: Initialize Laserdisc Volume
  id: initialize_laserdisc_volume
  use_blueprint:
    path: theater/harmony_device_volume.yaml
    input:
      device_name: LD Player
      volume: 0.63
 
#============================#
#     Kodi Movie Control     #
#============================#
 
# We have an input select that represents the list of Kodi movies. This is dynamically set using the 
# get_all_kodi_movies script. However, when HA restarts, the input select gets restored to the yaml value
# instead of the dynamically set value. So this automation restores the dynamic list on HA start.
#
# The actual list should exist in a file that was saved at get_all_kodi_movies time, and the feature
# movie name (input select state value) exists in input_text.current_feature.
- alias: Restore Movie List On Start
  id: restore_movie_list_on_start
  trigger:
    - platform: homeassistant
      event: start
  action:
    - delay: 
        seconds: "{{ range(2, 15) | random }}"
    
    # Turn on a flag to prevent any other automations or scripts mucking with the feature movie name until
    # restoration is complete.
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.kodi_movie_list_restoration
    
    # Call a pyscript module to restore the movie list.
    - service: pyscript.restore_all_movies
      data:
        entity: input_select.kodi_movies
    
    # Wait until the list is restored (state not equal to the static yaml value).
    - wait_template: "{{ not is_state('input_select.kodi_movies', 'Select') }}"
      timeout: '00:00:10'
    
    # Set the current feature movie as the selected option in the list.
    - service: input_select.select_option
      data:
        entity_id: input_select.kodi_movies
        option: "{{ states('input_text.current_feature') }}"
    
    # Turn off the restoration flag.
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.kodi_movie_list_restoration

# Save the feature movie name when a new movie is selected in the front end.
# This is needed to restore the selected value in the corresponding list of movies on HA restart, because on restart
# that gets restored to the single yaml value ('Select') instead of the list of movies that was dynamically set.
- alias: Save Feature Movie Name
  id: save_feature_movie_name
  
  trigger:
    - platform: state
      entity_id: input_select.kodi_movies
  
  condition:
    - condition: state
      entity_id: input_boolean.kodi_movie_list_restoration
      state: 'off'
    
    - "{{ ( trigger.to_state.state ) != ( 'Select' ) and ( trigger.to_state.state ) != ( 'unknown' ) }}"
  
  action:
    - service: system_log.write
      data:
        message: "feature movie name: '{{ trigger.to_state.state }}'"
        level: debug
    
    - service: input_text.set_value
      data_template:
        entity_id: input_text.current_feature
        value: "{{ ( trigger.to_state.state ) }}"

#===================================#
#     Shield Application Change     #
#===================================#

# Handle various things that are required when the Shield application changes.
- alias: Handle Shield Application Change
  id: handle_shield_application_change
  
  # Trigger on the Shield application name changing.
  trigger:
    - platform: state
      entity_id: media_player.shield_tv
      attribute: app_name
  
  action:
    
    # Paramount Plus cannot function if Adguard protection is turned on.
    - if:
      
        # Turn off Adguard if the application is Paramount.
        - "{{ is_state_attr('media_player.shield_tv', 'app_name', 'Paramount+') }}"
      
      then:
        - service: script.turn_off_adguard
      
      # Turn on Adguard for all other applications. Note that it's also turned on when the cinema
      # is closed, in case Paramount was the last application used.
      else:
        - service: script.turn_on_adguard  
    
    # The Kodi media player needs to be turned off if we're changing from Kodi to something else.
    - if:
      
        # Kill the Kodi app if needed, else do nothing.
        - "{{ trigger.from_state and trigger.from_state.attributes.app_name == 'Kodi' }}"
        
      then:
        - service: media_player.turn_off
          data:
            entity_id: media_player.kodi
