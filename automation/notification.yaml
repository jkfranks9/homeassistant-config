#===================================#
#     Maintenance Notifications     #
#===================================#

# Projector lamp is getting old.
- alias: Notify Projector Lamp Aging
  id: 'notify_projector_lamp_aging'
  
  use_blueprint:
    path: notification/maint_above_notify.yaml
    input:
      sensor_entity: sensor.epson_lamp_hours
      threshold: 1999
      timer_entity: timer.projector_lamp_notification
      message: 'Epson projector lamp might need replacing soon.'
      persistent: true
      tag: 'projector_lamp'

# Clear persistent notification.
- alias: Clear Projector Lamp Notification
  id: 'clear_projector_lamp_notification'
  
  trigger:
    - platform: numeric_state
      entity_id: sensor.epson_lamp_hours
      below: 1999
  
  condition: "{{ trigger.from_state.state not in ['unknown', 'unavailable'] }}"
  
  action:
    - service: notify.mobile_app_jon_galaxy
      data:
        message: 'clear_notification'
        data:
          tag: 'projector_lamp'

# Printer toner is getting low.
- alias: Notify Printer Toner Low
  id: 'notify_printer_toner_low'
  
  use_blueprint:
    path: notification/maint_below_notify.yaml
    input:
      sensor_entity: sensor.brother_printer_black_toner_remaining
      threshold: 10
      timer_entity: timer.printer_toner_notification
      message: 'Printer toner might need replacing soon.'
      persistent: true
      tag: 'printer_toner'

# Clear persistent notification.
- alias: Clear Printer Toner Notification
  id: 'clear_printer_toner_notification'
  
  trigger:
    - platform: numeric_state
      entity_id: sensor.brother_printer_black_toner_remaining
      above: 10
  
  condition: "{{ trigger.from_state.state not in ['unknown', 'unavailable'] }}"
  
  action:
    - service: notify.mobile_app_jon_galaxy
      data:
        message: 'clear_notification'
        data:
          tag: 'printer_toner'

# Pool needs chlorine tabs.
- alias: Notify Pool Needs Chlorine
  id: 'notify_pool_needs_chlorine'
  
  # Trigger if the high/low temperatures in the next 3 days forecast are below 55 degrees. Below this the salt
  # generator stops producing chlorine, so we need to add tabs.
  #
  # Note that the template below is tricky. The idea is to skip the first day of the forecast, because that's today.
  # Then bump the count if both temps are below the minimum for the next 3 days. However, due to Jinja scoping rules, 
  # a simple scalar value for the count doesn't work. So we start with an empty array, then add items to the array 
  # for each day that has low temps. Finally, compare the number of items in the array. Kludge alert!
  trigger:
    - platform: template
      value_template: >
        {% set forecast = state_attr('weather.openweathermap', 'forecast') %}
        {% set num_cold_days = namespace(count = []) %}
        {% if forecast != None %}
        
          {% for fc in forecast %}
            {% if loop.index0 > 0 and loop.index0 < 4 %}
              {% if fc.temperature < 55 and fc.templow < 55 %}
                {% set num_cold_days.count = num_cold_days.count + [1] %}
              {% endif %}
            {% endif %}            
          {% endfor %}
        {% endif %}
        
        {{ (num_cold_days.count) | length == 3 }}
  
  action:    
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Action required:'
        message: 'Pool might need chlorine tablets.'
        channel: standard
        throttled: true
        timer_entity: timer.pool_chlorine_notification
        tag: 'pool_chlorine'
        timeout: 0

# F150 service is due.
- alias: Notify F150 Service Due
  id: 'notify_f150_service_due'
  
  use_blueprint:
    path: notification/maint_above_notify.yaml
    input:
      sensor_entity: input_number.f150_mileage
      threshold: input_number.f150_service_due
      timer_entity: timer.f150_service_notification
      message: 'F150 service is due.'
      persistent: true
      tag: 'f150_service'

# Clear persistent notification.
- alias: Clear F150 Service Notification
  id: 'clear_f150_service_notification'
  
  trigger:
    - platform: numeric_state
      entity_id: input_number.f150_service_due
      above: input_number.f150_mileage
  
  action:
    - service: notify.mobile_app_jon_galaxy
      data:
        message: 'clear_notification'
        data:
          tag: 'f150_service'

# Treadmill lubrication is due.
- alias: Notify Treadmill Lube Due
  id: 'notify_treadmill_lube_due'
  
  use_blueprint:
    path: notification/maint_above_notify.yaml
    input:
      sensor_entity: sensor.treadmill_current_hours
      threshold: input_number.treadmill_lube_due
      timer_entity: timer.treadmill_lube_notification
      message: 'Treadmill lubrication is due.'
      persistent: true
      tag: 'treadmill_lube'

# Clear persistent notification.
- alias: Clear Treadmill Lube Notification
  id: 'clear_treadmill_lube_notification'
  
  trigger:
    - platform: numeric_state
      entity_id: input_number.treadmill_lube_due
      above: sensor.treadmill_current_hours
  
  action:
    - service: notify.mobile_app_jon_galaxy
      data:
        message: 'clear_notification'
        data:
          tag: 'treadmill_lube'

#==========================================#
#     Abnormal Condition Notifications     #
#==========================================#

# Vacuum did not run.
- alias: Notify Vacuum Lazy
  id: 'notify_vacuum_lazy'
  
  trigger:
    - platform: time
      at: '07:00:00'
  
  condition:
    - condition: time
      weekday:
        - mon
  
  action:
    - condition: state
      entity_id: input_boolean.vacuum_kicked_off
      state: 'off'
    
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Action required:'
        message: 'Vacuum did not run on time.'
        channel: standard
        throttled: false
        tag: 'vacuum_lazy'
        timeout: 0

# Vacuum probably stuck.
- alias: Notify Vacuum Stuck
  id: 'notify_vacuum_stuck'
  
  trigger:
    - platform: time
      at: '07:01:00'
  
  condition:
    - condition: time
      weekday:
        - mon
  
  action:
    - condition: numeric_state
      entity_id: sensor.ecovacs_battery
      below: 90
    
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Action required:'
        message: 'Vacuum appears to be stuck (or not charging).'
        channel: standard
        throttled: false
        tag: 'vacuum_stuck'
        timeout: 0

# Vacuum needs maintenance.
- alias: Notify Vacuum Needs Maintenance
  id: 'notify_vacuum_needs_maintenance'
  
  trigger:
    - platform: event
      event_type: system_log_event
      event_data:
        name: 'sleekxmppfs.basexmpp'
        level: 'ERROR'
  
  condition: "{{ 'error' in trigger.event.data.message }}"
  
  action:    
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Action required:'
        message: 'Vacuum needs maintenance.'
        channel: standard
        throttled: false
        tag: 'vacuum_maintenance'
        timeout: 0

#===============================#
#     Battery Notifications     #
#===============================#

# Phone battery is too low.
- alias: Notify Phone Battery Low
  id: 'notify_phone_battery_low'
  
  use_blueprint:
    path: notification/maint_below_notify.yaml
    input:
      sensor_entity: sensor.jon_galaxy_battery_level
      threshold: 15
      timer_entity: timer.phone_battery_notification
      message: 'Phone needs recharging.'
      persistent: true
      tag: 'phone_battery'

# Clear persistent notification.
- alias: Clear Phone Battery Notification
  id: 'clear_phone_battery_notification'
  
  trigger:
    - platform: numeric_state
      entity_id: sensor.jon_galaxy_battery_level
      above: 50
  
  action:
    - service: notify.mobile_app_jon_galaxy
      data:
        message: 'clear_notification'
        data:
          tag: 'phone_battery'

# Tablet battery is too low.
- alias: Notify Tablet Battery Low
  id: 'notify_tablet_battery_low'
  
  use_blueprint:
    path: notification/maint_below_notify.yaml
    input:
      sensor_entity: sensor.lenovo_tablet_battery_level
      threshold: 15
      timer_entity: timer.tablet_battery_notification
      message: 'Tablet needs recharging.'
      persistent: true
      tag: 'tablet_battery'

# Clear persistent notification.
- alias: Clear Tablet Battery Notification
  id: 'clear_tablet_battery_notification'
  
  trigger:
    - platform: numeric_state
      entity_id: sensor.lenovo_tablet_battery_level
      above: 50
  
  action:
    - service: notify.mobile_app_jon_galaxy
      data:
        message: 'clear_notification'
        data:
          tag: 'tablet_battery'

# Studio motion detector battery is too low.
- alias: Notify Studio Motion Battery Low
  id: 'notify_studio_motion_battery_low'
  
  use_blueprint:
    path: notification/maint_binary_notify.yaml
    input:
      sensor_entity: binary_sensor.studio_motion_detector_battery_low
      timer_entity: timer.studio_motion_detector_battery_notification
      message: 'Studio motion detector battery needs replacing.'
      persistent: true
      tag: 'studio_motion_battery'

# Clear persistent notification.
- alias: Clear Studio Motion Battery Notification
  id: 'clear_studio_motion_battery_notification'
  
  trigger:
    - platform: state
      entity_id: binary_sensor.studio_motion_detector_battery_low
      from: 'on'
      to: 'off'
  
  action:
    - service: notify.mobile_app_jon_galaxy
      data:
        message: 'clear_notification'
        data:
          tag: 'studio_motion_battery'

# Laundry room motion detector battery is too low.
- alias: Notify Laundry Room Motion Battery Low
  id: 'notify_laundry_room_motion_battery_low'
  
  use_blueprint:
    path: notification/maint_binary_notify.yaml
    input:
      sensor_entity: binary_sensor.laundry_room_motion_detector_battery_low
      timer_entity: timer.laundry_room_motion_detector_battery_notification
      message: 'Laundry room motion detector battery needs replacing.'
      persistent: true
      tag: 'laundry_room_motion_battery'

# Clear persistent notification.
- alias: Clear Laundry Room Motion Battery Notification
  id: 'clear_laundry_room_motion_battery_notification'
  
  trigger:
    - platform: state
      entity_id: binary_sensor.laundry_room_motion_detector_battery_low
      from: 'on'
      to: 'off'
  
  action:
    - service: notify.mobile_app_jon_galaxy
      data:
        message: 'clear_notification'
        data:
          tag: 'laundry_room_motion_battery'

# Master bath motion detector battery is too low.
- alias: Notify Master Bath Motion Battery Low
  id: 'notify_master_bath_motion_battery_low'
  
  use_blueprint:
    path: notification/maint_binary_notify.yaml
    input:
      sensor_entity: binary_sensor.master_bath_motion_detector_battery_low
      timer_entity: timer.master_bath_motion_detector_battery_notification
      message: 'Master bath motion detector battery needs replacing.'
      persistent: true
      tag: 'master_bath_motion_battery'

# Clear persistent notification.
- alias: Clear Master Bath Motion Battery Notification
  id: 'clear_master_bath_motion_battery_notification'
  
  trigger:
    - platform: state
      entity_id: binary_sensor.master_bath_motion_detector_battery_low
      from: 'on'
      to: 'off'
  
  action:
    - service: notify.mobile_app_jon_galaxy
      data:
        message: 'clear_notification'
        data:
          tag: 'master_bath_motion_battery'

# Back door sensor battery is too low.
- alias: Notify Back Door Sensor Battery Low
  id: 'notify_back_door_sensor_battery_low'
  
  use_blueprint:
    path: notification/maint_below_notify.yaml
    input:
      sensor_entity: sensor.back_door_sensor_battery
      threshold: 15
      timer_entity: timer.back_door_sensor_battery_notification
      message: 'Back door sensor battery needs replacing.'
      persistent: false
      tag: 'back_door_sensor_battery'

# Guest BR window sensor battery is too low.
- alias: Notify Guest BR Window Sensor Battery Low
  id: 'notify_guest_br_window_sensor_battery_low'
  
  use_blueprint:
    path: notification/maint_below_notify.yaml
    input:
      sensor_entity: sensor.guest_br_window_sensor_battery
      threshold: 15
      timer_entity: timer.guest_br_window_sensor_battery_notification
      message: 'Guest BR window sensor battery needs replacing.'
      persistent: false
      tag: 'guest_br_window_sensor_battery'

# Porch battery powered sensor needs recharging.
- alias: Notify Porch Sensor Battery Low
  id: 'notify_porch_sensor_battery_low'
  
  use_blueprint:
    path: notification/maint_below_notify.yaml
    input:
      sensor_entity: sensor.porch_battery_level
      threshold: 20.0
      timer_entity: timer.porch_battery_low_notification
      message: 'Porch sensor battery needs recharging.'
      persistent: true
      tag: 'porch_battery_low'

# Clear persistent notification.
- alias: Clear Porch Sensor Low Notification
  id: 'clear_porch_sensor_low_notification'
  
  trigger:
    - platform: numeric_state
      entity_id: sensor.porch_battery_level
      above: 95
  
  action:
    - service: notify.mobile_app_jon_galaxy
      data:
        message: 'clear_notification'
        data:
          tag: 'porch_battery_low'

# Porch sensor battery is probably dead.
- alias: Notify Porch Sensor Battery Dead
  id: notify_porch_sensor_battery_dead
  
  trigger:
    
    # Check if the porch temperature has not been changed for a while, or the value differs significantly from the OpenWeatherMap value.
    # Ensure the OpenWeatherMap value is valid ... if it's unknown or unavailable it should get set to 0 in the first assignment in the template below.
    - platform: template
      value_template: >
        {% set owm_temp = states('sensor.openweathermap_temperature') | int(0) %}
        {% set porch_temp = states('sensor.porch_temperature') | int(0) %}
        {% set diff = 10 | int(0) %}
        {{ owm_temp > 0 and (now() - states.sensor.porch_temperature.last_changed >= timedelta(hours = 1) or porch_temp < (owm_temp - diff) or porch_temp > (owm_temp + diff)) }}
  
  action:
    - service: system_log.write
      data:
        message: "{{ 'OWM temp ' ~ states('sensor.openweathermap_temperature') ~ ', porch temp ' ~ states('sensor.porch_temperature') ~ ', last changed ' ~ as_local(states.sensor.porch_temperature.last_changed) }}"
        level: info
    
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Action required:'
        message: 'Porch sensor battery appears to be dead.'
        channel: persistent
        throttled: true
        timer_entity: timer.porch_battery_dead_notification
        tag: 'porch_battery_dead'
        timeout: 0

# Clear persistent notification.
- alias: Clear Porch Sensor Dead Notification
  id: 'clear_porch_sensor_dead_notification'
  
  trigger:
    - platform: numeric_state
      entity_id: sensor.porch_battery_level
      above: 95
  
  action:
    - service: notify.mobile_app_jon_galaxy
      data:
        message: 'clear_notification'
        data:
          tag: 'porch_battery_dead'

# Master BR Vent 1 batteries are too low.
- alias: Notify Master BR Vent 1 Batteries Low
  id: 'notify_master_br_vent_1_batteries_low'
  
  use_blueprint:
    path: notification/maint_below_notify.yaml
    input:
      sensor_entity: sensor.master_br_vent_1_battery
      threshold: 26
      timer_entity: timer.master_br_vent_1_battery_notification
      message: 'Master BR vent 1 batteries need replacing.'
      persistent: false
      tag: 'master_br_vent_1_battery'

# Master BR Vent 2 batteries are too low.
- alias: Notify Master BR Vent 2 Batteries Low
  id: 'notify_master_br_vent_2_batteries_low'
  
  use_blueprint:
    path: notification/maint_below_notify.yaml
    input:
      sensor_entity: sensor.master_br_vent_2_battery
      threshold: 26
      timer_entity: timer.master_br_vent_2_battery_notification
      message: 'Master BR vent 2 batteries need replacing.'
      persistent: false
      tag: 'master_br_vent_2_battery'

#===============================#
#     Health Notifications      #
#===============================#

# Send a notification for overdue exercise.
- alias: Notify Exercise Due
  id: 'notify_exercise_due'
  
  # Trigger every day in the morning.
  trigger:
    - platform: time
      at: '08:00:00'
  
  # Continue if no exercise types were performed within the last 3 days (72 hours).
  # NOTE: We assume an invalid last changed sensor means that type hasn't been performed.
  condition:
    - condition: template
      value_template: >
        {% set val = namespace(overdue = 0) %}
        {% for type in ['treadmill', 'workout', 'yard_work', 'steps'] %}
          {% set changed = states('sensor.' ~ type ~ '_last_changed') %}
          {% if changed not in ['unknown', 'unavailable'] %}
            {% set delta = now() - strptime(changed, '%Y-%m-%dT%H:%M:%S%z', now()) %}
            {% set hours = (((delta.days * 86400) + delta.seconds) / 3600) | round(0) %}
            {% if hours > 72 %}
              {% set val.overdue = val.overdue + 1 %}
            {% endif %}
          {% else %}
            {% set val.overdue = val.overdue + 1 %}
          {% endif %}
        {% endfor %}
        
        {{ val.overdue >= 4 }}
  
  action:    
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Attention:'
        message: 'Exercise is overdue.'
        channel: standard
        throttled: true
        timer_entity: timer.exercise_overdue_notification
        tag: 'exercise_overdue'
        timeout: 0

#=================================#
#     Proximity Notifications     #
#=================================#

- alias: Notify Jon Arriving Soon
  id: 'notify_jon_arriving_soon'
  use_blueprint:
    path: notification/proximity_notify.yaml
    input:
      proximity_entity: sensor.home_jon_distance
      proximity_meters: 12000
      person_name: Jon

- alias: Notify Mike Arriving Soon
  id: 'notify_mike_arriving_soon'
  use_blueprint:
    path: notification/proximity_notify.yaml
    input:
      proximity_entity: sensor.home_mike_distance
      proximity_meters: 12000
      person_name: Mike

- alias: Notify Sarah Arriving Soon
  id: 'notify_sarah_arriving_soon'
  use_blueprint:
    path: notification/proximity_notify.yaml
    input:
      proximity_entity: sensor.home_sarah_distance
      proximity_meters: 12000
      person_name: Sarah

#==========================#
#     Software Updates     #
#==========================#

# HACS update
- alias: Notify HACS Updated
  id: 'notify_hacs_updated'
  
  trigger:
    - platform: state
      entity_id: sensor.hacs
  
  condition:
    - condition: numeric_state
      entity_id: sensor.hacs
      above: 0
  
  action:
    - service: script.send_notification
      data:
        destination:
          - persistent
        title: 'HACS Updated'
        notification_id: 'hacs_update'
        message: |
          {% set num = states('sensor.hacs') %}
          Updates available for {{ num }} HACS repo{% if num | int(0) > 1 %}s{% endif %}:{{"\n"}}
          {% for repo in states.sensor.hacs.attributes.repositories %}{{ repo.name }} ({{ repo.installed_version }} -> {{ repo.available_version }})
          {% endfor %}

#===============================#
#     Maintenance Reminders     #
#===============================#

# CPAP maintenance
- alias: Notify CPAP Reminder
  id: 'notify_cpap_reminder'
  
  use_blueprint:
    path: notification/reminder_notify.yaml
    input:
      trigger_time: '06:00:00'
      date_entities: [
                      'input_datetime.reminder_cpap_filter', 
                      'input_datetime.reminder_cpap_humidifier', 
                      'input_datetime.reminder_cpap_hose', 
                      'input_datetime.reminder_cpap_mask'
                     ]
      message_prefix: CPAP maintenance due      
      tag_prefix: cpap_maintenance_
      category_uppercase: true

# Clear persistent notification.
- alias: Clear CPAP Reminder Notification
  id: 'clear_cpap_reminder_notification'
  
  use_blueprint:
    path: notification/reminder_notify_clear.yaml
    input:
      date_entities: [
                      'input_datetime.reminder_cpap_filter', 
                      'input_datetime.reminder_cpap_humidifier', 
                      'input_datetime.reminder_cpap_hose', 
                      'input_datetime.reminder_cpap_mask'
                     ]
      tag_prefix: cpap_maintenance_

# HVAC maintenance
- alias: Notify HVAC Reminder
  id: 'notify_hvac_reminder'
  
  use_blueprint:
    path: notification/reminder_notify.yaml
    input:
      trigger_time: '06:01:00'
      date_entities: [
                      'input_datetime.reminder_hvac_downstairs', 
                      'input_datetime.reminder_hvac_upstairs'
                     ]
      message_prefix: HVAC maintenance due      
      tag_prefix: hvac_maintenance_
      category_uppercase: true

# Clear persistent notification.
- alias: Clear HVAC Reminder Notification
  id: 'clear_hvac_reminder_notification'
  
  use_blueprint:
    path: notification/reminder_notify_clear.yaml
    input:
      date_entities: [
                      'input_datetime.reminder_hvac_downstairs', 
                      'input_datetime.reminder_hvac_upstairs'
                     ]
      tag_prefix: hvac_maintenance_

# Miscellaneous maintenance
- alias: Notify Miscellaneous Reminder
  id: 'notify_miscellaneous_reminder'
  
  use_blueprint:
    path: notification/reminder_notify.yaml
    input:
      trigger_time: '06:02:00'
      date_entities: [
                      'input_datetime.reminder_misc_smokedetectors', 
                      'input_datetime.reminder_misc_9vbatteries',
                      'input_datetime.reminder_misc_cleanfridge',
                      'input_datetime.reminder_misc_cleanoven',
                      'input_datetime.reminder_misc_cleanmicrowavefilter',
                      'input_datetime.reminder_misc_cleandishwasher',
                      'input_datetime.reminder_misc_cleanhvacregs',
                      'input_datetime.reminder_misc_rechargeclipper',
                      'input_datetime.reminder_misc_lubegaragedoors',
                      'input_datetime.reminder_misc_britafilter'
                     ]
      message_prefix: Misc maintenance due      
      tag_prefix: misc_maintenance_
      category_uppercase: false

# Clear persistent notification.
- alias: Clear Miscellaneous Reminder Notification
  id: 'clear_miscellaneous_reminder_notification'
  
  use_blueprint:
    path: notification/reminder_notify_clear.yaml
    input:
      date_entities: [
                      'input_datetime.reminder_misc_smokedetectors', 
                      'input_datetime.reminder_misc_9vbatteries',
                      'input_datetime.reminder_misc_cleanfridge',
                      'input_datetime.reminder_misc_cleanoven',
                      'input_datetime.reminder_misc_cleanmicrowavefilter',
                      'input_datetime.reminder_misc_cleandishwasher',
                      'input_datetime.reminder_misc_cleanhvacregs',
                      'input_datetime.reminder_misc_rechargeclipper',
                      'input_datetime.reminder_misc_lubegaragedoors',
                      'input_datetime.reminder_misc_britafilter'
                     ]
      tag_prefix: misc_maintenance_

#==========================#
#     Office Reminders     #
#==========================#

# Payment due
- alias: Notify Payment Due Reminder
  id: 'notify_payment_due_reminder'
  
  use_blueprint:
    path: notification/reminder_notify.yaml
    input:
      trigger_time: '06:03:00'
      date_entities: [
                      'input_datetime.reminder_payment_amazon', 
                      'input_datetime.reminder_payment_creditunion', 
                      'input_datetime.reminder_payment_disney',
                      'input_datetime.reminder_payment_johndeere',
                      'input_datetime.reminder_payment_mortgage', 
                      'input_datetime.reminder_payment_randolph', 
                      'input_datetime.reminder_payment_wellsfargo'
                     ]
      message_prefix: Payment due
      tag_prefix: payment_due_
      category_uppercase: false

# Clear persistent notification.
- alias: Clear Payment Reminder Notification
  id: 'clear_payment_reminder_notification'
  
  use_blueprint:
    path: notification/reminder_notify_clear.yaml
    input:
      date_entities: [
                      'input_datetime.reminder_payment_amazon', 
                      'input_datetime.reminder_payment_creditunion', 
                      'input_datetime.reminder_payment_disney',
                      'input_datetime.reminder_payment_johndeere',
                      'input_datetime.reminder_payment_mortgage', 
                      'input_datetime.reminder_payment_randolph', 
                      'input_datetime.reminder_payment_wellsfargo'
                     ]
      tag_prefix: payment_due_

# Medication reorder
- alias: Notify Medication Reorder Reminder
  id: 'notify_medication_reorder_reminder'
  
  use_blueprint:
    path: notification/reminder_notify.yaml
    input:
      trigger_time: '06:04:00'
      date_entities: [
                      'input_datetime.reminder_medication_eliquis', 
                      'input_datetime.reminder_medication_gabapentin', 
                      'input_datetime.reminder_medication_metoprolol', 
                      'input_datetime.reminder_medication_rosuvastatin', 
                      'input_datetime.reminder_medication_bloodbuilder', 
                      'input_datetime.reminder_medication_methylb12'
                     ]
      message_prefix: Medication due for reorder
      tag_prefix: medication_reorder_
      category_uppercase: false

# Clear persistent notification.
- alias: Clear Medication Reminder Notification
  id: 'clear_medication_reminder_notification'
  
  use_blueprint:
    path: notification/reminder_notify_clear.yaml
    input:
      date_entities: [
                      'input_datetime.reminder_medication_eliquis', 
                      'input_datetime.reminder_medication_gabapentin', 
                      'input_datetime.reminder_medication_metoprolol', 
                      'input_datetime.reminder_medication_rosuvastatin', 
                      'input_datetime.reminder_medication_bloodbuilder', 
                      'input_datetime.reminder_medication_methylb12'
                     ]
      tag_prefix: medication_reorder_

#======================================#
#     Weekly Cleaning Notification     #
#======================================#

# Send an email once a week with the following week's cleaning chores.

- alias: Notify Weekly Cleaning
  id: 'notify_weekly_cleaning'
  
  # Trigger once each Sunday afternoon (the weekday is specified in the conditions).
  trigger:
    - platform: time
      at: '16:00:00'
  
  variables:
    
    # This is the list of datetime objects for all the cleaning chores.
    date_entities: [
                    'input_datetime.reminder_cleaning_dining_foyer',
                    'input_datetime.reminder_cleaning_family_room',
                    'input_datetime.reminder_cleaning_kitchen',
                    'input_datetime.reminder_cleaning_laundry_room',
                    'input_datetime.reminder_cleaning_master_bath',
                    'input_datetime.reminder_cleaning_master_bedroom',
                    'input_datetime.reminder_cleaning_office',
                    'input_datetime.reminder_cleaning_penthouse_bath',
                    'input_datetime.reminder_cleaning_penthouse_bedroom',
                    'input_datetime.reminder_cleaning_snack_bar',
                    'input_datetime.reminder_cleaning_studio_bath',
                    'input_datetime.reminder_cleaning_studio_bedroom',
                    'input_datetime.reminder_cleaning_theater',
                    'input_datetime.reminder_cleaning_utility'
                   ]
    
    # This is the list of actionable cleaning chores (those overdue or due within the next week).
    actionable_entities: >
      {% set actionable_list = namespace(list = []) %}
      {% for entity in date_entities %}
        {% if as_timestamp(states(entity), 0) <= as_timestamp(as_datetime(states('sensor.date')) + timedelta(days = 7), 0) %}
          {% set actionable_list.list = actionable_list.list + [entity] %}
        {% endif %}
      {% endfor %}    
      {{ actionable_list.list }}
  
  # Continue if it's Sunday and the list of actionable cleaning chores is not empty.
  condition:
    - condition: time
      weekday:
        - sun
    
    - "{{ actionable_entities | length > 0 }}"
  
  action:
    
    # First, set the input select that we use for the email body (list of friendly names for cleaning chores) to a single null entry.
    - service: input_select.set_options
      target:
        entity_id: input_select.weekly_cleaning_items
      data:
        options: ['']
    
    # Process each actionable chore entity.
    - repeat:
        for_each: "{{ actionable_entities }}"
        
        sequence:
          
          # Add the chore friendly name for the current actionable entity to the input select. Note that we skip the single
          # null item we added above, by checking for an option length of zero.
          - service: input_select.set_options
            target:
              entity_id: input_select.weekly_cleaning_items
            data:
              options: >
                {% set item_list = namespace(list = []) %}
                {% for opt in state_attr('input_select.weekly_cleaning_items', 'options') %}
                  {% set item_list.list = item_list.list + [opt] %}
                  {% if loop.last %}
                    {% set item_date = states(repeat.item).split('-')[-2] ~ '/' ~ states(repeat.item).split('-')[-1] %}
                    {% set item_text = (state_attr(repeat.item, 'friendly_name').split('Reminder Cleaning ')[-1]) ~ ' (' ~ item_date ~ ')' %}
                    {% if opt | length == 0 %}
                      {% set item_list.list = [item_text] %}
                    {% else %}
                      {% set item_list.list = item_list.list + [item_text] %}
                    {% endif %}
                  {% endif %}
                {% endfor %}
                {{ item_list.list }}
    
    # Send the email. The HTML body contains a list of the friendly names, using the input select we created above. The message is unused (we use the HTML instead),
    # but I believe is a required parameter (at least it is using the developer tools Service tab).
    - service: notify.gmail
      data:
        title: Weekly Cleaning Chores
        message: Test
        data:
          html: >
            <p>This week's cleaning chores:</p><ul>
            {% for opt in state_attr('input_select.weekly_cleaning_items', 'options') %}
              <li>{{ opt }}</li>
            {% endfor %}
            </ul>

#================================#
#     Calendar Notifications     #
#================================#

# Notify about an appointment type of calendar event, identified using the tag "(appt)" in the event title.
# I want to see these 4 hours before the event, to allow ample driving time, etc.
- alias: Notify Calendar Appointment
  id: 'notify_calendar_appointment'
  mode: queued
  
  trigger:
    - platform: calendar
      event: start
      entity_id: calendar.calendar
      offset: -04:00:00
  
  condition: "{{ '(appt)' in trigger.calendar_event.summary }}"
  
  action:
    - service: script.send_notification
      data:
        destination:
          - mobile
          - echo
        title: 'Attention:'
        message: >
          {% set timeobj = as_datetime(as_timestamp(trigger.calendar_event.start, now())) | as_local %}
          {% set time = timeobj.strftime('%H:%M') %}
          {{ trigger.calendar_event.summary | replace(' (appt)', '') }} at {{ time }}
        channel: standard
        throttled: false
        media_player_entity: media_player.everywhere
        tag: 'calendar_appointment'
        timeout: 0

# Notify about a home type of calendar event, identified using the tag "(home)" in the event title.
# These are things like a worker coming to the house, or a live stream to be joined. 15 minutes before the event is good.
- alias: Notify Calendar Home Event
  id: 'notify_calendar_home_event'
  mode: queued
  
  trigger:
    - platform: calendar
      event: start
      entity_id: calendar.calendar
      offset: -00:15:00
  
  condition: "{{ '(home)' in trigger.calendar_event.summary }}"
  
  action:
    - service: script.send_notification
      data:
        destination:
          - mobile
          - echo
        title: 'Attention:'
        message: >
          {% set timeobj = as_datetime(as_timestamp(trigger.calendar_event.start, now())) | as_local %}
          {% set time = timeobj.strftime('%H:%M') %}
          {{ trigger.calendar_event.summary | replace(' (home)', '') }} at {{ time }}
        channel: standard
        throttled: false
        media_player_entity: media_player.everywhere
        tag: 'calendar_home'
        timeout: 0

# Notify about an astronomy type of calendar event, identified using the tag "(astro)" in the event title.
# Processing of these is more complex than the simple appointment and home events above:
#
# - I'm assuming the maximum dark window of 14 hours (about 5 PM to 7 AM), so that's the offset needed for the calendar trigger
# - I'm assuming there will be a maximum of 2 events per day
# - For an event outside the hours of 10 PM to 7 AM, I want a notification 15 minutes prior to the event
# - For an event between 10 PM and 7 AM I want the notification at 10 PM, so I can decide to either stay up or set an alarm
# - Timers need to be set for when the notification should be issued, and the text of the message needs to be saved (up to 2 timers/texts for 2 separate events)
# - The timer expirations are thus additional triggers
- alias: Notify Calendar Astronomy Event
  id: 'notify_calendar_astronomy_event'
  mode: queued
  
  trigger:
    - platform: calendar
      event: start
      entity_id: calendar.calendar
      offset: -14:00:00
      id: event
    
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.calendar_astronomy_notification_1
      id: timer1
    
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.calendar_astronomy_notification_2
      id: timer2
  
  condition: "{{ (trigger.id == 'event' and '(astro)' in trigger.calendar_event.summary) or 'timer' in trigger.id }}"
  
  action:
    - if:
      
        # For the calendar event trigger, save the message text and set a timer to send the notification later.
        - "{{ trigger.id == 'event' }}"
        
      then:
        - variables:
            event_time_string: "{{ as_datetime(as_timestamp(trigger.calendar_event.start, now()) | timestamp_local(now())).strftime('%H:%M') }}"
            event_hour: "{{ event_time_string.split(':')[0] }}"
            text: "{{ trigger.calendar_event.summary | replace(' (astro)', '') }} at {{ event_time_string }}"
        - if:
          
            # Handle an event time outside the hours of 10 PM to 7 AM (meaning 5:00 PM to 9:59 PM).
            - "{{ event_hour | int(0) >= 17 and event_hour | int(0) < 22 }}"
          
          then:
                
            - if:
                - condition: state
                  entity_id: timer.calendar_astronomy_notification_1
                  state: 'idle'
              
              then:
                - service: input_text.set_value
                  target:
                    entity_id: input_text.calendar_astronomy_notification_message_1
                  data:
                    value: "{{ text }}"
                    
                - service: timer.start
                  data:
                    entity_id: timer.calendar_astronomy_notification_1
                    duration: '13:45:00'
              
              else:
                - service: input_text.set_value
                  target:
                    entity_id: input_text.calendar_astronomy_notification_message_2
                  data:
                    value: "{{ text }}"
                    
                - service: timer.start
                  data:
                    entity_id: timer.calendar_astronomy_notification_2
                    duration: '13:45:00'
          
          # Handle an event time between 10 PM and 7 AM.
          else:
            - variables:
                seconds: "{{ as_timestamp(now().replace(hour = 22, minute = 0, second = 0, microsecond = 0)) - as_timestamp(now().replace(microsecond = 0)) }}"
            
            - if:
                - condition: state
                  entity_id: timer.calendar_astronomy_notification_1
                  state: 'idle'
              
              then:
                - service: input_text.set_value
                  target:
                    entity_id: input_text.calendar_astronomy_notification_message_1
                  data:
                    value: "{{ text }}"
                    
                - service: timer.start
                  data:
                    entity_id: timer.calendar_astronomy_notification_1
                    duration: "{{ seconds }}"
              
              else:
                - service: input_text.set_value
                  target:
                    entity_id: input_text.calendar_astronomy_notification_message_2
                  data:
                    value: "{{ text }}"
                  
                - service: timer.start
                  data:
                    entity_id: timer.calendar_astronomy_notification_2
                    duration: "{{ seconds }}"
        
      # For the timer expiration trigger, send the notification.
      else:
        - if:
            - "{{ trigger.id == 'timer1' }}"
          
          then:
            - service: script.send_notification
              data:
                destination:
                  - mobile
                  - echo
                title: 'Attention:'
                message: "{{ states('input_text.calendar_astronomy_notification_message_1') }}"
                channel: temporary
                timeout: 1800
                throttled: false
                media_player_entity: media_player.everywhere
                tag: 'calendar_astronomy_1'
          
          else:
            - service: script.send_notification
              data:
                destination:
                  - mobile
                  - echo
                title: 'Attention:'
                message: "{{ states('input_text.calendar_astronomy_notification_message_2') }}"
                channel: temporary
                timeout: 1800
                throttled: false
                media_player_entity: media_player.everywhere
                tag: 'calendar_astronomy_2'

#==============================#
#     Device Notifications     #
#==============================#

# Washer cycle complete
- alias: Notify Washer Done
  id: 'notify_washer_done'
  trigger:
    - platform: state
      entity_id: input_select.washer_state
      from: Rinse Drain
      to: 'Off'
  action:
    - service: script.send_notification
      data:
        destination:
          - mobile
          - echo
        title: 'Action required:'
        message: 'Washer has finished.'
        channel: standard
        throttled: false
        media_player_entity: media_player.everywhere
        tag: 'washer_done'
        timeout: 0

# Dryer cycle complete
- alias: Notify Dryer Done
  id: 'notify_dryer_done'
  trigger:
    - platform: state
      entity_id: input_boolean.dryer_running
      from: 'on'
      to: 'off'
  action:
    - service: script.send_notification
      data:
        destination:
          - mobile
          - echo
        title: 'Action required:'
        message: 'Dryer has probably finished.'
        channel: standard
        throttled: false
        media_player_entity: media_player.everywhere
        tag: 'dryer_done'
        timeout: 0

#================#
#     Hockey     #
#================#

# Next Canes game
- alias: Notify Next Canes Game
  id: 'notify_next_canes_game'
  
  trigger:
    - platform: template
      value_template: >
        {% if states.sensor.next_canes_game is defined and states.sensor.next_canes_game.attributes is defined and states.sensor.next_canes_game.attributes.startTimeUTC is defined %}
          {% set next = as_timestamp(state_attr('sensor.next_canes_game', 'startTimeUTC'), now()) %}
          {% set now =  as_timestamp(now()) %}
          {{ iif((next - now) > 0, (((next - now) / 3600) | round(0)) < 12, false) }}
        {% else %}
          false
        {% endif %}
  
  action:
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Attention:'
        message: >
          {% if states('sensor.canes_game_status') == 'Home' %}
            {{ state_attr('sensor.canes_opponent', 'friendly_opponent') }} at Hurricanes, {{ states('sensor.next_canes_game') }}
          {% else %}
            Hurricanes at {{ state_attr('sensor.canes_opponent', 'friendly_opponent') }}, {{ states('sensor.next_canes_game') }}
          {% endif %}
        channel: standard
        throttled: false
        tag: 'next_canes_game'
        timeout: 0

#=============#
#     ISS     #
#=============#

# Next ISS pass
- alias: Notify Next ISS Pass
  id: 'notify_next_iss_pass'
  
  trigger:
    - platform: state
      entity_id: binary_sensor.international_space_station_iss_10_minute_pass_warning
      from: 'off'
      to: 'on'
  
  condition:
    - condition: template
      value_template: >
        {{ states('sensor.international_space_station_iss_pass_0') | int(0) >= 300 and 
           state_attr('sensor.international_space_station_iss_pass_0', 'max_elevation') | int(0) >= 35 }}
    
    - condition: state
      entity_id: input_boolean.nighttime
      state: 'off'
  
  action:
    - service: script.send_notification
      data:
        destination:
          - mobile
          - echo
        title: 'Attention:'
        message: >
          {% set pass = states.sensor.international_space_station_iss_pass_0.entity_id %}
          ISS in 10 minutes: start {{ state_attr(pass, 'start_compass') }}, end {{ state_attr(pass, 'end_compass') }}, max {{ state_attr(pass, 'max_elevation') | float(0) | round(0) }}
        channel: temporary
        timeout: 1800
        throttled: false
        media_player_entity: media_player.everywhere
        tag: 'next_iss_pass'

#=========================#
#     Mail & Packages     #
#=========================#

# Package(s) delivered.
- alias: Notify Packages Delivered
  id: 'notify_packages_delivered'
  
  trigger:
    - platform: numeric_state
      entity_id: sensor.mail_amazon_packages_delivered
      above: 0
      id: Amazon
    - platform: numeric_state
      entity_id: sensor.mail_fedex_delivered
      above: 0
      id: FedEx
    - platform: numeric_state
      entity_id: sensor.mail_ups_delivered
      above: 0
      id: UPS
    - platform: numeric_state
      entity_id: sensor.mail_usps_delivered
      above: 0
      id: USPS
  
  condition:
    
    # Ignore any change to or from unavailable state.
    - condition: template
      value_template: "{{ trigger.from_state.state != 'unavailable' and trigger.to_state.state != 'unavailable' }}"
  
  action:
    - service: script.send_notification
      data:
        destination:
          - mobile
          - echo
        title: 'Attention:'
        message: >
          {% set num = states(trigger.entity_id) | int(0) %}
          {{ num }} {{ trigger.id }} {{ iif(num == 1, 'package', 'packages') }} delivered.          
        channel: standard
        throttled: false
        media_player_entity: media_player.everywhere
        tag: "{{ trigger.id ~ '_package_delivered' }}"
        timeout: 0

#===============================#
#     Device Unavailability     #
#===============================#

- alias: Notify Zigbee Device Unavailable
  id: 'notify_zigbee_device_unavailable'
  
  use_blueprint:
    path: notification/unavailable_devices_notify.yaml
    input:
      current_sensor_entity: sensor.current_zigbee_unavailable_devices
      
      # Ignore spurious nonsense during HA startup.
      additional_condition_entity: input_boolean.zigbee_catch_22
      additional_condition_state: 'off'

- alias: Notify Echo Device Unavailable
  id: 'notify_echo_device_unavailable'
  
  use_blueprint:
    path: notification/unavailable_devices_notify.yaml
    input:
      current_sensor_entity: sensor.current_echo_unavailable_devices

#=======================================#
#     Time/Date Based Notifications     #
#=======================================#

# Credit reports should be ordered early in the year.
- alias: Notify Credit Reports Due
  id: 'notify_credit_reports_due'
  
  trigger:
    - platform: state
      entity_id: sensor.credit_reports_due
      from: 'False'
      to: 'True'
  
  action:
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Action required:'
        message: 'Order annual credit reports.'
        channel: standard
        throttled: false
        tag: 'credit_reports_due'
        timeout: 0

# Budget tracking is due on Sundays.
- alias: Notify Budget Tracking Due
  id: 'notify_budget_tracking_due'
  
  trigger:
    - platform: time
      at: '07:00:00'
  
  condition:
    - condition: time
      weekday:
        - sun
  
  action:
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Action required:'
        message: 'Budget tracking due.'
        channel: standard
        throttled: false
        tag: 'budget_tracking_due'
        timeout: 0

# Various monthly items are due the first of the month.
- alias: Notify Monthly Items Due
  id: 'notify_monthly_items_due'
  
  trigger:
    - platform: state
      entity_id: sensor.first_of_month
      from: 'False'
      to: 'True'
  
  action:
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Action required:'
        message: 'Debt tracking due.'
        channel: standard
        throttled: false
        tag: 'debt_tracking_due'
        timeout: 0
    
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Action required:'
        message: 'Transfer monthly amount from checking to savings.'
        channel: standard
        throttled: false
        tag: 'transfer_monthly_amount'
        timeout: 0

# Pool cleaning is normally due on Saturdays, but also Wednesdays during peak spring and fall, because of extra blooms and leaves.
- alias: Notify Pool Cleaning Due
  id: 'notify_pool_cleaning_due'
  
  trigger:
    - platform: time
      at: '07:00:00'
  
  condition:
    - or:
      - condition: time
        weekday:
          - sat
      
      - condition: template
        value_template: "{{ now().month in [3, 4, 10, 11] and now().isoweekday() in [2, 4] }}"
  
  action:
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Action required:'
        message: 'Pool cleaning due.'
        channel: standard
        throttled: false
        tag: 'pool_cleaning_due'
        timeout: 0
