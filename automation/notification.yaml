#===================================#
#     Maintenance Notifications     #
#===================================#

# Projector lamp is getting old (used only as a reminder to buy a new lamp).
- alias: Notify Projector Lamp Aging
  id: 'notify_projector_lamp_aging'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: numeric_state_above
      entity: sensor.epson_lamp_hours
      numeric_notify_threshold: 2499
      clear_type: manual
      message: 'Epson projector lamp might need replacing soon.'
      channel: standard
      tag: 'projector_lamp'

# Printer toner is getting low.
- alias: Notify Printer Toner Low
  id: 'notify_printer_toner_low'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: numeric_state_below
      entity: sensor.brother_printer_black_toner_remaining
      numeric_notify_threshold: 10
      numeric_clear_threshold: 10
      enable_clear_trigger: true
      clear_type: auto
      message: 'Printer toner might need replacing soon.'
      channel: standard
      tag: 'printer_toner'

# Pool needs chlorine tabs.
- alias: Notify Pool Needs Chlorine
  id: 'notify_pool_needs_chlorine'
  
  # Trigger if the high/low temperatures in the next 3 days forecast are below 55 degrees. Below this the salt
  # generator stops producing chlorine, so we need to add tabs.
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: state
      entity: input_boolean.salt_system_low_temperature
      from_state: 'off'
      to_state: 'on'
      enable_clear_trigger: true
      clear_type: auto
      message: 'Pool might need chlorine tablets.'
      channel: standard
      tag: 'pool_chlorine'

# F150 service is due.
- alias: Notify F150 Service Due
  id: 'notify_f150_service_due'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: leapfrog
      current_value_entity: input_number.f150_mileage
      due_value_entity: input_number.f150_service_due
      enable_clear_trigger: true
      clear_type: auto
      message: 'F150 service is due.'
      channel: standard
      tag: 'f150_service'

# Treadmill lubrication is due.
- alias: Notify Treadmill Lube Due
  id: 'notify_treadmill_lube_due'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: leapfrog
      current_value_entity: sensor.treadmill_current_hours
      due_value_entity: input_number.treadmill_lube_due
      enable_clear_trigger: true
      clear_type: auto
      message: 'Treadmill lubrication is due.'
      channel: standard
      tag: 'treadmill_lube'

#==========================================#
#     Abnormal Condition Notifications     #
#==========================================#

# Vacuum did not run.
- alias: Notify Vacuum Lazy
  id: 'notify_vacuum_lazy'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: time
      time_of_day: '07:00:00'
      conditions:
        - condition: time
          weekday:
            - mon
        - condition: state
          entity_id: input_boolean.vacuum_kicked_off
          state: 'off'
      clear_type: manual
      title: attention
      message: 'Vacuum did not run on time.'
      channel: standard
      tag: 'vacuum_lazy'

# Vacuum probably stuck.
- alias: Notify Vacuum Stuck
  id: 'notify_vacuum_stuck'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: time
      time_of_day: '07:01:00'
      conditions:
        - condition: time
          weekday:
            - mon      
        - condition: state
          entity_id: input_boolean.vacuum_kicked_off
          state: 'on'
        - condition: state
          entity_id: input_boolean.vacuum_finished
          state: 'off'
      clear_type: assisted
      message: 'Vacuum appears to be stuck.'
      channel: standard
      tag: 'vacuum_stuck'

# Vacuum needs maintenance.
- alias: Notify Vacuum Needs Maintenance
  id: 'notify_vacuum_needs_maintenance'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: event
      event_type: system_log_event
      event_data: {'name': 'sleekxmppfs.basexmpp', 'level': 'ERROR'}
      conditions: "{{ 'error' in trigger.event.data.message[0] }}"
      clear_type: assisted
      message: 'Vacuum needs maintenance.'
      channel: standard
      tag: 'vacuum_maintenance'

# Some Sonoff devices can be turned off but still reporting power usage. For the one case I know about, the plug could still be turned 
# on/off by HA, but was not able to update its power usage (so HA continued to use the last value from when it was on). The plug was not 
# connected to wifi at the time.
- alias: Notify Sonoff Device Needs Maintenance
  id: 'notify_sonoff_device_needs_maintenance'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: state
      entity: [switch.kitchen_appliance_1, switch.kitchen_appliance_2, switch.kitchen_appliance_3, switch.microwave, switch.projector, switch.subwoofer_back, switch.subwoofer_front]
      from_state: 'on'
      to_state: 'off'
      delay: 15
      conditions: "{{ states('sensor.' ~ trigger.entity_id.split('.')[1] ~ '_power') | float(0) > 0 }}"
      extract_tag_type: sonoff_power
      clear_type: manual
      message: "{{ state_attr(trigger.entity_id, 'friendly_name') ~ ' plug is off but reporting power usage.' }}"
      channel: standard

# Let's do the same thing for TP Link devices that monitor power, just in case.
- alias: Notify TPLink Device Needs Maintenance
  id: 'notify_tplink_device_needs_maintenance'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: state
      entity: [switch.family_room_av, switch.garage_chargers, light.master_bedroom_lamp, light.office_lamp, switch.refrigerator, switch.theater_av, switch.treadmill, switch.washer]
      from_state: 'on'
      to_state: 'off'
      delay: 15
      conditions: "{{ states('sensor.' ~ trigger.entity_id.split('.')[1] ~ '_current_consumption') | float(0) > 0 }}"
      extract_tag_type: tplink_power
      clear_type: manual
      message: "{{ state_attr(trigger.entity_id, 'friendly_name') ~ ' plug is off but reporting power usage.' }}"
      channel: standard

#===============================#
#     Battery Notifications     #
#===============================#

# Phone battery is too low.
- alias: Notify Phone Battery Low
  id: 'notify_phone_battery_low'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: numeric_state_below
      entity: sensor.jon_galaxy_battery_level
      numeric_notify_threshold: 15
      numeric_clear_threshold: 50
      enable_clear_trigger: true
      clear_type: auto
      message: 'Phone needs recharging.'
      channel: standard
      tag: 'phone_battery'

# Tablet battery is too low.
- alias: Notify Tablet Battery Low
  id: 'notify_tablet_battery_low'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: numeric_state_below
      entity: sensor.lenovo_tablet_battery_level
      numeric_notify_threshold: 15
      numeric_clear_threshold: 50
      enable_clear_trigger: true
      clear_type: auto
      message: 'Tablet needs recharging.'
      channel: standard
      tag: 'tablet_battery'

# Studio motion detector battery is too low.
- alias: Notify Studio Motion Battery Low
  id: 'notify_studio_motion_battery_low'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: state
      entity: binary_sensor.studio_motion_detector_battery_low
      from_state: 'off'
      to_state: 'on'
      enable_clear_trigger: true
      clear_type: auto
      message: 'Studio motion detector battery needs replacing.'
      channel: standard
      tag: 'studio_motion_battery'

# Laundry room motion detector battery is too low.
- alias: Notify Laundry Room Motion Battery Low
  id: 'notify_laundry_room_motion_battery_low'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: state
      entity: binary_sensor.laundry_room_motion_detector_battery_low
      from_state: 'off'
      to_state: 'on'
      enable_clear_trigger: true
      clear_type: auto
      message: 'Laundry room motion detector battery needs replacing.'
      channel: standard
      tag: 'laundry_room_motion_battery'

# Master bath motion detector battery is too low.
- alias: Notify Master Bath Motion Battery Low
  id: 'notify_master_bath_motion_battery_low'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: state
      entity: binary_sensor.master_bath_motion_detector_battery_low
      from_state: 'off'
      to_state: 'on'
      enable_clear_trigger: true
      clear_type: auto
      message: 'Master bath motion detector battery needs replacing.'
      channel: standard
      tag: 'master_bath_motion_battery'

# Back door sensor battery is too low.
- alias: Notify Back Door Sensor Battery Low
  id: 'notify_back_door_sensor_battery_low'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: numeric_state_below
      entity: sensor.back_door_sensor_battery
      numeric_notify_threshold: 15
      numeric_clear_threshold: 50
      enable_clear_trigger: true
      clear_type: auto
      message: 'Back door sensor battery needs replacing.'
      channel: standard
      tag: 'back_door_sensor_battery'

# Studio window sensor battery is too low.
- alias: Notify Studio Window Sensor Battery Low
  id: 'notify_studio_window_sensor_battery_low'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: numeric_state_below
      entity: sensor.studio_window_sensor_battery
      numeric_notify_threshold: 15
      numeric_clear_threshold: 50
      enable_clear_trigger: true
      clear_type: auto
      message: 'Studio window sensor battery needs replacing.'
      channel: standard
      tag: 'studio_window_sensor_battery'

# Master closet sensor battery is too low.
- alias: Notify Master Closet Sensor Battery Low
  id: 'notify_master_closet_sensor_battery_low'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: numeric_state_below
      entity: sensor.master_closet_sensor_battery
      numeric_notify_threshold: 15
      numeric_clear_threshold: 50
      enable_clear_trigger: true
      clear_type: auto
      message: 'Master closet sensor battery needs replacing.'
      channel: standard
      tag: 'master_closet_sensor_battery'

# Attic door sensor battery is too low.
- alias: Notify Attic Door Sensor Battery Low
  id: 'notify_attic_door_sensor_battery_low'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: numeric_state_below
      entity: sensor.attic_door_sensor_battery
      numeric_notify_threshold: 15
      numeric_clear_threshold: 50
      enable_clear_trigger: true
      clear_type: auto
      message: 'Attic door sensor battery needs replacing.'
      channel: standard
      tag: 'attic_door_sensor_battery'

# Upstairs entry sensor battery is too low.
- alias: Notify Upstairs Entry Sensor Battery Low
  id: 'notify_upstairs_entry_sensor_battery_low'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: numeric_state_below
      entity: sensor.upstairs_entry_sensor_battery
      numeric_notify_threshold: 15
      numeric_clear_threshold: 50
      enable_clear_trigger: true
      clear_type: auto
      message: 'Upstairs entry sensor battery needs replacing.'
      channel: standard
      tag: 'upstairs_entry_sensor_battery'

# Porch battery powered sensor needs recharging.
- alias: Notify Porch Sensor Battery Low
  id: 'notify_porch_sensor_battery_low'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: numeric_state_below
      entity: sensor.porch_sensor_battery_level
      numeric_notify_threshold: 20
      numeric_clear_threshold: 95
      enable_clear_trigger: true
      clear_type: auto
      message: 'Porch sensor battery needs recharging.'
      channel: standard
      tag: 'porch_battery'

# Master BR Vent 1 batteries are too low.
- alias: Notify Master BR Vent 1 Batteries Low
  id: 'notify_master_br_vent_1_batteries_low'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: numeric_state_below
      entity: sensor.master_br_vent_1_battery
      numeric_notify_threshold: 26
      numeric_clear_threshold: 74
      enable_clear_trigger: true
      clear_type: auto
      message: 'Master BR vent 1 batteries need replacing.'
      channel: standard
      tag: 'master_br_vent_1_battery'

# Master BR Vent 2 batteries are too low.
- alias: Notify Master BR Vent 2 Batteries Low
  id: 'notify_master_br_vent_2_batteries_low'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: numeric_state_below
      entity: sensor.master_br_vent_2_battery
      numeric_notify_threshold: 26
      numeric_clear_threshold: 74
      enable_clear_trigger: true
      clear_type: auto
      message: 'Master BR vent 2 batteries need replacing.'
      channel: standard
      tag: 'master_br_vent_2_battery'

#=================================#
#     Proximity Notifications     #
#=================================#

- alias: Notify Jon Arriving Soon
  id: 'notify_jon_arriving_soon'
  use_blueprint:
    path: notification/proximity_notify.yaml
    input:
      proximity_entity: sensor.home_jon_distance
      proximity_meters: 12000
      person_name: Jon

- alias: Notify Mike Arriving Soon
  id: 'notify_mike_arriving_soon'
  use_blueprint:
    path: notification/proximity_notify.yaml
    input:
      proximity_entity: sensor.home_mike_distance
      proximity_meters: 12000
      person_name: Mike

- alias: Notify Sarah Arriving Soon
  id: 'notify_sarah_arriving_soon'
  use_blueprint:
    path: notification/proximity_notify.yaml
    input:
      proximity_entity: sensor.home_sarah_distance
      proximity_meters: 12000
      person_name: Sarah

#===============================#
#     Maintenance Reminders     #
#===============================#

# CPAP maintenance
- alias: Notify CPAP Reminder
  id: 'notify_cpap_reminder'
  
  use_blueprint:
    path: notification/reminder_notify.yaml
    input:
      trigger_time: '06:00:00'
      date_entities: [
                      'input_datetime.reminder_cpap_cleaning', 
                      'input_datetime.reminder_cpap_filter', 
                      'input_datetime.reminder_cpap_humidifier', 
                      'input_datetime.reminder_cpap_hose', 
                      'input_datetime.reminder_cpap_mask'
                     ]
      message_prefix: CPAP maintenance due
      channel: standard
      tag_prefix: cpap_maintenance_
      category_uppercase: true
      
# For the CPAP filter, we want to change twice a month but only on specific days of the month.
# So we run each time the target date is changed automatically (by long pressing the appropriate button on the
# Life dashboard). We have a mechanism to specify a target day of the month when long pressing on the dashboard,
# but only for a single day of the month. To provide for dynamic day of month determination using the dashboard
# would require using templates on the conditional card, which isn't supported. Thus this automation.
- alias: Determine CPAP Filter Target Day
  id: determine_cpap_filter_target_day
  
  # Trigger when the filter datetime is changed, which should only happen from the dashboard.
  triggers:
    - trigger: state
      entity_id: input_datetime.reminder_cpap_filter
      to:
  
  actions:
    - variables:
        
        # The current day of month, from the old state.
        current_day_of_month: "{{ as_timestamp(trigger.from_state.state) | timestamp_custom('%d') }}"
        
        # The target day of month. We expect this to be either 8 or 22 (our specific half-month days). But this template
        # tolerates other days if they somehow exist.
        next_day_of_month: "{{ iif(current_day_of_month | int(0) <= 15, 22, 8) }}"
        
        # The next target as a datetime, which is the target as determined by the dashboard, with the day replaced.
        next_target: "{{ as_datetime(trigger.to_state.state).replace(day = next_day_of_month) }}"
    
    # Replace the datetime with the target as determined above.
    - action: input_datetime.set_datetime
      target:
        entity_id: input_datetime.reminder_cpap_filter
      data:
        timestamp: "{{ next_target.timestamp() }}"

# HVAC maintenance
- alias: Notify HVAC Reminder
  id: 'notify_hvac_reminder'
  
  use_blueprint:
    path: notification/reminder_notify.yaml
    input:
      trigger_time: '06:01:00'
      date_entities: [
                      'input_datetime.reminder_hvac_downstairs', 
                      'input_datetime.reminder_hvac_upstairs'
                     ]
      message_prefix: HVAC maintenance due
      channel: standard
      tag_prefix: hvac_maintenance_
      category_uppercase: true

# Miscellaneous maintenance
- alias: Notify Miscellaneous Reminder
  id: 'notify_miscellaneous_reminder'
  
  use_blueprint:
    path: notification/reminder_notify.yaml
    input:
      trigger_time: '06:02:00'
      date_entities: [
                      'input_datetime.reminder_misc_cleandishwasher',
                      'input_datetime.reminder_misc_cleanfridge',
                      'input_datetime.reminder_misc_cleanmicrowavegreasefilter',
                      'input_datetime.reminder_misc_cleanoven',
                      'input_datetime.reminder_misc_lubegaragedoors',
                      'input_datetime.reminder_misc_poolcleaning',
                      'input_datetime.reminder_misc_rechargeclipper',
                      'input_datetime.reminder_misc_replacemicrowavecharcoalfilter',
                      'input_datetime.reminder_misc_smokedetectors'
                     ]
      message_prefix: Misc maintenance due
      channel: standard
      tag_prefix: misc_maintenance_
      category_uppercase: false

#==========================#
#     Office Reminders     #
#==========================#

# Payment due
# On hiatus: add this to date_entities to reestablish: 'input_datetime.reminder_payment_disney',
- alias: Notify Payment Due Reminder
  id: 'notify_payment_due_reminder'
  
  use_blueprint:
    path: notification/reminder_notify.yaml
    input:
      trigger_time: '06:03:00'
      date_entities: [
                      'input_datetime.reminder_payment_amazon', 
                      'input_datetime.reminder_payment_creditunion', 
                      'input_datetime.reminder_payment_mortgage', 
                      'input_datetime.reminder_payment_randolph'
                     ]
      message_prefix: Payment due
      channel: standard
      tag_prefix: payment_due_
      category_uppercase: false

# Medication reorder
- alias: Notify Medication Reorder Reminder
  id: 'notify_medication_reorder_reminder'
  
  use_blueprint:
    path: notification/reminder_notify.yaml
    input:
      trigger_time: '06:04:00'
      date_entities: [
                      'input_datetime.reminder_medication_eliquis', 
                      'input_datetime.reminder_medication_metoprolol', 
                      'input_datetime.reminder_medication_rosuvastatin'
                     ]
      message_prefix: Medication due for reorder
      channel: standard
      tag_prefix: medication_reorder_
      category_uppercase: false

# Financial
- alias: Notify Financial Reminder
  id: 'notify_financial_reminder'
  
  use_blueprint:
    path: notification/reminder_notify.yaml
    input:
      trigger_time: '06:05:00'
      date_entities: [
                      'input_datetime.reminder_financial_creditreports', 
                      'input_datetime.reminder_financial_budgetreconciliation', 
                      'input_datetime.reminder_financial_budgettracking', 
                      'input_datetime.reminder_financial_debttracking', 
                      'input_datetime.reminder_financial_monthlytransfer'
                     ]
      message_prefix: Financial
      channel: standard
      tag_prefix: financial_
      category_uppercase: false

#================================#
#     Calendar Notifications     #
#================================#

# Notify about an appointment type of calendar event, identified using the tag "(appt)" or "(appt:nn)" in the event title
# (where nn is the one-way driving time estimate). I want to see these 4 hours before the event, to allow ample driving time, 
# etc. They expire 30 minutes after the event.
- alias: Notify Calendar Appointment
  id: 'notify_calendar_appointment'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: calendar
      calendar_offset: -04:00:00
      calendar_tag: >
        {% set summary = trigger.calendar_event.summary %}
        {% if '(appt:' in summary %}
          {% set min = (summary.split(':')[-1] | regex_replace("[^A-Za-z0-9]", "")) %}
          {% set tag = '(appt:' ~ min ~ ')' %}
        {% else %}
          {% set tag = '(appt)' %}
        {% endif %}
        {{ tag }}
      clear_type: assisted
      title: attention
      message: >
        {% set summary = trigger.calendar_event.summary %}
        {% if '(appt:' in summary %}
          {% set min = (summary.split(':')[-1] | regex_replace("[^A-Za-z0-9]", "")) %}
          {% set tag = '(appt:' ~ min ~ ')' %}
        {% else %}
          {% set tag = '(appt)' %}
        {% endif %}
        {% set timeobj = as_datetime(as_timestamp(trigger.calendar_event.start, now())) | as_local %}
        {% set time = timeobj.strftime('%H:%M') %}
        {{ trigger.calendar_event.summary | replace(tag, '') | trim }} at {{ time }}
      channel: temporary
      timeout: 16200
      tag: 'calendar_appointment'

# Notify about a home type of calendar event, identified using the tag "(home)" in the event title.
# These are things like a worker coming to the house, or a live stream to be joined. 15 minutes before the event is good.
# They expire 30 minutes after the event.
- alias: Notify Calendar Home Event
  id: 'notify_calendar_home_event'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: calendar
      calendar_offset: -00:15:00
      calendar_tag: '(home)'
      clear_type: assisted
      title: attention
      message: >
        {% set timeobj = as_datetime(as_timestamp(trigger.calendar_event.start, now())) | as_local %}
        {% set time = timeobj.strftime('%H:%M') %}
        {{ trigger.calendar_event.summary | replace('(home)', '') | trim }} at {{ time }}
      channel: temporary
      timeout: 2700
      tag: 'calendar_home'

# Notify about an astronomy type of calendar event, identified using the tag "(astro)" in the event title.
# Processing of these is more complex than the simple appointment and home events above:
#
# - I'm assuming the maximum dark window of 14 hours (about 5 PM to 7 AM), so that's the offset needed for the calendar trigger
# - I'm assuming there will be a maximum of 2 events per day
# - For an event outside the hours of 10 PM to 7 AM, I want a notification 15 minutes prior to the event
# - For an event between 10 PM and 7 AM I want the notification at 10 PM, so I can decide to either stay up or set an alarm
# - Timers need to be set for when the notification should be issued, and the text of the message needs to be saved (up to 2 timers/texts for 2 separate events)
#
# This automation saves the text and starts the appropriate timer.
- alias: Prepare Calendar Astronomy Event Notification
  id: 'prepare_calendar_astronomy_event_notification'
  mode: queued
  
  triggers:
    - trigger: calendar
      event: start
      entity_id: calendar.calendar
      offset: -14:00:00
  
  conditions: "{{ '(astro)' in trigger.calendar_event.summary }}"
  
  actions:
    - variables:
        event_time_string: "{{ as_datetime(as_timestamp(trigger.calendar_event.start, now()) | timestamp_local(now())).strftime('%H:%M') }}"
        event_hour: "{{ event_time_string.split(':')[0] | int(0) }}"
        text: "{{ trigger.calendar_event.summary | replace(' (astro)', '') }} at {{ event_time_string }}"
        suffix: "{{ iif(states('timer.calendar_astronomy_notification_1') == 'idle', '_1', '_2') }}"
        text_entity: "{{ 'input_text.calendar_astronomy_notification_message' ~ suffix }}"
        timer_entity: "{{ 'timer.calendar_astronomy_notification' ~ suffix }}"
        
        # For an event time outside the hours of 10 PM to 7 AM (meaning 5:00 PM to 9:59 PM), we want a timer 15 minutes before the event
        # (meaning 15 minutes less than the offset in the trigger). For an event between 10 PM and 7 AM, we want the timer at 10 PM.
        seconds: >
          {{ iif(event_hour >= 17 and event_hour < 22, 
                (13 * 3600) + (45 * 60), 
                as_timestamp(now().replace(hour = 22, minute = 0, second = 0, microsecond = 0)) - as_timestamp(now().replace(microsecond = 0))) }}
    
    # Before we schedule a notification, determine if the skies are astronomy friendly ...
    
    # First, calculate the weather metrics for 2 hours starting at the event time. We only need 1 hour, but specifying the same hour
    # for first & last is interpreted as needing 24 hours. The calculations will result in updating the astronomy friendly binary sensor.
    - action: script.calculate_weather_metrics
      data:
        weather_entity: weather.astroweather_white_rabbit_gardens
        forecast_type: hourly
        first_hour: "{{ event_hour }}"
        last_hour: "{{ event_hour + 1 }}"
        metrics_list:
          - ['input_number.average_astro_condition', 'condition', 50, 0]
          - ['input_number.average_astro_cloudless_percentage', 'cloudless_percentage', 50, 0]
          - ['input_number.average_astro_seeing_percentage', 'seeing_percentage', 50, 0]
          - ['input_number.average_astro_transparency_percentage', 'transparency_percentage', 50, 0]
    
    # Next, schedule the notification if conditions are friendly.
    - delay:
        milliseconds: 100
    
    - if:
        - condition: state
          entity_id: binary_sensor.astronomy_friendly
          state: 'on'
      
      then:    
        - action: input_text.set_value
          target:
            entity_id: "{{ text_entity }}"
          data:
            value: "{{ text }}"
            
        - action: timer.start
          data:
            entity_id: "{{ timer_entity }}"
            duration: "{{ seconds }}"

# These 2 automations handle the timer expiration and send the notification.
- alias: Notify Calendar Astronomy Event 1
  id: 'notify_calendar_astronomy_event_1'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: event
      event_type: timer.finished
      event_data: {'entity_id': 'timer.calendar_astronomy_notification_1'}
      enable_voice_assistant_destination: true
      clear_type: assisted
      title: attention
      message: "{{ states('input_text.calendar_astronomy_notification_message_1') }}"
      channel: temporary
      timeout: 1800
      tag: 'calendar_astronomy_1'

- alias: Notify Calendar Astronomy Event 2
  id: 'notify_calendar_astronomy_event_2'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: event
      event_type: timer.finished
      event_data: {'entity_id': 'timer.calendar_astronomy_notification_2'}
      enable_voice_assistant_destination: true
      clear_type: assisted
      title: attention
      message: "{{ states('input_text.calendar_astronomy_notification_message_2') }}"
      channel: temporary
      timeout: 1800
      tag: 'calendar_astronomy_2'

#==============================#
#     Device Notifications     #
#==============================#

# Washer cycle complete
- alias: Notify Washer Done
  id: 'notify_washer_done'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: state
      entity: input_select.washer_state
      from_state: Rinse Drain
      to_state: 'Off'
      enable_voice_assistant_destination: true
      clear_type: assisted
      title: attention
      message: 'Washer has finished.'
      channel: standard
      tag: 'washer_done'

# Dryer cycle complete
- alias: Notify Dryer Done
  id: 'notify_dryer_done'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: state
      entity: input_boolean.dryer_running
      from_state: 'on'
      to_state: 'off'
      enable_voice_assistant_destination: true
      clear_type: assisted
      title: attention
      message: 'Dryer has probably finished.'
      channel: standard
      tag: 'dryer_done'

#=================#
#     Hobbies     #
#=================#

# Next Canes game
- alias: Notify Next Canes Game
  id: 'notify_next_canes_game'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: template
      template: >
        {% if states.sensor.next_canes_game is defined and states.sensor.next_canes_game.attributes is defined and states.sensor.next_canes_game.attributes.startTimeUTC is defined %}
          {% set next = as_timestamp(state_attr('sensor.next_canes_game', 'startTimeUTC'), now()) %}
          {% set now =  as_timestamp(now()) %}
          {{ iif((next - now) > 0, (((next - now) / 3600) | round(0)) < 12, false) }}
        {% else %}
          false
        {% endif %}
      clear_type: assisted
      title: attention
      message: >
          {% if states('sensor.canes_game_status') == 'Home' %}
            {{ state_attr('sensor.canes_opponent', 'friendly_opponent') }} at Hurricanes, {{ states('sensor.next_canes_game') }}
          {% else %}
            Hurricanes at {{ state_attr('sensor.canes_opponent', 'friendly_opponent') }}, {{ states('sensor.next_canes_game') }}
          {% endif %}
      channel: standard
      tag: 'next_canes_game'

# Next Flyers game (bypass the notification if the opponent is the Hurricanes, because we already have the notification above for that)
- alias: Notify Next Flyers Game
  id: 'notify_next_flyers_game'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: template
      template: >
        {% if states.sensor.next_flyers_game is defined and states.sensor.next_flyers_game.attributes is defined and states.sensor.next_flyers_game.attributes.startTimeUTC is defined %}
          {% set next = as_timestamp(state_attr('sensor.next_flyers_game', 'startTimeUTC'), now()) %}
          {% set now =  as_timestamp(now()) %}
          {{ iif((next - now) > 0, (((next - now) / 3600) | round(0)) < 12, false) }}
        {% else %}
          false
        {% endif %}
      conditions: "{{ state_attr('sensor.flyers_opponent', 'friendly_opponent') != 'Hurricanes' }}"
      clear_type: assisted
      title: attention
      message: >
          {% if states('sensor.flyers_game_status') == 'Home' %}
            {{ state_attr('sensor.flyers_opponent', 'friendly_opponent') }} at Flyers, {{ states('sensor.next_flyers_game') }}
          {% else %}
            Flyers at {{ state_attr('sensor.flyers_opponent', 'friendly_opponent') }}, {{ states('sensor.next_flyers_game') }}
          {% endif %}
      channel: standard
      tag: 'next_flyers_game'

# Next ISS pass
- alias: Notify Next ISS Pass
  id: 'notify_next_iss_pass'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: state
      entity: binary_sensor.international_space_station_iss_10_minute_pass_warning
      from_state: 'off'
      to_state: 'on'
      conditions:
        - condition: template
          value_template: >
            {{ states('sensor.international_space_station_iss_pass_0') | int(0) >= 300 and 
               state_attr('sensor.international_space_station_iss_pass_0', 'max_elevation') | int(0) >= 35 and
               states('sensor.astroweather_white_rabbit_gardens_cloudless') | int(0) >= 50 }}        
        - condition: state
          entity_id: input_boolean.nighttime
          state: 'off'
      enable_voice_assistant_destination: true
      clear_type: assisted
      title: attention
      message: >
        {% set pass = states.sensor.international_space_station_iss_pass_0.entity_id %}
        ISS in 10 minutes: start {{ state_attr(pass, 'start_compass') }}, end {{ state_attr(pass, 'end_compass') }}, max {{ state_attr(pass, 'max_elevation') | float(0) | round(0) }}
      channel: temporary
      timeout: 2400
      tag: 'next_iss_pass'

# Astronomy friendly.
- alias: Notify Astronomy Friendly
  id: 'notify_astronomy_friendly'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: state
      entity: binary_sensor.astronomy_friendly
      from_state: 'off'
      to_state: 'on'
      conditions:
        - condition: state
          entity_id: input_boolean.nighttime
          state: 'off'
      enable_voice_assistant_destination: true
      clear_type: assisted
      title: attention
      message: 'It looks like a good night for stargazing.'
      channel: temporary
      timeout: 5400
      tag: 'astronomy_friendly'

#=========================#
#     Mail & Packages     #
#=========================#

# Package(s) delivered.
- alias: Notify Packages Delivered
  id: 'notify_packages_delivered'
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: numeric_state_above
      entity: [sensor.mail_amazon_packages_delivered, sensor.mail_fedex_delivered, sensor.mail_ups_delivered, sensor.mail_usps_delivered]
      numeric_notify_threshold: 0
      enable_voice_assistant_destination: true
      extract_tag_type: delivery
      clear_type: manual
      title: attention
      message: >
        {% set num = states(trigger.entity_id) | int(0) %}
        {{ num }} {{ state_attr(trigger.entity_id, 'friendly_name').split(' ')[1] }} {{ iif(num == 1, 'package', 'packages') }} delivered.
      channel: standard

#===============================#
#     Device Unavailability     #
#===============================#

- alias: Notify Zigbee Device Unavailable
  id: 'notify_zigbee_device_unavailable'
  
  use_blueprint:
    path: notification/unavailable_devices_notify.yaml
    input:
      current_sensor_entity: sensor.current_zigbee_unavailable_devices

- alias: Notify Echo Device Unavailable
  id: 'notify_echo_device_unavailable'
  
  use_blueprint:
    path: notification/unavailable_devices_notify.yaml
    input:
      current_sensor_entity: sensor.current_echo_unavailable_devices

#======================#
#     Temperatures     #
#======================#

# New temperature extremes.
- alias: Notify Min Attic Temp Extreme
  id: 'notify_min_attic_temp_extreme'
  
  use_blueprint:
    path: notification/temperature_extremes_notify.yaml
    input:
      temperature_entity: input_number.min_attic_temp

- alias: Notify Max Attic Temp Extreme
  id: 'notify_max_attic_temp_extreme'
  
  use_blueprint:
    path: notification/temperature_extremes_notify.yaml
    input:
      temperature_entity: input_number.max_attic_temp

- alias: Notify Min Garage Temp Extreme
  id: 'notify_min_garage_temp_extreme'
  
  use_blueprint:
    path: notification/temperature_extremes_notify.yaml
    input:
      temperature_entity: input_number.min_garage_temp

- alias: Notify Max Garage Temp Extreme
  id: 'notify_max_garage_temp_extreme'
  
  use_blueprint:
    path: notification/temperature_extremes_notify.yaml
    input:
      temperature_entity: input_number.max_garage_temp

- alias: Notify Min Porch Temp Extreme
  id: 'notify_min_porch_temp_extreme'
  
  use_blueprint:
    path: notification/temperature_extremes_notify.yaml
    input:
      temperature_entity: input_number.min_outdoor_temp

- alias: Notify Max Porch Temp Extreme
  id: 'notify_max_porch_temp_extreme'
  
  use_blueprint:
    path: notification/temperature_extremes_notify.yaml
    input:
      temperature_entity: input_number.max_outdoor_temp

# Notify about freezing temperatures so I can leave a faucet on trickle.
# NOTE: The trigger entity is set at bedtime by the Check Overnight Freezing automation. It's also reset 
# to a high value at each morning.
- alias: Notify Freezing Temperature
  id: notify_freezing_temperature
  
  use_blueprint:
    path: notification/mobile_notify.yaml
    input:
      trigger_type: state
      entity: input_boolean.freezing_temperature
      from_state: 'off'
      to_state: 'on'
      enable_clear_trigger: true
      enable_voice_assistant_destination: true
      clear_type: auto
      title: attention
      message: "{{ 'Pipes might freeze tonight, (low temp = ' ~ states(input_number.minimum_outdoor_temperature) ~ ').' }}"
      channel: standard
      tag: 'freezing_temperature'

#=====================================#
#     Notification Tag Management     #
#=====================================#

# When my phone is rebooted, or the companion app gets updated (not entirely sure about this), existing notifications are gone.
# This is a problem for HA notifications because some of them might not get triggered for a long time, or perhaps ever again.
# So we keep a registry of tags, and the associated notification data, so we can reissue all notifications that were on the
# device before they went away.
#
# The registry consists of a dictionary where the keys are the tags and the values are the notification data (title, message, etc).

# This is where we reissue the notifications.
- alias: Reissue Mobile Notifications
  id: reissue_mobile_notifications
  
  triggers:
    - trigger: state
      entity_id: sensor.jon_galaxy_current_version
      to:
    
    - trigger: state
      entity_id: sensor.jon_galaxy_last_reboot
      to:
  
  actions:
    
    # Wait a bit, to give the phone time to reinitialize.
    - delay: '00:01:00'
    
    # Walk through all tags.
    - repeat:
        for_each: "{{ state_attr('sensor.mobile_tag_registry_keys', 'tags') }}"
        
        sequence:
          - variables:
              tag_entry: "{{ state_attr('sensor.mobile_tag_registry', 'tags').get(repeat.item) }}"
              
              # Build the notification data. Skip the first item, which is the clear type.
              notification_data: "{{ {'destination': ['mobile'], 'title': tag_entry[1], 'message': tag_entry[2], 'channel': tag_entry[3], 'timeout': tag_entry[4], 'tag': repeat.item} }}"
          
          # Reissue the notification.
          - action: script.send_notification
            data: "{{ notification_data }}"

#===============================================#
#     Automatic Notification Unregistration     #
#===============================================#

# These automations assist with automatically unregistering notifications, based on notification-specific conditions.

# For a temporary channel notification, we know when the notification will be automatically removed from the device.
# The Register Mobile Notification script sets a timer to unregister the tag, handled here.
# Note to self: the name of the timer must match the tag in order for this to work.
- alias: Unregister Calendar Tag
  id: unregister_calendar_tag  
  mode: queued
  
  triggers:
    - trigger: event
      event_type: timer.finished
      event_data:
        entity_id: timer.calendar_appointment
    
    - trigger: event
      event_type: timer.finished
      event_data:
        entity_id: timer.calendar_home
    
    - trigger: event
      event_type: timer.finished
      event_data:
        entity_id: timer.calendar_astronomy_1
    
    - trigger: event
      event_type: timer.finished
      event_data:
        entity_id: timer.calendar_astronomy_2
    
    - trigger: event
      event_type: timer.finished
      event_data:
        entity_id: timer.next_iss_pass					
    
    - trigger: event
      event_type: timer.finished
      event_data:
        entity_id: timer.astronomy_friendly
    
  action:
    - variables:
        tag: "{{ trigger.event.data.entity_id | replace('timer.', '') }}"
    
    # Remove the notification and unregister the tag.
    - service: script.remove_mobile_notification
      data:
        tag: "{{ tag }}"

# Handle vacuum problems (stuck or error).
# See the Register Mobile Notification script for more details.
- alias: Unregister Vacuum Problem Notifications
  id: unregister_vacuum_problem_notifications
  
  triggers:
    - trigger: state
      entity_id: vacuum.ecovacs_deebot_none
      not_from: docked
      to: docked
  
    - trigger: numeric_state
      entity_id: sensor.ecovacs_battery
      above: 90
  
  conditions:
    - condition: numeric_state
      entity_id: input_number.vacuum_problems
      above: 0
  
  actions:
    - variables:
        problems: "{{ states('input_number.vacuum_problems') }}"
          
    # Clear the vacuum stuck notification if it occurred.
    - if:
        - "{{ problems | int(0) is odd }}"
      
      then:
    
        # Remove the notification and unregister the tag.
        - action: script.remove_mobile_notification
          data:
            tag: vacuum_stuck
          
    # Clear the vacuum error notification if it occurred.
    - if:
        - "{{ problems | int(0) >= 2 }}"
      
      then:
    
        # Remove the notification and unregister the tag.
        - action: script.remove_mobile_notification
          data:
            tag: vacuum_maintenance
    
    # Clear the saved vacuum problems.
    - action: input_number.set_value
      target:
        entity_id: input_number.vacuum_problems
      data:
        value: 0

# For some notifications, I don't need them anymore once I've gone to sleep.
- alias: Unregister Single Day Notifications
  id: unregister_single_day_notifications
  
  triggers:
    - trigger: state
      entity_id: input_boolean.sleeptime
      from: 'off'
      to: 'on'
  
  actions:
    - repeat:
        for_each: "{{ state_attr('sensor.mobile_tag_registry_keys', 'tags') }}"
        sequence:
          - if:
              - "{{ repeat.item in ['washer_done', 'dryer_done', 'next_canes_game', 'next_flyers_game', 'astronomy_friendly'] }}"
            
            then:
        
              # Remove the notification and unregister the tag.
              - action: script.remove_mobile_notification
                data:
                  tag: "{{ repeat.item }}"
