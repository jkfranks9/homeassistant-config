#===================================#
#     Maintenance Notifications     #
#===================================#

# Projector lamp is getting old.
- alias: Notify Projector Lamp Aging
  id: 'notify_projector_lamp_aging'
  
  use_blueprint:
    path: notification/maint_above_notify.yaml
    input:
      sensor1_entity: sensor.epson_lamp_hours
      threshold1: 1999
      # Sensor/threshold 2 unused - this can never trigger
      sensor2_entity: sensor.jon_galaxy_battery_level
      threshold2: 100
      timer_entity: timer.projector_lamp_notification
      message: 'Epson projector lamp might need replacing soon.'
      persistent: true
      tag: 'projector_lamp'

# Clear persistent notification.
- alias: Clear Projector Lamp Notification
  id: 'clear_projector_lamp_notification'
  
  trigger:
    - platform: numeric_state
      entity_id: sensor.epson_lamp_hours
      below: 1999
  
  action:
    - service: notify.mobile_app_jon_galaxy
      data:
        message: 'clear_notification'
        data:
          tag: 'projector_lamp'

# Printer toner is getting low.
- alias: Notify Printer Toner Low
  id: 'notify_printer_toner_low'
  
  use_blueprint:
    path: notification/maint_below_notify.yaml
    input:
      sensor1_entity: sensor.brother_printer_black_toner_remaining
      threshold1: 10
      # Sensor/threshold 2 unused - this can never trigger
      sensor2_entity: sensor.count_automations
      threshold2: 1
      timer_entity: timer.printer_toner_notification
      message: 'Printer toner might need replacing soon.'
      persistent: true
      tag: 'printer_toner'

# Clear persistent notification.
- alias: Clear Printer Toner Notification
  id: 'clear_printer_toner_notification'
  
  trigger:
    - platform: numeric_state
      entity_id: sensor.brother_printer_black_toner_remaining
      above: 10
  
  action:
    - service: notify.mobile_app_jon_galaxy
      data:
        message: 'clear_notification'
        data:
          tag: 'printer_toner'

# Vacuum main brush is getting old.
- alias: Notify Vacuum Main Brush Aging
  id: 'notify_vacuum_main_brush_aging'
  
  use_blueprint:
    path: notification/maint_below_notify.yaml
    input:
      sensor1_entity: sensor.ecovacs_main_brush_remaining_life
      threshold1: 20
      # Sensor/threshold 2 unused - this can never trigger
      sensor2_entity: sensor.count_automations
      threshold2: 1
      timer_entity: timer.vacuum_main_brush_notification
      message: 'Vacuum main brush might need replacing soon.'
      persistent: true
      tag: 'vac_main_brush'

# Clear persistent notification.
- alias: Clear Vacuum Main Brush Notification
  id: 'clear_vacuum_main_brush_notification'
  
  trigger:
    - platform: numeric_state
      entity_id: sensor.ecovacs_main_brush_remaining_life
      above: 20
  
  action:
    - service: notify.mobile_app_jon_galaxy
      data:
        message: 'clear_notification'
        data:
          tag: 'vac_main_brush'

# Vacuum side brush is getting old.
- alias: Notify Vacuum Side Brush Aging
  id: 'notify_vacuum_side_brush_aging'
  
  use_blueprint:
    path: notification/maint_below_notify.yaml
    input:
      sensor1_entity: sensor.ecovacs_side_brush_remaining_life
      threshold1: 20
      # Sensor/threshold 2 unused - this can never trigger
      sensor2_entity: sensor.count_automations
      threshold2: 1
      timer_entity: timer.vacuum_side_brush_notification
      message: 'Vacuum side brush might need replacing soon.'
      persistent: true
      tag: 'vac_side_brush'

# Clear persistent notification.
- alias: Clear Vacuum Side Brush Notification
  id: 'clear_vacuum_side_brush_notification'
  
  trigger:
    - platform: numeric_state
      entity_id: sensor.ecovacs_side_brush_remaining_life
      above: 20
  
  action:
    - service: notify.mobile_app_jon_galaxy
      data:
        message: 'clear_notification'
        data:
          tag: 'vac_side_brush'

# Vacuum filter is getting old.
- alias: Notify Vacuum Filter Aging
  id: 'notify_vacuum_filter_aging'
  
  use_blueprint:
    path: notification/maint_below_notify.yaml
    input:
      sensor1_entity: sensor.ecovacs_filter_remaining_life
      threshold1: 20
      # Sensor/threshold 2 unused - this can never trigger
      sensor2_entity: sensor.count_automations
      threshold2: 1
      timer_entity: timer.vacuum_filter_notification
      message: 'Vacuum filter might need replacing soon.'
      persistent: true
      tag: 'vac_filter'

# Clear persistent notification.
- alias: Clear Vacuum Filter Notification
  id: 'clear_vacuum_filter_notification'
  
  trigger:
    - platform: numeric_state
      entity_id: sensor.ecovacs_filter_remaining_life
      above: 20
  
  action:
    - service: notify.mobile_app_jon_galaxy
      data:
        message: 'clear_notification'
        data:
          tag: 'vac_filter'

# Pool needs chlorine tabs.
- alias: Notify Pool Needs Chlorine
  id: 'notify_pool_needs_chlorine'
  
  # Trigger if the high/low temperatures in the next 3 days forecast are below 55 degrees. Below this the salt
  # generator stops producing chlorine, so we need to add tabs.
  #
  # Note that the template below is tricky. The idea is to skip the first day of the forecast, because that's today.
  # Then bump the count if both temps are below the minimum for the next 3 days. However, due to Jinja scoping rules, 
  # a simple scalar value for the count doesn't work. So we start with an empty array, then add items to the array 
  # for each day that has low temps. Finally, compare the number of items in the array. Kludge alert!
  trigger:
    - platform: template
      value_template: >
        {% set forecast = state_attr('weather.openweathermap', 'forecast') %}
        {% set num_cold_days = namespace(count = []) %}
        {% if forecast != None %}
        
          {% for fc in forecast %}
            {% if loop.index0 > 0 and loop.index0 < 4 %}
              {% if fc.temperature < 55 and fc.templow < 55 %}
                {% set num_cold_days.count = num_cold_days.count + [1] %}
              {% endif %}
            {% endif %}            
          {% endfor %}
        {% endif %}
        
        {{ (num_cold_days.count) | length == 3 }}
  
  action:    
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Action required:'
        message: 'Pool might need chlorine tablets.'
        channel: standard
        throttled: false
        tag: ''
        timeout: 0

#==========================================#
#     Abnormal Condition Notifications     #
#==========================================#

# Vacuum did not run.
- alias: Notify Vacuum Lazy
  id: 'notify_vacuum_lazy'
  
  trigger:
    - platform: time
      at: '07:00:00'
  
  condition:
    - condition: time
      weekday:
        - mon
  
  action:
    - condition: state
      entity_id: input_boolean.vacuum_kicked_off
      state: 'off'
    
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Action required:'
        message: 'Vacuum did not run on time.'
        channel: standard
        throttled: false
        tag: ''
        timeout: 0

# Vacuum probably stuck.
- alias: Notify Vacuum Stuck
  id: 'notify_vacuum_stuck'
  
  trigger:
    - platform: time
      at: '07:01:00'
  
  condition:
    - condition: time
      weekday:
        - mon
  
  action:
    - condition: numeric_state
      entity_id: sensor.ecovacs_battery
      below: 90
    
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Action required:'
        message: 'Vacuum appears to be stuck (or not charging).'
        channel: standard
        throttled: false
        tag: ''
        timeout: 0

# Vacuum needs maintenance.
- alias: Notify Vacuum Needs Maintenance
  id: 'notify_vacuum_needs_maintenance'
  
  trigger:
    - platform: event
      event_type: system_log_event
      event_data:
        source: 'sleekxmppfs.basexmpp'
        level: 'ERROR'
  
  condition:
    - condition: template
      value_template: "{{ 'error' in trigger.event.data.message }}"
  
  action:    
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Action required:'
        message: 'Vacuum needs maintenance.'
        channel: standard
        throttled: false
        tag: ''
        timeout: 0

#===============================#
#     Battery Notifications     #
#===============================#

# Phone battery is too low.
- alias: Notify Phone Battery Low
  id: 'notify_phone_battery_low'
  
  use_blueprint:
    path: notification/maint_below_notify.yaml
    input:
      sensor1_entity: sensor.jon_galaxy_battery_level
      threshold1: 15
      # Sensor/threshold 2 unused - this can never trigger
      sensor2_entity: sensor.count_automations
      threshold2: 1
      timer_entity: timer.phone_battery_notification
      message: 'Phone needs recharging.'
      persistent: false

# Tablet battery is too low.
- alias: Notify Tablet Battery Low
  id: 'notify_tablet_battery_low'
  
  use_blueprint:
    path: notification/maint_below_notify.yaml
    input:
      sensor1_entity: sensor.lenovo_tablet_battery_level
      threshold1: 15
      # Sensor/threshold 2 unused - this can never trigger
      sensor2_entity: sensor.count_automations
      threshold2: 1
      timer_entity: timer.tablet_battery_notification
      message: 'Tablet needs recharging.'
      persistent: false

# Guest bath motion detector battery is too low.
- alias: Notify Guest Bath Motion Battery Low
  id: 'notify_guest_bath_motion_battery_low'
  
  use_blueprint:
    path: notification/maint_binary_notify.yaml
    input:
      sensor_entity: binary_sensor.guest_bath_motion_detector_battery_low
      message: 'Guest bath motion detector battery needs replacing.'

# Laundry room motion detector battery is too low.
- alias: Notify Laundry Room Motion Battery Low
  id: 'notify_laundry_room_motion_battery_low'
  
  use_blueprint:
    path: notification/maint_binary_notify.yaml
    input:
      sensor_entity: binary_sensor.laundry_room_motion_detector_battery_low
      message: 'Laundry room motion detector battery needs replacing.'

# Master bath motion detector battery is too low.
- alias: Notify Master Bath Motion Battery Low
  id: 'notify_master_bath_motion_battery_low'
  
  use_blueprint:
    path: notification/maint_binary_notify.yaml
    input:
      sensor_entity: binary_sensor.master_bath_motion_detector_battery_low
      message: 'Master bath motion detector battery needs replacing.'

# Back door sensor battery is too low.
- alias: Notify Back Door Sensor Battery Low
  id: 'notify_back_door_sensor_battery_low'
  
  use_blueprint:
    path: notification/maint_below_notify.yaml
    input:
      sensor1_entity: sensor.back_door_sensor_battery
      threshold1: 15
      # Sensor/threshold 2 unused - this can never trigger
      sensor2_entity: sensor.count_automations
      threshold2: 1
      timer_entity: timer.back_door_sensor_battery_notification
      message: 'Back door sensor battery needs replacing.'
      persistent: false

# Guest BR window sensor battery is too low.
- alias: Notify Guest BR Window Sensor Battery Low
  id: 'notify_guest_br_window_sensor_battery_low'
  
  use_blueprint:
    path: notification/maint_below_notify.yaml
    input:
      sensor1_entity: sensor.guest_br_window_sensor_battery
      threshold1: 15
      # Sensor/threshold 2 unused - this can never trigger
      sensor2_entity: sensor.count_automations
      threshold2: 1
      timer_entity: timer.guest_br_window_sensor_battery_notification
      message: 'Guest BR window sensor battery needs replacing.'
      persistent: false

# Porch battery powered sensor needs recharging.
- alias: Notify Porch Sensor Battery Low
  id: 'notify_porch_sensor_battery_low'
  
  use_blueprint:
    path: notification/maint_below_notify.yaml
    input:
      sensor1_entity: sensor.porch_battery_level
      threshold1: 20.0
      sensor2_entity: sensor.porch_battery_voltage
      threshold2: 3.24
      timer_entity: timer.porch_battery_notification
      message: 'Porch sensor battery needs recharging.'
      persistent: false

# Blue Charm Beacon battery is too low.
- alias: Notify Blue Charm Beacon Battery Low
  id: 'notify_blue_charm_beacon_battery_low'
  
  use_blueprint:
    path: notification/maint_below_notify.yaml
    input:
      sensor1_entity: sensor.blue_charm_battery_level
      threshold1: 15
      # Sensor/threshold 2 unused - this can never trigger
      sensor2_entity: sensor.count_automations
      threshold2: 1
      timer_entity: timer.blue_charm_beacon_battery_notification
      message: 'Blue Charm beacon battery needs replacing.'
      persistent: false

# Upstairs BR Vent 1 batteries are too low.
- alias: Notify Upstairs BR Vent 1 Batteries Low
  id: 'notify_upstairs_br_vent_1_batteries_low'
  
  use_blueprint:
    path: notification/maint_below_notify.yaml
    input:
      sensor1_entity: sensor.upstairs_br_vent_1_battery
      threshold1: 15
      # Sensor/threshold 2 unused - this can never trigger
      sensor2_entity: sensor.count_automations
      threshold2: 1
      timer_entity: timer.upstairs_br_vent_1_battery_notification
      message: 'Upstairs BR vent 1 batteries need replacing.'
      persistent: false

# Upstairs BR Vent 2 batteries are too low.
- alias: Notify Upstairs BR Vent 2 Batteries Low
  id: 'notify_upstairs_br_vent_2_batteries_low'
  
  use_blueprint:
    path: notification/maint_below_notify.yaml
    input:
      sensor1_entity: sensor.upstairs_br_vent_2_battery
      threshold1: 15
      # Sensor/threshold 2 unused - this can never trigger
      sensor2_entity: sensor.count_automations
      threshold2: 1
      timer_entity: timer.upstairs_br_vent_2_battery_notification
      message: 'Upstairs BR vent 2 batteries need replacing.'
      persistent: false

#===============================#
#     Health Notifications      #
#===============================#

# Send a notification if the UV index or dew point rise above an unhealthy threshold.
- alias: Notify Outdoors Unhealthy
  id: 'notify_outdoors_unhealthy'
  
  trigger:
    
    # UV index rises to unhealthy level
    - platform: numeric_state
      entity_id: sensor.current_uv_index
      above: 7.9999
    
    # Dew point rises to unhealthy level
    - platform: numeric_state
      entity_id: sensor.outdoor_dewpoint
      above: 70.0
    
    # Once in the morning in case the levels are already high
    - platform: time
      at: '07:15:00'
      
    # In case Home Assistant restarts after the morning check just as the level(s) rise above the threshold
    - platform: homeassistant
      event: start
  
  condition:
    - and:
      
        # Only during daytime
        - condition: state
          entity_id: sun.sun
          state: above_horizon
      
        # Only if the levels are high (for the Home Assistant start trigger)
        - or:
          - condition: numeric_state
            entity_id: sensor.current_uv_index
            above: 7.9999
          - condition: numeric_state
            entity_id: sensor.outdoor_dewpoint
            above: 65.0
  
  action:
    - delay: 
        seconds: "{{ range(2, 15) | random }}"
    
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Warning:'
        message: 'Outdoor quality is unhealthy.'
        channel: standard
        throttled: true
        timer_entity: timer.outdoors_unhealthy_notification
        tag: ''
        timeout: 0

# Send a notification for overdue treadmill exercise.
- alias: Notify Treadmill Due
  id: 'notify_treadmill_due'
  
  # Trigger every 6 hours.
  trigger:
    - platform: time_pattern
      hours: '/6'
  
  # Continue if the treadmill was last used more than 2.5 days ago (60 hours).
  condition:
    - condition: template
      value_template: >
        {% set changed = states('sensor.treadmill_last_changed') %}
        {% set tdelta = now() - strptime(changed, '%Y-%m-%dT%H:%M:%S%z', now()) %}
        {% set seconds = (tdelta.days * 86400) + tdelta.seconds %}
        {% set delta = (seconds / 3600) | round(0) %}
        {{ delta > 60 }}
  
  action:    
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Attention:'
        message: 'Treadmill exercise is due.'
        channel: standard
        throttled: true
        timer_entity: timer.treadmill_due_notification
        tag: ''
        timeout: 0

#=================================#
#     Proximity Notifications     #
#=================================#

- alias: Notify Jon Arriving Soon
  id: 'notify_jon_arriving_soon'
  use_blueprint:
    path: notification/proximity_notify.yaml
    input:
      proximity_entity: proximity.jon_home
      proximity_meters: 12000
      person_name: Jon

- alias: Notify Mike Arriving Soon
  id: 'notify_mike_arriving_soon'
  use_blueprint:
    path: notification/proximity_notify.yaml
    input:
      proximity_entity: proximity.mike_home
      proximity_meters: 12000
      person_name: Mike

- alias: Notify Sarah Arriving Soon
  id: 'notify_sarah_arriving_soon'
  use_blueprint:
    path: notification/proximity_notify.yaml
    input:
      proximity_entity: proximity.sarah_home
      proximity_meters: 12000
      person_name: Sarah

#- alias: Notify David Arriving Soon
#  id: 'notify_david_arriving_soon'
#  use_blueprint:
#    path: notification/proximity_notify.yaml
#    input:
#      proximity_entity: proximity.david_home
#      proximity_meters: 12000
#      person_name: David

#==========================#
#     Software Updates     #
#==========================#

# HACS update
- alias: Notify HACS Updated
  id: 'notify_hacs_updated'
  
  trigger:
    - platform: state
      entity_id: sensor.hacs
    - platform: homeassistant
      event: start
  
  condition:
    - condition: numeric_state
      entity_id: sensor.hacs
      above: 0
  
  action:
    - delay:
        seconds: "{{ range(1, 5) | random }}"
    
    - service: script.send_notification
      data:
        destination:
          - persistent
        title: 'HACS Updated'
        notification_id: 'hacs_update'
        message: |
          {% set num = states('sensor.hacs') %}
          Updates available for {{ num }} HACS repo{% if num | int(0) > 1 %}s{% endif %}:{{"\n"}}
          {% for repo in states.sensor.hacs.attributes.repositories %}{{ repo.name }} ({{ repo.installed_version }} -> {{ repo.available_version }})
          {% endfor %}

#===================#
#     Reminders     #
#===================#

# CPAP maintenance
- alias: Notify CPAP Reminder
  id: 'notify_cpap_reminder'
  mode: queued
  
  trigger:
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_cpap_filter'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date <= now_date }}
      id: filter
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_cpap_headgear_humidifier'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date <= now_date }}
      id: headgear
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_cpap_hose'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date <= now_date }}
      id: hose
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_cpap_mask'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date <= now_date }}
      id: mask
  
  action:
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Action required:'
        message: 'CPAP maintenance due ({{ trigger.id }}).'
        channel: persistent
        throttled: true
        timer_entity: timer.cpap_reminder_notification
        tag: 'cpap_maintenance_{{ trigger.id }}'
        timeout: 0

# Clear persistent notification.
- alias: Clear CPAP Reminder Notification
  id: 'clear_cpap_reminder_notification'
  
  trigger:
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_cpap_filter'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date > now_date }}
      id: filter
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_cpap_headgear_humidifier'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date > now_date }}
      id: headgear
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_cpap_hose'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date > now_date }}
      id: hose
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_cpap_mask'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date > now_date }}
      id: mask
  
  action:
    - service: notify.mobile_app_jon_galaxy
      data:
        message: 'clear_notification'
        data:
          tag: 'cpap_maintenance_{{ trigger.id }}'

# HVAC maintenance
- alias: Notify HVAC Reminder
  id: 'notify_hvac_reminder'
  mode: queued
  
  trigger:
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_hvac_filters_downstairs'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date <= now_date }}
      id: downstairs
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_hvac_filters_upstairs'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date <= now_date }}
      id: upstairs
  
  action:
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Action required:'
        message: 'HVAC maintenance due ({{ trigger.id }}).'
        channel: persistent
        throttled: true
        timer_entity: timer.hvac_reminder_notification
        tag: 'hvac_maintenance_{{ trigger.id }}'
        timeout: 0

# Clear persistent notification.
- alias: Clear HVAC Reminder Notification
  id: 'clear_hvac_reminder_notification'
  
  trigger:
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_hvac_filters_downstairs'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date > now_date }}
      id: downstairs
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_hvac_filters_upstairs'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date > now_date }}
      id: upstairs
  
  action:
    - service: notify.mobile_app_jon_galaxy
      data:
        message: 'clear_notification'
        data:
          tag: 'hvac_maintenance_{{ trigger.id }}'

# Payment due
- alias: Notify Payment Due Reminder
  id: 'notify_payment_due_reminder'
  mode: queued
  
  trigger:
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_payment_amazon'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date <= now_date }}
      id: Amazon
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_payment_credit_union'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date <= now_date }}
      id: CU
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_payment_mortgage'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date <= now_date }}
      id: mortgage
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_payment_randolph'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date <= now_date }}
      id: Randolph
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_payment_wells_fargo'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date <= now_date }}
      id: WF
  
  action:
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Action required:'
        message: 'Payment due ({{ trigger.id }}).'
        channel: persistent
        throttled: true
        timer_entity: timer.payment_reminder_notification
        tag: 'payment_due_{{ trigger.id }}'
        timeout: 0

# Clear persistent notification.
- alias: Clear Payment Reminder Notification
  id: 'clear_payment_reminder_notification'
  
  trigger:
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_payment_amazon'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date > now_date }}
      id: Amazon
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_payment_credit_union'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date > now_date }}
      id: CU
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_payment_mortgage'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date > now_date }}
      id: mortgage
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_payment_randolph'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date > now_date }}
      id: Randolph
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_payment_wells_fargo'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date > now_date }}
      id: WF
  
  action:
    - service: notify.mobile_app_jon_galaxy
      data:
        message: 'clear_notification'
        data:
          tag: 'payment_due_{{ trigger.id }}'

# Medication reorder
- alias: Notify Medication Reorder Reminder
  id: 'notify_medication_reorder_reminder'
  mode: queued
  
  trigger:
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_medication_eliquis'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date <= now_date }}
      id: Eliquis
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_medication_gabapentin'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date <= now_date }}
      id: gabapentin
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_medication_metoprolol'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date <= now_date }}
      id: metoprolol
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_medication_rosuvastatin'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date <= now_date }}
      id: rosuvastatin
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_medication_blood_builder_minis'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date <= now_date }}
      id: blood builder
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_medication_methyl_b12'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date <= now_date }}
      id: B12
  
  action:
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Action required:'
        message: 'Medication due for reorder ({{ trigger.id }}).'
        channel: persistent
        throttled: true
        timer_entity: timer.medication_reminder_notification
        tag: 'medication_reorder_{{ trigger.id }}'
        timeout: 0

# Clear persistent notification.
- alias: Clear Medication Reminder Notification
  id: 'clear_medication_reminder_notification'
  
  trigger:
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_medication_eliquis'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date > now_date }}
      id: Eliquis
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_medication_gabapentin'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date > now_date }}
      id: gabapentin
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_medication_metoprolol'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date > now_date }}
      id: metoprolol
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_medication_rosuvastatin'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date > now_date }}
      id: rosuvastatin
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_medication_blood_builder_minis'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date > now_date }}
      id: blood builder
    - platform: template
      value_template: >
        {% set entity_date = as_local(now().fromtimestamp(as_timestamp(states('input_datetime.reminder_medication_methyl_b12'), 0))).replace(hour=6) %}
        {% set now_date = as_local(now().fromtimestamp(as_timestamp(states('sensor.date'), 0))).replace(hour=6) %}
        {{ entity_date > now_date }}
      id: B12
  
  action:
    - service: notify.mobile_app_jon_galaxy
      data:
        message: 'clear_notification'
        data:
          tag: 'medication_reorder_{{ trigger.id }}'

#================================#
#     Calendar Notifications     #
#================================#

# Notify about an appointment type of calendar event, identified using the tag "(appt)" in the event title.
# I want to see these 4 hours before the event, to allow ample driving time, etc.
- alias: Notify Calendar Appointment
  id: 'notify_calendar_appointment'
  mode: queued
  
  trigger:
    - platform: calendar
      event: start
      entity_id: calendar.calendar
      offset: -04:00:00
  
  condition:
    - condition: template
      value_template: "{{ '(appt)' in trigger.calendar_event.summary }}"
  
  action:
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Reminder:'
        message: >
          {% set timeobj = as_datetime(as_timestamp(trigger.calendar_event.start, now())) | as_local %}
          {% set time = timeobj.strftime('%H:%M') %}
          {{ trigger.calendar_event.summary | replace(' (appt)', '') }} at {{ time }}
        channel: standard
        throttled: false
        tag: ''
        timeout: 0

# Notify about a home type of calendar event, identified using the tag "(home)" in the event title.
# These are things like a worker coming to the house, or a live stream to be joined. 15 minutes before the event is good.
- alias: Notify Calendar Home Event
  id: 'notify_calendar_home_event'
  mode: queued
  
  trigger:
    - platform: calendar
      event: start
      entity_id: calendar.calendar
      offset: -00:15:00
  
  condition:
    - condition: template
      value_template: "{{ '(home)' in trigger.calendar_event.summary }}"
  
  action:
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Reminder:'
        message: >
          {% set timeobj = as_datetime(as_timestamp(trigger.calendar_event.start, now())) | as_local %}
          {% set time = timeobj.strftime('%H:%M') %}
          {{ trigger.calendar_event.summary | replace(' (home)', '') }} at {{ time }}
        channel: standard
        throttled: false
        tag: ''
        timeout: 0

# Notify about an astronomy type of calendar event, identified using the tag "(astro)" in the event title.
# Processing of these is more complex than the simple appointment and home events above:
#
# - I'm assuming the maximum dark window of 14 hours (about 5 PM to 7 AM), so that's the offset needed for the calendar trigger
# - I'm assuming there will be a maximum of 2 events per day
# - For an event outside the hours of 10 PM to 6 AM, I want a notification 15 minutes prior to the event
# - For an event between 10 PM and 6 AM I want the notification at 10 PM, so I can decide to either stay up or set an alarm
# - Timers need to be set for when the notification should be issued, and the text of the message needs to be saved (up to 2 timers/texts for 2 separate events)
# - The timer expirations are thus additional triggers
- alias: Notify Calendar Astronomy Event
  id: 'notify_calendar_astronomy_event'
  mode: queued
  
  trigger:
    - platform: calendar
      event: start
      entity_id: calendar.calendar
      offset: -14:00:00
      id: event
    
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.calendar_astronomy_notification_1
      id: timer1
    
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.calendar_astronomy_notification_2
      id: timer2
  
  condition:
    - condition: template
      value_template: "{{ (trigger.id == 'event' and '(astro)' in trigger.calendar_event.summary) or 'timer' in trigger.id }}"
  
  action:
    - variables:
        event_hour: >
          {% set timeobj = as_datetime(as_timestamp(trigger.calendar_event.start, now())) | as_local %}
          {{ timeobj.hour }}
    
    - if:
      
        # For the calendar event trigger, save the message text and set a timer to send the notification later.
        - condition: template
          value_template: "{{ trigger.id == 'event' }}"
        
      then:
        - if:
          
            # Handle an event time outside the hours of 10 PM to 6 AM.
            - condition: template
              value_template: "{{ event_hour < 22 or event_hour >= 6 }}"
          
          then:
            - variables:
                text: >
                  {% set timeobj = as_datetime(as_timestamp(trigger.calendar_event.start, now())) | as_local %}
                  {% set time = timeobj.strftime('%H:%M') %}
                  {{ trigger.calendar_event.summary | replace(' (astro)', '') }} at {{ time }}
                
            - if:
                - condition: state
                  entity_id: timer.calendar_astronomy_notification_1
                  state: 'idle'
              
              then:
                - service: input_text.set_value
                  target:
                    entity_id: input_text.calendar_astronomy_notification_message_1
                  data:
                    value: "{{ text }}"
                    
                - service: timer.start
                  data:
                    entity_id: timer.calendar_astronomy_notification_1
                    duration: '13:45:00'
              
              else:
                - service: input_text.set_value
                  target:
                    entity_id: input_text.calendar_astronomy_notification_message_2
                  data:
                    value: "{{ text }}"
                    
                - service: timer.start
                  data:
                    entity_id: timer.calendar_astronomy_notification_2
                    duration: '13:45:00'
          
          # Handle an event time between 10 PM and 6 AM.
          else:
            - variables:
                minutes: "{{ ((as_timestamp(now().replace(hour = 22, minute = 0, second = 0, microsecond = 0)) - as_timestamp(now().replace(microsecond = 0))) / 60) | round }}"
            
            - if:
                - condition: state
                  entity_id: timer.calendar_astronomy_notification_1
                  state: 'idle'
              
              then:
                - service: input_text.set_value
                  target:
                    entity_id: input_text.calendar_astronomy_notification_message_1
                  data:
                    value: "{{ text }}"
                    
                - service: timer.start
                  data:
                    entity_id: timer.calendar_astronomy_notification_1
                    duration: "{{ minutes }}"
              
              else:
                - service: input_text.set_value
                  target:
                    entity_id: input_text.calendar_astronomy_notification_message_2
                  data:
                    value: "{{ text }}"
                  
                - service: timer.start
                  data:
                    entity_id: timer.calendar_astronomy_notification_2
                    duration: "{{ minutes }}"
        
      # For the timer expiration trigger, send the notification.
      else:
        - if:
            condition: template
            value_template: "{{ trigger.id == 'timer1' }}"
          
          then:
            - service: script.send_notification
              data:
                destination:
                  - mobile
                title: 'Reminder:'
                message: "{{ states('input_text.calendar_astronomy_notification_message_1') }}"
                channel: standard
                throttled: false
                tag: ''
                timeout: 0
          
          else:
            - service: script.send_notification
              data:
                destination:
                  - mobile
                title: 'Reminder:'
                message: "{{ states('input_text.calendar_astronomy_notification_message_2') }}"
                channel: standard
                throttled: false
                tag: ''
                timeout: 0

#==============================#
#     Device Notifications     #
#==============================#

# Washer cycle complete
- alias: Notify Washer Done
  id: 'notify_washer_done'
  trigger:
    - platform: state
      entity_id: input_select.washer_state
      from: Rinse Drain
      to: Stop
  action:
    - service: script.send_notification
      data:
        destination:
          - mobile
          - echo
        title: 'Action required:'
        message: 'Washer has finished.'
        channel: temporary
        timeout: 7200
        throttled: false
        media_player_entity: media_player.everywhere
        tag: ''

# Dryer cycle complete
- alias: Notify Dryer Done
  id: 'notify_dryer_done'
  trigger:
    - platform: state
      entity_id: input_boolean.dryer_running
      from: 'on'
      to: 'off'
  action:
    - service: script.send_notification
      data:
        destination:
          - mobile
          - echo
        title: 'Action required:'
        message: 'Dryer has probably finished.'
        channel: temporary
        timeout: 7200
        throttled: false
        media_player_entity: media_player.everywhere
        tag: ''

#================#
#     Hockey     #
#================#

# Next Canes game
- alias: Notify Next Canes Game
  id: 'notify_next_canes_game'
  
  trigger:
    - platform: template
      value_template: >
        {% set next = as_timestamp(state_attr('sensor.next_canes_game', 'gameDate')) %}
        {% set now =  as_timestamp(now()) %}
        {{ (((next - now) / 3600) | round(0)) < 12 }}
  
  action:
    - service: script.send_notification
      data:
        destination:
          - mobile
        title: 'Reminder:'
        message: >
          {% if states('sensor.canes_game_status') == 'Home' %}
            {{ states('sensor.canes_opponent') }} at Hurricanes, {{ states('sensor.next_canes_game') }}
          {% else %}
            Hurricanes at {{ states('sensor.canes_opponent') }}, {{ states('sensor.next_canes_game') }}
          {% endif %}
        channel: standard
        throttled: false
        tag: ''
        timeout: 0
