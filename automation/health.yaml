#===========================#
#     Calories History      #
#===========================#

# Save the monthly calories used to maintain a history for the front end.
- alias: Save Monthly Calories
  id: 'save_monthly_calories'
  
  # Trigger when the total monthly calories sensor changes.
  triggers:
    - trigger: state
      entity_id: sensor.total_monthly_calories
    
  # This should ensure we are actually changing from a valid state, and not just triggering because
  # the current value is 0, and that's it's the first day of the month.
  conditions:
    - "{{ now().day == 1 }}"
    
    - "{{ trigger.from_state and trigger.from_state.state | float(0) > 0.0 }}"
  
  # Determine the previous month using the 'from' state's last changed value.
  variables:
    month: "{{ as_timestamp(trigger.from_state.last_changed) | timestamp_custom('%b') | lower() }}"
  
  actions:
    - action: system_log.write
      data:
        message: "{{ 'calories from state last changed/month: ' ~ trigger.from_state.last_changed ~ ' / ' ~ month }}"
        level: debug
    
    # Set the correct history value using the month variable to complete the target entity ID.
    - action: input_number.set_value
      target:
        entity_id: "input_number.calories_curr_year_{{ month }}"
      data:
        value: "{{ trigger.from_state.state | float(0) }}"
    
    # If we've started a new year (previous month is December), copy the current year's history to the previous year.
    # We only keep two year's worth of history.
    - if:
        - "{{ month == 'dec' }}"
      
      then:
        - variables:
            months:
              - jan
              - feb
              - mar
              - apr
              - may
              - jun
              - jul
              - aug
              - sep
              - oct
              - nov
              - dec
    
        # Repeat for all months.
        - repeat:
            count: 12
            
            sequence:
              
              # Copy the current year value to the previous year for the corresponding month.
              - action: input_number.set_value
                target:
                  entity_id: "input_number.calories_prev_year_{{ months[repeat.index-1] }}"
                data:
                  value: "{{ states('input_number.calories_curr_year_' + months[repeat.index-1]) }}"
              
              # Rest the current year value to zero.
              - action: input_number.set_value
                target:
                  entity_id: "input_number.calories_curr_year_{{ months[repeat.index-1] }}"
                data:
                  value: 0

#==========================#
#     Manual Exercise      #
#==========================#
    
# The companion app on Android keeps a single steps counter that just keeps increasing (yeah, rather useless). We have a utility meter
# that translates this to a daily value, but since this updates many times per day, it's not useful for keeping track of the steps as 
# an exercise metric. So each night, copy the utility meter value to an input number, which then drives the Process Steps Exercise
# automation to manage the exercise metric.
- alias: Copy Daily Steps
  id: copy_daily_steps
  
  triggers:
    - trigger: time
      at: '23:59:00'
  
  actions:
    - action: input_number.set_value
      target:
        entity_id: input_number.steps_daily
      data:
        value: "{{ states('sensor.steps_daily') }}"

# Workout exercise.
- alias: Process Workout Exercise
  id: 'process_workout_exercise'
  
  use_blueprint:
    path: health/process_exercise.yaml
    input:
      exercise_type: workout
      units_entity: input_number.workout_daily_time

# Yard work exercise.
- alias: Process Yard Work Exercise
  id: 'process_yard_work_exercise'
  
  use_blueprint:
    path: health/process_exercise.yaml
    input:
      exercise_type: yard_work
      units_entity: input_number.yard_work_daily_time

# Other exercise.
- alias: Process Other Exercise
  id: 'process_other_exercise'
  
  use_blueprint:
    path: health/process_exercise.yaml
    input:
      exercise_type: other
      units_entity: input_number.other_daily_time

# Steps exercise.
- alias: Process Steps Exercise
  id: 'process_steps_exercise'
  
  use_blueprint:
    path: health/process_exercise.yaml
    input:
      exercise_type: steps
      units_entity: input_number.steps_daily
