# Operate a ceiling fan, loosely based on presence. A sensor entity is used to control the fan, for example 
# an AV system in use.

blueprint:
  name: Operate Ceiling Fan
  description: Operate a ceiling fan, based on an input sensor and temperature value.
  domain: automation
  
  input:
    sensor_entity:
      name: Sensor Entity
      description: Sensor entity on which to trigger.
      selector:
        entity:
    
    sensor_off_state:
      name: Sensor Off State
      description: The sensor state that indicates off. For a binary sensor this is 'off', but for a non-binary sensor it could be, for example, 'PowerOff'.
      selector:
        entity:
    
    temperature_entity:
      name: Temperature Entity
      description: Sensor entity for the current temperature.
      selector:
        entity:
          domain: sensor
    
    fan_entity:
      name: Fan Entity
      description: Fan entity to be operated.
      selector:
        entity:
          domain: fan
    
    thresholds:
      name: Threshold List
      description: List of thresholds for high, medium and low fan speeds.
      selector:
        number:
          min: 0
          max: 100

# The !input tag cannot be used in templates, so assign variables to the necessary inputs.
variables:
  input_sensor_off_state: !input sensor_off_state

# Trigger on any change to the sensor entity.
trigger:
  - platform: state
    entity_id: !input sensor_entity
    to:

# Weed out junk.
condition: "{{ trigger.from_state.state not in ['unavailable', 'unknown'] and trigger.to_state.state not in ['unavailable', 'unknown'] }}"

action:
    
  - choose:
      
    # Sensor turned on.
    - conditions: "{{ trigger.from_state.state == input_sensor_off_state and trigger.to_state.state != input_sensor_off_state }}"
      
      sequence:
            
        # Turn on the fan if the temperature demands it.
        - service: script.turn_on
          entity_id: script.control_fan_for_temperature
          data:
            variables:
              fan_entity_id: !input fan_entity
              temperature_entity_id: !input temperature_entity
              thresholds: !input thresholds
              timeout: 0
      
    # Sensor turned off.
    - conditions: "{{ trigger.from_state.state != input_sensor_off_state and trigger.to_state.state == input_sensor_off_state }}"
        
      # Turn off the fan.
      sequence:
        - service: script.set_fan_to_speed
          data:
            entity_id: !input fan_entity
            speed: 0
