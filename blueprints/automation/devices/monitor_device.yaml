# Monitor a device to ensure it remains powered on.

blueprint:
  name: Monitor Device Power
  description: Monitor a device to ensure it remains powered on.
  domain: automation
  
  input:
    device_entity:
      name: Device Entity
      description: Device entity to be monitored.
      selector:
        entity:
    
    conditional_processing:
      name: Conditional Processing
      description: Flag that must be true in order to proceed. This allows a device's state to be ignored during expected power off periods.
      default: true
      selector:
        boolean:
    
    component_name:
      name: Component Name
      description: Name of the component, so it can be monitored for loading.
    
    device_name:
      name: Device Name
      description: Name of the device, for example "Refrigerator".

# The !input tag cannot be used in templates, so assign variables to the necessary inputs.
variables:
  input_device_entity: !input device_entity
  input_device_name: !input device_name
  input_conditional_processing: !input conditional_processing
  
  message_tag: "{{ input_device_name | lower }}_power_off"
  power_off_tag: "{{ input_device_name | lower }}_power_problem"

# Trigger on any change to the device entity, or when the component is loaded.
trigger:
  - platform: state
    entity_id: !input device_entity
    to:
  
  - platform: event
    event_type: component_loaded
    event_data:
      component: !input component_name

condition: 
  
  # Only continue if the optional conditional processing flag is true.
  - "{{ input_conditional_processing }}"
  
  # Continue if the device is not on. Weed out changing to unavailable or unknown states.
  - "{{ trigger.to_state.state not in ['unavailable', 'unknown'] and not is_state(input_device_entity, 'on') }}"

action:
    
  # Wait a few seconds, then verify that the device is still not on. We don't need to worry about short transients.
  - delay: 5
  
  - condition: "{{ not is_state(input_device_entity, 'on') }}"
  
  # Send a warning notification that the device is being turned on.
  - service: script.send_notification
    data:
      destination:
        - mobile
      title: 'Warning:'
      message: '{{ input_device_name }} off, turning it back on.'
      channel: critical
      throttled: false
      tag: "{{ message_tag }}"
      timeout: 0
          
  # Register the tag.
  - service: script.register_mobile_notification
    data:
      tag: "{{ message_tag }}"
      clear_type: assisted
      title: 'Warning:'
      message: '{{ input_device_name }} off, turning it back on.'
      channel: critical
      timeout: 0
  
  # Turn the device back on.
  - service: homeassistant.turn_on
    target:
      entity_id: !input device_entity
    
  # Wait a bit.
  - delay: '00:01:00'
    
  # If the device turned on, delay a bit before removing the first notification.
  - if:
      - "{{ is_state(input_device_entity, 'on') }}"
    
    then:
      - delay: '00:15:00'
    
    # The device did not turn on, so send a more important one.
    else:
    
      # Send the new notification.
      - service: script.send_notification
        data:
          destination:
            - mobile
          title: 'Warning:'
          message: '{{ input_device_name }} did not turn on.'
          channel: critical
          throttled: false
          tag: "{{ power_off_tag }}"
          timeout: 0
          
      # Register the tag.
      - service: script.register_mobile_notification
        data:
          tag: "{{ power_off_tag }}"
          clear_type: manual
          title: 'Warning:'
          message: '{{ input_device_name }} did not turn on.'
          channel: critical
          timeout: 0

  # Remove the first notification and unregister the tag.
  - service: script.remove_mobile_notification
    data:
      tag: "{{ message_tag }}"
