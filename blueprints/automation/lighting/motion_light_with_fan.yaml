# Control a motion-activated light and fan in a bathroom.

blueprint:
  name: Motion-activated Bathroom Light
  description: Control a bathroom light when motion is detected, with delays based on fan usage.
  domain: automation
  
  input:
    motion_entity:
      name: Motion Sensor Entity
      description: The motion sensor that controls the light.
      selector:
        entity:
          domain: binary_sensor
          device_class: motion
    
    light_entity:
      name: Light Entity
      description: The target light to be controlled.
      selector:
        entity:
          domain: light
    
    fan_entity:
      name: Fan Entity
      description: The bathroom fan that determines the turn off wait time.
      selector:
        entity:
          domain: switch
    
    no_motion_wait_fan_off:
      name: Fan Off Delay Time
      description: Time to leave the light on after last motion is detected, when the fan is off.
      default: 120
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds
    
    no_motion_wait_fan_on:
      name: Fan On Delay Time
      description: Time to leave the light on after last motion is detected, when the fan is on.
      default: 300
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds
    
    additional_fan_wait:
      name: Fan Turn Off Time
      description: Time to leave the fan on after the light is turned off.
      default: 300
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds
    
    lux_entity:
      description: (Optional) The ambient light level sensor entity.
      default: {}
      selector:
        entity:
          domain: sensor
    
    min_lux_value:
      description: (Optional) The minimum ambient light level sensor value.
      default: 0

# If motion is detected within a delay, we restart.
mode: restart
max_exceeded: silent

# The !input tag cannot be used in templates, so assign variables to the necessary inputs.
variables:
  input_lux_entity: !input lux_entity

triggers:
  - trigger: state
    entity_id: !input motion_entity
    from: "off"
    to: "on"

actions:

  # If no ambient light sensor was input, always turn on the light.
  - if:
      - "{{ iif(input_lux_entity, false, true) }}"
      
    then:
      - action: light.turn_on
        entity_id: !input light_entity
    
    # Turn on the light based on the ambient light sensor.
    else:
      - action: script.turn_on_lights_per_conditions
        data:
          light_entity: !input light_entity
          lux_entity: !input lux_entity
          min_lux_value: !input min_lux_value
  
  # Wait for no motion detected.
  - wait_for_trigger:
      - trigger: state
        entity_id: !input motion_entity
        from: "on"
        to: "off"
  
  # Turn off the light (and fan) based on fan usage.
  - if:
    
      # The fan is on.
      - condition: state
        entity_id: !input fan_entity
        state: 'on'
      
    then:
      - delay: !input no_motion_wait_fan_on
        
      - action: light.turn_off
        entity_id: !input light_entity
        
      - delay: !input additional_fan_wait
        
      - action: homeassistant.turn_off
        entity_id: !input fan_entity
    
    # The fan is off.
    else:
      - delay: !input no_motion_wait_fan_off
      
      - action: light.turn_off
        entity_id: !input light_entity
