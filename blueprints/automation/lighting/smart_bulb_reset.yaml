# Reset a smart bulb to the off state. This is to cover a power outage, where such
# bulbs (at least Kasa) turn on when power is restored.

blueprint:
  name: Smart Bulb Reset
  description: Turn off a smart bulb occasionally.
  domain: automation
  
  input:
    light_entity:
      name: Light Entity
      description: Light bulb to be reset.
      selector:
        entity:
    
    reset_condition:
      name: Reset Condition
      description: The condition(s) that determine if the bulb needs to be reset.
      selector:
        select:
          options:
            - Sky Conditions
            - Nighttime
            - Lux Sensor
    
    lux_entity:
      name: Lux Entity
      description: Lux entity to be used when the reset condition is Lux Sensor.
      selector:
        entity:
          domain: sensor
    
    lux_value:
      name: Lux Value
      description: Lux entity value to be used when the reset condition is Lux Sensor.
      selector:
        number:
          min: 100
          max: 300

# The !input tag cannot be used in templates, so assign variables to the necessary inputs.
variables:
  input_reset_condition: !input reset_condition

# Trigger occasionally based on a simple time pattern.
trigger:
  - platform: time_pattern
    minutes: '/5'

action:
  - choose:
    
    # Use sky conditions to determine if reset should be performed.
    - conditions:      
      - condition: template
        value_template: "{{ input_reset_condition == 'Sky Conditions' }}"
      sequence:
        
        # Evaluate the weather condition and set the result in an input_select.
        - service: script.evaluate_weather_condition
        
        # Use the evaluated weather conditions and sun elevation.
        - condition: template
          value_template: >
            {{ (state_attr('sun.sun', 'elevation') > (states('input_number.min_elevation') | float(3)) and
                states('input_select.weather_condition') == 'clear') or
               (state_attr('sun.sun', 'elevation') > (states('input_number.med_elevation') | float(6)) and
                states('input_select.weather_condition') == 'hazy') or
                state_attr('sun.sun', 'elevation') > (states('input_number.max_elevation') | float(9)) }}
        
        - service: homeassistant.turn_off
          entity_id: !input light_entity
      
    # Use various sleep/wake modes to determine if reset should be performed.
    - conditions:
      - condition: template
        value_template: "{{ input_reset_condition == 'Nighttime' }}"
      sequence:
        
        # Perform the reset if nighttime mode is off, or sleeptime mode is on and the bathroom flag is off. 
        # This disables the reset during the time I'm in bed reading, or using the bathroom.
        - condition: or
          conditions:
            - condition: state
              entity_id: input_boolean.nighttime
              state: 'off'
            - condition: and
              conditions:
                - condition: state
                  entity_id: input_boolean.sleeptime
                  state: 'on'
                - condition: state
                  entity_id: input_boolean.bathroom
                  state: 'off'
        
        - service: homeassistant.turn_off
          entity_id: !input light_entity
      
    # Use a sensor lux level to determine if reset should be performed.
    - conditions:
      - condition: template
        value_template: "{{ input_reset_condition == 'Lux Sensor' }}"
      sequence:
        
        - condition: numeric_state
          entity_id: !input lux_entity
          above: !input lux_value
        
        - service: homeassistant.turn_off
          entity_id: !input light_entity
    
    # Invalid type, log it.
    default:
      - service: system_log.write
        data:
          message: "Invalid reset condition type {{ input_reset_condition }} specified"
          level: error
