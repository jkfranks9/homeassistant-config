# Change the state of lighting near sunset, according to weather conditions, which affect indoor
# light levels. This calls a script to do the work, and is used only as a trigger for different 
# sun elevations.
#
# For example:
#   Check at 9 degrees above the horizon ... light not changed because it's clear and therefore light enough indoors
#   Chect at 6 degrees above the horizon ... light changed because now it's cloudy and therefore gloomy indoors

blueprint:
  name: Weather Based Light At Sunset
  description: Change lighting state near sunset based on weather conditions.
  domain: automation
  
  input:
    elevation:
      name: Sun Elevation
      description: The sun elevation angle on which to trigger.
      selector:
        number:
          min: 3.0
          max: 9.01
          mode: slider
    
    light_entity:
      name: Light Entity
      description: Light or group to be changed.
      selector:
        entity:

# The !input tag cannot be used in templates, so assign variables to the necessary inputs.
variables:
  input_elevation: !input elevation

# Trigger when the sun elevation changes below the given threshold.
# Also trigger on Home Assistant start, to cover the case where the elevation threshold crossing occurs during a restart.
trigger:
  - platform: numeric_state
    entity_id: sun.sun
    attribute: elevation
    below: !input elevation
  
  - platform: homeassistant
    event: start
    id: 'ha_start'

# Continue only if the sun is setting, we're not in a nighttime situation, and I'm home.
# The first condition covers the case where the elevation threshold crossing occurs during a restart.
condition:
  - condition: numeric_state
    entity_id: sun.sun
    attribute: elevation
    below: !input elevation
  
  - "{{ state_attr('sun.sun', 'rising') == false }}"
  
  - condition: state
    entity_id: input_boolean.nighttime
    state: 'off'
  
  - condition: state
    entity_id: person.jon
    state: 'home'

# Call the script with the given light/group entity.
action:
  - delay: 
      seconds: "{{ range(2, 15) | random }}"

  - if:
    
      # Triggered for Home Assistant start. We only want to call the script for one of the possible
      # input elevation values: the one closest to, but not above, the actual sun elevation. For example,
      # if the sun elevation is between the max and medium values, we want to use the medium value.
      - condition: trigger
        id: 'ha_start'
    
    then:
        
      - variables:
          sun_elevation: "{{ state_attr('sun.sun', 'elevation') }}"
          min_elevation: "{{ state_attr('sensor.variables', 'variables').min_elevation }}"
          med_elevation: "{{ state_attr('sensor.variables', 'variables').med_elevation }}"
          max_elevation: "{{ state_attr('sensor.variables', 'variables').max_elevation }}"
        
      # Pick one invocation on which to take action. Each stanza below corresponds to one of the
      # possible input elevations. The second condition in each stanza (or only one for the default)
      # ensures that we only take action when the chosen stanza elevation matches the one with
      # which we're called. I'm sure there's an easier way to do this :(
      - choose:
          
        # Use the maximum elevation value.
        - conditions:
          - "{{ sun_elevation | float(0) > max_elevation | float(max_elevation) }}"          
          - "{{ input_elevation == max_elevation | float(max_elevation) }}"
          
          sequence:
            - service: script.change_lighting_per_weather
              data:
                light_entity: !input light_entity
                wakeup: false
          
        # Use the medium elevation value.
        - conditions:
          - "{{ sun_elevation | float(0) > med_elevation | float(med_elevation) }}"          
          - "{{ input_elevation == med_elevation | float(med_elevation) }}"
          
          sequence:
            - service: script.change_lighting_per_weather
              data:
                light_entity: !input light_entity
                wakeup: false
          
        # Use the minimum elevation value by default.
        default:
          - condition: "{{ input_elevation == min_elevation | float(min_elevation) }}"
          
          - service: script.change_lighting_per_weather
            data:
              light_entity: !input light_entity
              wakeup: false
    
    # Triggered for normal elevation threshold crossing.
    else:
      - service: script.change_lighting_per_weather
        data:
          light_entity: !input light_entity
          wakeup: false
