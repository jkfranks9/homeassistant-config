# Process a workout for simple exercise types.

blueprint:
  name: Process Exercise
  description: Calculate calories and perform other tasks for simple exercises.
  domain: automation
  
  input:
    exercise_type:
      name: Exercise Type
      description: Type of exercise performed.
      selector:
        select:
          options:
            - workout
            - yard_work
            - steps
    
    units_entity:
      name: Units Entity
      description: Entity that contains the units spent on the exercise (time in minutes or number of steps).
      selector:
        entity:
          domain: input_number

# The !input tag cannot be used in templates, so assign variables to any needed inputs.
variables:
  input_exercise_type: !input exercise_type
  input_units_entity: !input units_entity
  
  valid: "{{ input_exercise_type in ['workout', 'yard_work', 'steps'] }}"
  daily_calories_entity: "{{ 'input_number.' ~ input_exercise_type ~ '_daily_calories' }}"
  workout_calories_per_unit: "{{ state_attr('sensor.variables', 'variables').workout_calories_per_hour }}"
  yard_work_calories_per_unit: "{{ state_attr('sensor.variables', 'variables').yard_work_calories_per_hour }}"
  steps_calories_per_unit: "{{ state_attr('sensor.variables', 'variables').steps_calories_per_thousand }}"
  calories_per_unit: >
    {% if input_exercise_type == 'workout' %}
      {{ workout_calories_per_unit }}
    {% elif input_exercise_type == 'yard_work' %}
      {{ yard_work_calories_per_unit }}
    {% elif input_exercise_type == 'steps' %}
      {{ steps_calories_per_unit }}
    {% endif %}
  units_divisor: "{{ iif(input_exercise_type in ['workout', 'yard_work'], 60, 1000) }}"

# Trigger when the units entity is updated.
trigger:
  - platform: state
    entity_id: !input units_entity
  
# Don't do anything if the units entity was reset to 0, as happens in the Perform Daily Chores automation.
condition: "{{ trigger.to_state.state | int(0) > 0 }}"

action:
    
  # Continue if we have a valid input.
  - if:
      - "{{ valid }}"
      
    then:
  
      # Calculate the calories.
      - service: input_number.set_value
        target:
          entity_id: "{{ daily_calories_entity }}"
        data:
          value: "{{ ((states(input_units_entity) | int(0) / units_divisor) * calories_per_unit) | int(0) }}"

      # Register weekly and monthly exercise metrics.
      - service: script.register_exercise_metrics
        data:
          exercise_type: "{{ input_exercise_type }}"
        
      # Indicate that we exercised today.
      - if:
          - "{{ input_exercise_type != 'steps' }}"
        
        # Unconditionally turn on the current day for all types except steps.
        then:      
          - service: script.modify_current_exercise_day
            data:
              exercise_types: [ "{{ input_exercise_type }}" ]
              operation: true
        
        # For steps, we only count days where we've reached the daily goal.
        else:
          - if:
              - "{{ states(input_units_entity) | int(0) >= state_attr('sensor.variables', 'variables').steps_daily_goal | int(0) }}"
            
            then:      
              - service: script.modify_current_exercise_day
                data:
                  exercise_types: [ "{{ input_exercise_type }}" ]
                  operation: true
    
    # Invalid exercise type, log it.
    else:
      - service: system_log.write
        data:
          message: "Invalid input exercise type {{ input_exercise_type }} specified"
          level: error
