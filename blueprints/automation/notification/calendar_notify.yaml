# Notify for tagged calendar entries.

blueprint:
  name: Calendar Notification
  description: Notify for calendar entries.
  domain: automation
  
  input:
    offset:
      name: Offset
      description: Offset before the calendar entry when the notification should be sent.
      selector:
        time:
    
    calendar_tag:
      name: Calendar Tag
      description: Tag that identifies the type of calendar entry. For an appointment (appt) the one-way driving time can optionally be specified.
      selector:
        select:
          options:
            - (appt)
            - (appt:nn)
            - (home)
    
    title:
      name: Title
      description: (Optional) Title for the notification.
      default: action
      selector:
        select:
          options:
            - action
            - attention
            - warning
    
    message:
      name: Notification Message
      description: Message to be issued.
    
    channel:
      name: Channel
      description: The notification channel.
    
    timeout:
      name: Timeout
      description: (Optional) Timeout in seconds when the notification should be removed, if the channel is temporary.
      default: 0
    
    tag:
      name: Notification Tag
      description: The tag for the notification.

# Allow for multiple simultaneous changes. Might be unnecessary, but it doesn't hurt.
mode: queued

# The !input tag cannot be used in templates, so assign variables to any needed inputs.
variables:
  input_calendar_tag: !input calendar_tag
  input_title: !input title
  
  title_text: "{{ iif(input_title == 'action', 'Action required:', iif(input_title == 'attention', 'Attention:', 'Warning:')) }}"

trigger:
  
  # Trigger at the designated offset before the event start.
  - platform: calendar
    event: start
    entity_id: calendar.calendar
    offset: !input offset

# Ensure the event contains the calendar tag.
condition: "{{ input_calendar_tag in trigger.calendar_event.summary }}"

action:
      
  # Register the tag.
  - service: script.register_mobile_notification
    data:
      tag: !input tag
      clear_type: assisted
      title: "{{ title_text }}"
      message: !input message
      channel: !input channel
      timeout: !input timeout
  
  # Send the notification.
  - service: script.send_notification
    data:
      destination:
        - mobile
        - echo
      title: "{{ title_text }}"
      message: !input message
      channel: !input channel
      timeout: !input timeout
      throttled: false
      media_player_entity: media_player.everywhere
      tag: !input tag
