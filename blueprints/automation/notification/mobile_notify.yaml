blueprint:
  name: Mobile Notification
  
  description: >
    Send notifications to a mobile device and optionally voice assistant devices.
    
    Several different types of triggers are supported:
    
    1) State: trigger on a change of state, using from_state and to_state inputs on the input entity.
    
    2) Numeric state: trigger on a numeric state going above or below a threshold, using the various numeric inputs on the input entity:
       - trigger_type indicates to trigger above or below a threshold
       - numeric_notify_threshold indicates the threshold for sending the notification
       - numeric_notify_template provides a template to use instead of the entity state
       - numeric_clear_threshold indicates the threshold for automtically clearing the notification, if enable_clear_trigger is true
       - numeric_clear_template provides a template to use instead of the entity state
    
    3) Time: trigger on time, using the time_of_day input.
    
    4) Event: trigger on an event, using the event_type and optionally event_data inputs.
    
    5) Template: trigger on the template input.
    
    6) Calendar: trigger on a tagged calendar entry, using the calendar_offset and calendar_tag inputs.
    
    7) Leapfrog: trigger using the current_value_entity and due_value_entity inputs, where once the action is performed for which
       the notification was sent, the threshold entity changes. For example:
       - We have a truck mileage entity and a truck service due entity, such as: mileage = 240042, due = 240000
       - We want to send the notification at this point to get the truck serviced.
       - Once that happens the due entity gets changed for the next service interval (for example 5000).
       - Assuming a few miles added to/from the shop, the new values are: mileage = 240055, due = 245000
       - So now we want to clear the notification, but we're triggering on the due entity instead of the mileage entity, hence the leapfrog in the name.
        
    Input notes:
    
    - The delay input is intended to only be used with conditions, and indicates how long to delay before checking the conditions.
    - The conditions input provides one or more conditions that must be true in order to proceed.
    - The extract_tag_type input is a special case. It's only used for automations that provide a list of entities on which to trigger. Since the
      triggered entity is not known until run time, we need to dynamically extract the tag then.
  
  domain: automation
  
  input:
    trigger_type:
      name: Trigger Type
      description: Type of trigger(s) that should be enabled.
      default: 'state'
      selector:
        select:
          options:
            - state
            - numeric_state_above
            - numeric_state_below
            - time
            - event
            - template
            - calendar
            - leapfrog
    
    entity:
      name: Entity
      description: (Optional) Entity to be checked.
      default: {}
      selector:
        entity:
    
    from_state:
      name: From State
      description: (Optional) The from state for the notify trigger. This is the to state for the clear trigger if it's enabled.
      default: ''
    
    to_state:
      name: To State
      description: (Optional) The to state for the notify trigger. This is the from state for the clear trigger if it's enabled.
      default: ''
    
    numeric_notify_threshold:
      name: Trigger Threshold Value
      description: (Optional) Threshold value to trigger the notification.
      default: -1
      selector:
        number:
          min: -1
          max: 3000
          
    numeric_notify_template:
      name: Trigger Template
      description: (Optional) Template to be evaluated instead of the entity state for the notification trigger. The default is the entity state.
      default: "{{ state.state }}"
          
    numeric_clear_threshold:
      name: Clear Threshold Value
      description: (Optional) Threshold value to clear the notification.
      default: -1
      selector:
        number:
          min: -1
          max: 3000
          
    numeric_clear_template:
      name: Clear Template
      description: (Optional) Template to be evaluated instead of the entity state for the clear trigger. The default is the entity state.
      default: "{{ state.state }}"
    
    time_of_day:
      name: Time Of Day
      description: (Optional) Time of day at which to trigger.
      default: 'sensor.mobile_notify_time_default'
      selector:
        time:
    
    event_type:
      name: Event Type
      description: (Optional) The type of the event.
      default: 'NotifyDefaultEvent'
          
    event_data:
      name: Event Data
      description: (Optional) Dictionary of data for the event.
      default: {}
      selector:
        object:
    
    template:
      name: Template
      description: (Optional) Template to be checked.
      default: "{{ 1 == 2 }}"
      selector:
        template:
          
    calendar_offset:
      name: Calendar Offset
      description: (Optional) Offset before the calendar entry when the notification should be sent.
      default: '00:00:00'
      selector:
        time:
    
    calendar_tag:
      name: Calendar Tag
      description: (Optional) Tag that identifies the type of calendar entry. For an appointment (appt) the one-way driving time can optionally be specified.
      default: ''
      selector:
        select:
          options:
            - (appt)
            - (appt:nn)
            - (home)
    
    current_value_entity:
      name: Current Value Entity
      description: (Optional) Entity that contains the current value.
      default: 'sensor.mobile_notify_time_default'
      selector:
        entity:
          
    due_value_entity:
      name: Due Value Entity
      description: (Optional) Entity that contains the due value.
      default: 'sensor.mobile_notify_time_default'
      selector:
        entity:
    
    delay:
      name: Delay
      description: (Optional) How long in seconds to delay before checking the conditions.
      default: 0
    
    conditions:
      name: Conditions
      description: (Optional) Conditions that must be true to execute.
      default: "{{ 1 == 1 }}"
      selector:
        condition:
    
    enable_clear_trigger:
      name: Enable Clear Trigger
      description: (Optional) Whether or not the trigger to clear the notification is enabled. Use false if no automated clear event is expected.
      default: false
      selector:
        boolean:
    
    enable_voice_assistant_destination:
      name: Enable Voice Assistant Destination
      description: (Optional) Whether or not to send the notification to all rooms containing voice assistant devices.
      default: false
      selector:
        boolean:
    
    extract_tag_type:
      name: Extract Tag Type
      description: (Optional) Extract the tag for this type from the triggered entity; the input tag is not used.
      default: ''
      selector:
        select:
          options:
            - delivery
    
    clear_type:
      name: Clear Type
      description: How the tag can be cleared.
      selector:
        select:
          options:
            - auto
            - assisted
            - manual
    
    title:
      name: Title
      description: (Optional) Title for the notification.
      default: action
      selector:
        select:
          options:
            - action
            - attention
            - warning
    
    message:
      name: Notification Message
      description: Message to be issued.
    
    channel:
      name: Channel
      description: The notification channel.
    
    timeout:
      name: Timeout
      description: (Optional) Timeout in seconds when the notification should be removed, if the channel is temporary.
      default: 0
    
    tag:
      name: Notification Tag
      description: (Optional) The tag for the notification. Required unless extract_tag_type is specified.
      default: ''

# Allow for multiple simultaneous changes. Might be unnecessary, but it doesn't hurt.
mode: queued

# Trigger variables. These are assigned when the automation is saved, and allow us to only enable the required triggers.
trigger_variables:
  tv_trigger_type: !input trigger_type
  tv_enable_clear_trigger: !input enable_clear_trigger

# The !input tag cannot be used in templates, so assign variables to any needed inputs.
variables:
  input_calendar_tag: !input calendar_tag
  input_enable_voice_assistant_destination: !input enable_voice_assistant_destination
  input_extract_tag_type: !input extract_tag_type
  input_clear_type: !input clear_type
  input_title: !input title
  input_message: !input message
  input_channel: !input channel
  input_timeout: !input timeout
  input_tag: !input tag
  
  title_text: "{{ iif(input_title == 'action', 'Action required:', iif(input_title == 'attention', 'Attention:', 'Warning:')) }}"

trigger:
  
  # State trigger: notify
  - platform: state
    entity_id: !input entity
    from: !input from_state
    to: !input to_state
    enabled: "{{ tv_trigger_type == 'state' }}"
    id: state_notify
  
  # State trigger: clear
  - platform: state
    entity_id: !input entity
    from: !input to_state
    to: !input from_state
    enabled: "{{ tv_trigger_type == 'state' and tv_enable_clear_trigger == true }}"
    id: state_clear
  
  #----------------------------------------------------
  
  # Numeric state trigger (above): notify
  - platform: numeric_state
    entity_id: !input entity
    value_template: !input numeric_notify_template
    above: !input numeric_notify_threshold
    enabled: "{{ tv_trigger_type == 'numeric_state_above' }}"
    id: numeric_above_notify
  
  # Numeric state trigger (above): clear
  - platform: numeric_state
    entity_id: !input entity
    value_template: !input numeric_clear_template
    below: !input numeric_clear_threshold
    enabled: "{{ tv_trigger_type == 'numeric_state_above' and tv_enable_clear_trigger == true }}"
    id: numeric_above_clear
  
  #----------------------------------------------------
  
  # Numeric state trigger (below): notify
  - platform: numeric_state
    entity_id: !input entity
    value_template: !input numeric_notify_template
    below: !input numeric_notify_threshold
    enabled: "{{ tv_trigger_type == 'numeric_state_below' }}"
    id: numeric_below_notify
  
  # Numeric state trigger (below): clear
  - platform: numeric_state
    entity_id: !input entity
    value_template: !input numeric_clear_template
    above: !input numeric_clear_threshold
    enabled: "{{ tv_trigger_type == 'numeric_state_below' and tv_enable_clear_trigger == true }}"
    id: numeric_below_clear
  
  #----------------------------------------------------
  
  # Time trigger: notify
  - platform: time
    at: !input time_of_day
    enabled: "{{ tv_trigger_type == 'time' }}"
    id: time_notify
  
  #----------------------------------------------------
  
  # Event trigger: notify
  - platform: event
    event_type: !input event_type
    event_data: !input event_data
    enabled: "{{ tv_trigger_type == 'event' }}"
    id: event_notify
  
  #----------------------------------------------------
  
  # Template trigger: notify
  - platform: template
    value_template: !input template
    enabled: "{{ tv_trigger_type == 'template' }}"
    id: template_notify
  
  #----------------------------------------------------
  
  # Calendar trigger: notify
  - platform: calendar
    event: start
    entity_id: calendar.calendar
    offset: !input calendar_offset
    enabled: "{{ tv_trigger_type == 'calendar' }}"
    id: calendar_notify
  
  #----------------------------------------------------
  
  # Leapfrog trigger: notify
  - platform: numeric_state
    entity_id: !input current_value_entity
    above: !input due_value_entity
    enabled: "{{ tv_trigger_type == 'leapfrog' }}"
    id: leapfrog_notify
  
  # Leapfrog trigger: clear
  - platform: numeric_state
    entity_id: !input due_value_entity
    above: !input current_value_entity
    enabled: "{{ tv_trigger_type == 'leapfrog' and tv_enable_clear_trigger == true }}"
    id: leapfrog_clear

condition: 
  
  # Weed out junk for triggers that contain states.
  - "{{ trigger.from_state.state not in ['unknown', 'unavailable'] if trigger.from_state is defined else true }}"
  
  # Ensure the event contains the calendar tag for a calendar trigger.
  - "{{ input_calendar_tag in trigger.calendar_event.summary if tv_trigger_type == 'calendar' else true }}"

action:
  
  # Delay before checking the input conditions.
  - delay: !input delay
  
  # Ensure the input conditions are met.
  - if: !input conditions
    
    then:
  
      # Extract the tag from the entity if requested.
      - if:
          - "{{ input_extract_tag_type | length > 0 }}"
        
        then:
          - action: script.extract_notification_tag_from_entity
            data:
              entity: "{{ trigger.from_state.entity_id }}"
              type: "{{ input_extract_tag_type }}"
            response_variable: result
      
      - variables:
          
          # This is either the extracted or input tag.
          tag: >
            {% if input_extract_tag_type | length > 0 %}
              {{ result.tag }}
            {% else %}
              {{ input_tag }}
            {% endif %}
      
      # Notification trigger.
      - if:
          - "{{ 'clear' not in trigger.id }}"
        
        then:
            
          - variables:
              destination: "{{ iif(input_enable_voice_assistant_destination, ['mobile', 'voice_assistant'], ['mobile']) }}"
              message: !input message
              tag_registry_value: "{{ {'tag': tag, 'clear_type': input_clear_type, 'title': title_text, 'message': input_message, 'channel': input_channel, 'timeout': input_timeout} }}"
              notification_data: >
                {% set vars = {'destination': destination, 'title': title_text, 'message': input_message, 'channel': input_channel, 'timeout': input_timeout} %}
                {% if input_enable_voice_assistant_destination %}
                  {% set additional = {'room': ['everywhere'], 'voice_type': 'announce', 'tag': tag} %}
                {% else %}
                  {% set additional = {'tag': tag} %}
                {% endif %}
                
                {{ dict(vars, **additional) }}
              
          # Register the tag.
          - action: script.register_mobile_notification
            data: "{{ tag_registry_value }}"
          
          # Send the notification.
          - action: script.send_notification
            data: "{{ notification_data }}"
        
        # Clear trigger.
        else:
        
          # Remove the notification and unregister the tag.
          - action: script.remove_mobile_notification
            data:
              tag: "{{ tag }}"
