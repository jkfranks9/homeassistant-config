# Notify based on time, with a set of conditions.

blueprint:
  name: Time Notification
  description: Notify based on time.
  domain: automation
  
  input:
    time_of_day:
      name: Time Of Day
      description: Time of day at which to trigger.
      selector:
        time:
    
    conditions:
      name: Conditions
      description: (Optional) Conditions that must be true to execute.
      default: "{{ 1 == 1 }}"
      selector:
        condition:
    
    timer_entity:
      name: Timer Entity
      description: (Optional) Timer entity associated with the notification, used for throttling. If not specified then no throttling is done.
      default: {}
      selector:
        entity:
          domain: timer
    
    clear_type:
      name: Clear Type
      description: How the tag can be cleared.
      selector:
        select:
          options:
            - auto
            - assisted
            - manual
            - dual
    
    title:
      name: Title
      description: (Optional) Title for the notification.
      default: action
      selector:
        select:
          options:
            - action
            - attention
            - warning
    
    message:
      name: Notification Message
      description: Message to be issued.
    
    channel:
      name: Channel
      description: The notification channel.
    
    timeout:
      name: Timeout
      description: (Optional) Timeout in seconds when the notification should be removed, if the channel is temporary.
      default: 0
    
    tag:
      name: Notification Tag
      description: The tag for the notification.

# Allow for multiple simultaneous changes. Might be unnecessary, but it doesn't hurt.
mode: queued

# The !input tag cannot be used in templates, so assign variables to any needed inputs.
variables:
  input_timer_entity: !input timer_entity
  input_clear_type: !input clear_type
  input_title: !input title
  input_message: !input message
  input_channel: !input channel
  input_timeout: !input timeout
  input_tag: !input tag
  
  title_text: "{{ iif(input_title == 'action', 'Action required:', iif(input_title == 'attention', 'Attention:', 'Warning:')) }}"

trigger:
  
  # Trigger at the designated time.
  - platform: time
    at: !input time_of_day

action:
  
  # Ensure the input conditions are met.
  - if: !input conditions
    
    then:
      - variables:
          throttle: "{{ iif(input_timer_entity, true, false) }}"
          tag_registry_value: >
            {% set ns = namespace(val = {'tag': input_tag, 'clear_type': input_clear_type, 'title': title_text, 'message': input_message, 'channel': input_channel, 'timeout': input_timeout} )  %}
            {% if input_timer_entity | length > 0 %}
              {% set timer = {'timer_entity': input_timer_entity} %}
              {{ dict(ns.val, **timer) }}
            {% else %}
              {{ ns.val }}
            {% endif %}
      
      # Send the notification.
      - service: script.send_notification
        data:
          destination:
            - mobile
          title: "{{ title_text }}"
          message: !input message
          channel: !input channel
          timeout: !input timeout
          throttled: "{{ throttle }}"
          timer_entity: !input timer_entity
          tag: !input tag
          
      # Register the tag.
      - service: script.register_mobile_notification
        data: "{{ tag_registry_value }}"
