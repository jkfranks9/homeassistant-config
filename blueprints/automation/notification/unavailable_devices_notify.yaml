# Notify when a device becomes unavailable, or available after previously being unavailable.

blueprint:
  name: Unavailable Device Notification
  description: Notify when a device becomes unavailable, or available again.
  domain: automation
  
  input:
    current_sensor_entity:
      name: Current Sensor Entity
      description: Device current unavailable sensor entity.
      selector:
        entity:
          domain: sensor

mode: queued
  
trace:
  stored_traces: 20

variables:
  
  # The !input tag cannot be used in templates, so assign variables to the necessary inputs.
  input_current_sensor_entity: !input current_sensor_entity
  
  # Current unavailable devices.
  curr_device_list: "{{ state_attr(input_current_sensor_entity, 'device_list') }}"
  curr_unavail_devices: "{{ states(input_current_sensor_entity) | int(0) }}"
  curr_devices_str: "Device{% if curr_unavail_devices > 1 %}s{% endif %}"
  
  # Previous unavailable devices.
  prev_unavail_entity: "{{ input_current_sensor_entity | replace('current', 'previous') }}"
  prev_device_list: "{{ state_attr(prev_unavail_entity, 'device_list') }}"
  prev_unavail_devices: "{{ states(prev_unavail_entity) | int(0) }}"
  
  # Device type.
  device_type_friendly: "{{ state_attr(input_current_sensor_entity, 'friendly_name').split(' ')[1] }}"
  device_type_lower: "{{ device_type_friendly | lower }}"
  
  # Static titles and IDs.
  unavail_title: "{{ device_type_friendly ~ ' ' ~ curr_devices_str ~ ' Unavailable:' }}"
  restored_title: "{{ device_type_friendly  ~ ' Device Restored:' }}"
  unavail_id: "{{ device_type_lower ~ '_device_unavail' }}"
  restored_id: "{{ device_type_lower ~ '_device_restored_' ~ as_timestamp(now()) | int(0) }}"
  
  # Trigger on any state change to the unavailable devices sensor.
  # NOTE: I'm assuming that the device list can't change while the state stays the same. In other words a single device can't
  # become available at the same time another device becomes unavailable.
trigger:
  - platform: state
    entity_id: !input current_sensor_entity
    from:
  
condition:
    
  # Ignore any change to or from unavailable state.
  - condition: template
    value_template: "{{ trigger.from_state.state != 'unavailable' and trigger.to_state.state != 'unavailable' }}"
    
  # Ensure the state matches the number of devices in the list. Just call me paranoid.
  - condition: template
    value_template: "{{ trigger.to_state.state | int(0) == curr_device_list | count }}"
    
  # Ignore spurious nonsense during HA startup.
  - condition: state
    entity_id: input_boolean.device_initialization_catch_22
    state: 'off'
  
action:
    
  # DEBUG messages
  - service: system_log.write
    data:
      message: "From state: {{ trigger.from_state }}"
      level: info    
  - service: system_log.write
    data:
      message: "To state: {{ trigger.to_state }}"
      level: info
  # DEBUG messages
    
  - choose:
      
    # Devices have become unavailable, and none were previously unavailable.
    - conditions: "{{ trigger.from_state.state | int(0) == 0 }}"
      
      sequence:
          
        # Issue the unavailable devices notification.
        - service: script.send_notification
          data:
            destination:
              - persistent
            title: "{{ unavail_title }}"
            notification_id: "{{ unavail_id }}"
            message: |
              {% for device in curr_device_list %}
                {{ device }}{% if not loop.last %},{% endif %}
              {% endfor %}
          
        # Process all unavailable devices.
        - repeat:
            count: "{{ curr_unavail_devices }}"
            sequence:
          
              - variables:
                  device_name: "{{ curr_device_list[repeat.index - 1] }}"
                  timestamp_entity: "{{ 'input_number.' ~ (device_name | replace(' ', '_') | lower) }}"
                
              # Save the timestamp for the device. This causes the device to be added to the previous unavailable devices sensor.
              - service: input_number.set_value
                target:
                  entity_id: "{{ timestamp_entity }}"
                data:
                  value: "{{ as_timestamp(now()) }}"
        
    # Devices have become available, and none are still unavailable.
    - conditions: "{{ trigger.to_state.state | int(0) == 0 }}"
      
      sequence:
          
        # Remove the unavailable devices notification.
        - service: persistent_notification.dismiss
          data:
            notification_id: "{{ unavail_id }}"
          
        # Process all previously unavailable devices.
        - repeat:
            count: "{{ prev_unavail_devices }}"
            sequence:
                
              - variables:
                  device_name: "{{ prev_device_list[repeat.index - 1] }}"
                  timestamp_entity: "{{ 'input_number.' ~ (device_name | replace(' ', '_') | lower) }}"
                  from_time: "{{ states(timestamp_entity) | int(0) | timestamp_custom('%b %d %X') }}"
                  to_time: "{{ as_timestamp(now()) | timestamp_custom('%b %d %X') }}"
                  total_friendly: >
                    {% from 'friendly_strings.jinja' import format_duration %}
                    {{ format_duration(states(timestamp_entity) | float(0)) }}
              
              # Issue the restored device notification.
              - service: script.send_notification
                data:
                  destination:
                    - persistent
                  title: "{{ restored_title }}"
                  notification_id: "{{ device_type_lower ~ '_device_restored_' ~ as_timestamp(now()) | int(0) }}"
                  message: "{{ device_name ~ ' restored: (' ~ from_time ~ ' - ' ~ to_time ~ '), ' ~ total_friendly }}"
              
              # Remove the timestamp for the device.
              - service: input_number.set_value
                target:
                  entity_id: "{{ timestamp_entity }}"
                data:
                  value: 0
        
    # Devices have become unavailable, and some were previously unavailable.
    - conditions: "{{ trigger.to_state.state | int(0) > trigger.from_state.state | int(0) }}"
      
      sequence:
          
        # Issue the unavailable devices notification.
        - service: script.send_notification
          data:
            destination:
              - persistent
            title: "{{ unavail_title }}"
            notification_id: "{{ unavail_id }}"
            message: |
              {% for device in curr_device_list %}
                {{ device }}{% if not loop.last %},{% endif %}
              {% endfor %}
          
        # Process all newly unavailable devices.
        - repeat:
            count: "{{ curr_unavail_devices }}"
            sequence:
                
              - variables:
                  device_name: "{{ curr_device_list[repeat.index - 1] }}"
              
              - if:
                  - "{{ device_name not in prev_device_list }}"
                  
                then:
                
                  - variables:
                      timestamp_entity: "{{ 'input_number.' ~ (device_name | replace(' ', '_') | lower) }}"
          
                  # Save the timestamp for the device. This causes the device to be added to the previous unavailable devices sensor.
                  - service: input_number.set_value
                    target:
                      entity_id: "{{ timestamp_entity }}"
                    data:
                      value: "{{ as_timestamp(now()) }}"
        
    # Devices have become available, and some are still unavailable.
    - conditions: "{{ trigger.to_state.state | int(0) < trigger.from_state.state | int(0) }}"
      
      sequence:
          
        # Issue the unavailable devices notification.
        - service: script.send_notification
          data:
            destination:
              - persistent
            title: "{{ unavail_title }}"
            notification_id: "{{ unavail_id }}"
            message: |
              {% for device in curr_device_list %}
                {{ device }}{% if not loop.last %},{% endif %}
              {% endfor %}
          
        # Process all newly available devices.
        - repeat:
            count: "{{ prev_unavail_devices }}"
            sequence:
                
              - variables:
                  device_name: "{{ prev_device_list[repeat.index - 1] }}"
                  device_name_id: "{{ device_name | replace(' ', '_') | lower }}"
              
              - if:
                  - "{{ device_name not in curr_device_list }}"
                  
                then:
                
                  - variables:
                      timestamp_entity: "{{ 'input_number.' ~ device_name_id }}"
                      from_time: "{{ states(timestamp_entity) | int(0) | timestamp_custom('%b %d %X') }}"
                      to_time: "{{ as_timestamp(now()) | timestamp_custom('%b %d %X') }}"
                      total_friendly: >
                        {% from 'friendly_strings.jinja' import format_duration %}
                        {{ format_duration(states(timestamp_entity) | float(0)) }}
          
                  # Issue the restored device notification.
                  - service: script.send_notification
                    data:
                      destination:
                        - persistent
                      title: "{{ restored_title }}"
                      notification_id: "{{ device_type_lower ~ '_device_restored_' ~ device_name_id ~ '_' ~ as_timestamp(now()) | int(0) }}"
                      message: "{{ device_name ~ ' restored: (' ~ from_time ~ ' - ' ~ to_time ~ '), ' ~ total_friendly }}"
          
                  # Remove the timestamp for the device.
                  - service: input_number.set_value
                    target:
                      entity_id: "{{ timestamp_entity }}"
                    data:
                      value: 0
