# Notify when anyone using a device tracker is nearing home. This uses the proximity value associated with
# the device tracker.

blueprint:
  name: Proximity Notification
  description: Notify when someone is getting close to home (approximately 10 minutes away).
  domain: automation
  
  input:
    proximity_entity:
      name: Proximity Entity
      description: Proximity entity to be checked.
      selector:
        entity:
          domain: sensor
    
    proximity_meters:
      name: Proximity Meters
      description: Distance in meters below which the automation will trigger.
      selector:
        number:
          min: 10000
          max: 30000
    
    person_name:
      name: Person Name
      description: Name of the person associated with the proximity entity.

# The !input tag cannot be used in templates, so assign variables to any needed inputs.
variables:
  input_proximity_entity: !input proximity_entity
  input_proximity_meters: !input proximity_meters
  input_person_name: !input person_name
  
  # Get the direction of travel from the sensor associated with the named person.
  sensor_prefix: "{{ 'home_' ~ input_person_name | lower() ~ '_' }}"
  direction: "{{ states('sensor.' ~ sensor_prefix ~ 'direction_of_travel') }}"

# Due to the catch-22 with triggers and variables, just trigger on the proximity entity state changing. 
# We test when the person crosses the input threshold in the condition, using their proximity value (in meters).
trigger:
  - platform: state
    entity_id: !input proximity_entity
    to:

condition:
  
  # Continue only if the person has just crossed the input threshold.
  - condition: template
    value_template: >
      {% set from_state = trigger.from_state.state | int(0) %}
      {% set to_state = trigger.to_state.state | int(0) %}
      
      {{ (to_state < input_proximity_meters) and (from_state >= input_proximity_meters) }}
  
  # And is traveling towards home.
  - "{{ direction == 'towards' }}"

# Write a log message, and announce using all Alexa media players.
action:
  - service: system_log.write
    data:
      message: "{{ input_person_name }} will be arriving soon (from: {{ trigger.from_state.state }}, to: {{ trigger.to_state.state }})"
      level: info
    
  - service: script.send_notification
    data:
      destination:
        - echo
      message: "{{ input_person_name }} will be arriving soon"
      voice_entity: media_player.everywhere
