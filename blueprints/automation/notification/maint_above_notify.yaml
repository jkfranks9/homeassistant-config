# Notify for device attribute(s) being high enough to require maintenance, such as replacing a device filter.

blueprint:
  name: Maintenance High Notification
  description: Notify when device attribute(s) cross a high threshold.
  domain: automation
  
  input:
    sensor1_entity:
      name: Sensor 1 Entity
      description: First sensor entity to be checked.
      selector:
        entity:
          domain: sensor
    
    sensor2_entity:
      name: Sensor 2 Entity
      description: Second sensor entity to be checked.
      selector:
        entity:
          domain: sensor
          
    threshold1:
      name: Threshold 1 Value
      description: First sensor threshold value to trigger the notification.
      selector:
        number:
          min: 0
          max: 3000
          
    threshold2:
      name: Threshold 2 Value
      description: Second sensor threshold value to trigger the notification.
      selector:
        number:
          min: 0
          max: 3000
    
    timer_entity:
      name: Timer Entity
      description: Timer entity associated with the notification, used for throttling.
      selector:
        entity:
          domain: timer
    
    message:
      name: Notification Message
      description: Message to be issued.
    
    persistent:
      name: Indicates if the notification should persist.
      description: If true, the notification can only be removed using a future automation or script.
      selector:
        boolean:
    
    tag:
      name: Notification Tag
      description: (Optional) The tag for persistent notifications.
      default: ''

# Trigger when the sensor value(s) become too high, or when HA starts (in case HA was rebooting when the trigger would have occurred).
trigger:
  - platform: numeric_state
    entity_id: !input sensor1_entity
    above: !input threshold1
  
  - platform: numeric_state
    entity_id: !input sensor2_entity
    above: !input threshold2
  
  - platform: homeassistant
    event: start

# Guard against HA start triggers.
condition:
  - or:
    - condition: numeric_state
      entity_id: !input sensor1_entity
      above: !input threshold1

    - condition: numeric_state
      entity_id: !input sensor2_entity
      above: !input threshold2

# Send the notification after a random delay (to spread out automations done at HA start).
action:
  - delay: 
      seconds: "{{ range(2, 15) | random }}"
  
  - choose:
    
    # Handle a persistent notification.
    - conditions:
      - condition: template
        value_template: "{{ persistent }}"
      
      sequence:  
        - service: script.send_notification
          data:
            destination:
              - mobile
            title: 'Action required:'
            message: !input message
            channel: persistent
            throttled: true
            timer_entity: !input timer_entity
            tag: !input tag
            timeout: 0
    
    # Handle a non-persistent notification.
    default: 
      - service: script.send_notification
        data:
          destination:
            - mobile
          title: 'Action required:'
          message: !input message
          channel: standard
          throttled: true
          timer_entity: !input timer_entity
          tag: ''
          timeout: 0
