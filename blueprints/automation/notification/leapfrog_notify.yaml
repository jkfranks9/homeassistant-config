# Notify for something that has a current value and a threshold value, where once the action is performed for which
# the notification was sent, the threshold entity changes. For example:
#
# We have a truck mileage entity and a truck service due entity, such as:
#   mileage = 240042, due = 240000
# 
# We want to send the notification at this point to get the truck serviced. Once that happens the due entity gets
# changed for the next service interval (for example 5000). Assuming a few miles added to/from the shop, the new values are:
#   mileage = 240055, due = 245000
#
# So now we want to clear the notification, but we're triggering on the due entity instead of the mileage entity.
# Hence the leapfrog in the name.

blueprint:
  name: Leapfrog Notification
  description: Notify for two entities that leapfrog each other.
  domain: automation
  
  input:
    current_value_entity:
      name: Current Value Entity
      description: Entity that contains the current value.
      selector:
        entity:
          
    due_value_entity:
      name: Due Value Entity
      description: Entity that contains the due value.
      selector:
        entity:
    
    timer_entity:
      name: Timer Entity
      description: (Optional) Timer entity associated with the notification, used for throttling. If not specified then no throttling is done.
      default: {}
      selector:
        entity:
          domain: timer
    
    title:
      name: Title
      description: (Optional) Title for the notification.
      default: action
      selector:
        select:
          options:
            - action
            - attention
            - warning
    
    message:
      name: Notification Message
      description: Message to be issued.
    
    channel:
      name: Channel
      description: The notification channel.
    
    timeout:
      name: Timeout
      description: (Optional) Timeout in seconds when the notification should be removed, if the channel is temporary.
      default: 0
    
    tag:
      name: Notification Tag
      description: The tag for the notification.

# Allow for multiple simultaneous changes. Might be unnecessary, but it doesn't hurt.
mode: queued

# The !input tag cannot be used in templates, so assign variables to any needed inputs.
variables:
  input_timer_entity: !input timer_entity
  input_title: !input title
  input_message: !input message
  input_channel: !input channel
  input_timeout: !input timeout
  input_tag: !input tag
  
  title_text: "{{ iif(input_title == 'action', 'Action required:', iif(input_title == 'attention', 'Attention:', 'Warning:')) }}"

trigger:
  
  # Trigger when the current value rises above the due value.
  - platform: numeric_state
    entity_id: !input current_value_entity
    above: !input due_value_entity
    id: notify
  
  # Trigger when the due value rises above the current value.
  - platform: numeric_state
    entity_id: !input due_value_entity
    above: !input current_value_entity
    id: clear

# Weed out junk.
condition: "{{ trigger.from_state.state not in ['unknown', 'unavailable'] }}"

action:
  
  # Notification trigger.
  - if:
      - "{{ trigger.id == 'notify' }}"
    
    then:
    
      - variables:
          throttle: "{{ iif(input_timer_entity, true, false) }}"
          tag_registry_value: >
            {% set ns = namespace(val = {'tag': input_tag, 'title': title_text, 'message': input_message, 'channel': input_channel, 'timeout': input_timeout} )  %}
            {% if input_timer_entity | length > 0 %}
              {% set timer = {'timer_entity': input_timer_entity} %}
              {{ dict(ns.val, **timer) }}
            {% else %}
              {{ ns.val }}
            {% endif %}
          
      # Send the notification.
      - service: script.send_notification
        data:
          destination:
            - mobile
          title: "{{ title_text }}"
          message: !input message
          channel: !input channel
          timeout: !input timeout
          throttled: "{{ throttle }}"
          timer_entity: !input timer_entity
          tag: !input tag
          
      # Register the tag.
      - service: script.register_mobile_notification
        data: "{{ tag_registry_value }}"
    
    # Clear trigger.
    else:
    
      # Remove the notification and unregister the tag.
      - service: script.remove_mobile_notification
        data:
          tag: !input tag
