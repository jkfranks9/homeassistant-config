# Notify for a state change, with a set of conditions.

blueprint:
  name: State Notification
  description: Notify for a state change.
  domain: automation
  
  input:
    entity:
      name: Entity
      description: Entity to be checked.
      selector:
        entity:
    
    from_state:
      name: From State
      description: The from state for the notify trigger. This is the to state for the clear trigger If it's enabled.
    
    to_state:
      name: To State
      description: The to state for the notify trigger. This is the from state for the clear trigger If it's enabled.
    
    conditions:
      name: Conditions
      description: (Optional) Conditions that must be true to execute.
      default: "{{ 1 == 1 }}"
      selector:
        condition:
    
    timer_entity:
      name: Timer Entity
      description: (Optional) Timer entity associated with the notification, used for throttling. If not specified then no throttling is done.
      default: {}
      selector:
        entity:
          domain: timer
    
    enable_clear_trigger:
      name: Enable Clear Trigger
      description: (Optional) Whether or not the trigger to clear the notification is enabled. Use false if no automated clear event is expected.
      default: true
      selector:
        boolean:
    
    enable_echo_destination:
      name: Enable Echo Destination
      description: (Optional) Whether or not to send the notification to echo devices.
      default: false
      selector:
        boolean:
    
    title:
      name: Title
      description: (Optional) Title for the notification.
      default: action
      selector:
        select:
          options:
            - action
            - attention
            - warning
    
    message:
      name: Notification Message
      description: Message to be issued.
    
    channel:
      name: Channel
      description: The notification channel.
    
    timeout:
      name: Timeout
      description: (Optional) Timeout in seconds when the notification should be removed, if the channel is temporary.
      default: 0
    
    tag:
      name: Notification Tag
      description: The tag for the notification.

# Allow for multiple simultaneous changes. Might be unnecessary, but it doesn't hurt.
mode: queued

# The !input tag cannot be used in templates, so assign variables to any needed inputs.
variables:
  input_timer_entity: !input timer_entity
  input_enable_echo_destination: !input enable_echo_destination
  input_title: !input title
  input_message: !input message
  input_channel: !input channel
  input_timeout: !input timeout
  input_tag: !input tag
  
  title_text: "{{ iif(input_title == 'action', 'Action required:', iif(input_title == 'attention', 'Attention:', 'Warning:')) }}"

trigger:
  
  # Notify trigger; the from/to states make sense.
  - platform: state
    entity_id: !input entity
    from: !input from_state
    to: !input to_state
    id: notify
  
  # Clear trigger; the from/to states are reversed. This trigger can optionally be disbaled.
  - platform: state
    entity_id: !input entity
    from: !input to_state
    to: !input from_state
    enabled: !input enable_clear_trigger
    id: clear

# Weed out junk.
condition: "{{ trigger.from_state.state not in ['unknown', 'unavailable'] }}"

action:
  
  # Ensure the input conditions are met.
  - if: !input conditions
    
    then:
  
      # Notification trigger.
      - if:
          - "{{ trigger.id == 'notify' }}"
        
        then:
        
          - variables:
              destination: "{{ iif(input_enable_echo_destination, ['mobile', 'echo'], ['mobile']) }}"
              message: !input message
              throttle: "{{ iif(input_timer_entity, true, false) }}"
              tag_registry_value: >
                {% set ns = namespace(val = {'tag': input_tag, 'title': title_text, 'message': input_message, 'channel': input_channel, 'timeout': input_timeout} )  %}
                {% if input_timer_entity | length > 0 %}
                  {% set timer = {'timer_entity': input_timer_entity} %}
                  {{ dict(ns.val, **timer) }}
                {% else %}
                  {{ ns.val }}
                {% endif %}
              notification_data: >
                {% set vars = {'destination': destination, 'title': title_text, 'message': input_message, 'channel': input_channel, 'timeout': input_timeout, 'throttled': throttle, 'timer_entity': input_timer_entity} %}
                {% if input_enable_echo_destination %}
                  {% set additional = {'media_player_entity': 'media_player.everywhere', 'tag': input_tag} %}
                {% else %}
                  {% set additional = {'tag': input_tag} %}
                {% endif %}
                
                {{ dict(vars, **additional) }}
          
          # Send the notification.
          - service: script.send_notification
            data: "{{ notification_data }}"
              
          # Register the tag.
          - service: script.register_mobile_notification
            data: "{{ tag_registry_value }}"
        
        # Clear trigger.
        else:
        
          # Remove the notification and unregister the tag.
          - service: script.remove_mobile_notification
            data:
              tag: !input tag
